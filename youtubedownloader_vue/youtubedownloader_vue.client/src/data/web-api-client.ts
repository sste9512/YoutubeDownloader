//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IChannelClient {
    get(channelId: ChannelId): Promise<Channel>;
    getByUser(userName: UserName): Promise<Channel>;
    getBySlug(channelSlug: ChannelSlug): Promise<Channel>;
    getByHandle(channelHandle: ChannelHandle): Promise<Channel>;
    getUploads(channelId: ChannelId): Promise<PlaylistVideo[]>;
}

export class ChannelClient implements IChannelClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(channelId: ChannelId, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Channel/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getByUser(userName: UserName, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Channel/GetByUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userName);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByUser(_response);
        });
    }

    protected processGetByUser(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getBySlug(channelSlug: ChannelSlug, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Channel/GetBySlug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelSlug);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBySlug(_response);
        });
    }

    protected processGetBySlug(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getByHandle(channelHandle: ChannelHandle, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Channel/GetByHandle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelHandle);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByHandle(_response);
        });
    }

    protected processGetByHandle(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getUploads(channelId: ChannelId, cancelToken?: CancelToken): Promise<PlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Channel/GetUploads";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUploads(_response);
        });
    }

    protected processGetUploads(response: AxiosResponse): Promise<PlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistVideo[]>(null as any);
    }
}

export interface IPlaylistClient {
    get(playlistId: PlaylistId): Promise<Playlist>;
    getVideos(playlistId: PlaylistId): Promise<PlaylistVideo[]>;
    getVideoBatches(playlistId: PlaylistId): Promise<BatchOfPlaylistVideo[]>;
}

export class PlaylistClient implements IPlaylistClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<Playlist> {
        let url_ = this.baseUrl + "/api/Playlist/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<Playlist> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Playlist.fromJS(resultData200);
            return Promise.resolve<Playlist>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Playlist>(null as any);
    }

    getVideos(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<PlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Playlist/GetVideos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideos(_response);
        });
    }

    protected processGetVideos(response: AxiosResponse): Promise<PlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistVideo[]>(null as any);
    }

    getVideoBatches(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<BatchOfPlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Playlist/GetVideoBatches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideoBatches(_response);
        });
    }

    protected processGetVideoBatches(response: AxiosResponse): Promise<BatchOfPlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfPlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfPlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfPlaylistVideo[]>(null as any);
    }
}

export interface ISearchClient {
    getResults(searchQuery: string | undefined): Promise<ISearchResult[]>;
    getVideos(searchQuery: string | undefined): Promise<VideoSearchResult[]>;
    getPlaylists(searchQuery: string | undefined): Promise<PlaylistSearchResult[]>;
    getChannels(searchQuery: string | undefined): Promise<ChannelSearchResult[]>;
    getResultBatches(searchQuery: string | undefined, searchFilter: SearchFilter | undefined): Promise<BatchOfISearchResult[]>;
}

export class SearchClient implements ISearchClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    getResults(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<ISearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetResults?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResults(_response);
        });
    }

    protected processGetResults(response: AxiosResponse): Promise<ISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ISearchResult[]>(null as any);
    }

    getVideos(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<VideoSearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetVideos?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideos(_response);
        });
    }

    protected processGetVideos(response: AxiosResponse): Promise<VideoSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VideoSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<VideoSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VideoSearchResult[]>(null as any);
    }

    getPlaylists(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<PlaylistSearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetPlaylists?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPlaylists(_response);
        });
    }

    protected processGetPlaylists(response: AxiosResponse): Promise<PlaylistSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistSearchResult[]>(null as any);
    }

    getChannels(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<ChannelSearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetChannels?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetChannels(_response);
        });
    }

    protected processGetChannels(response: AxiosResponse): Promise<ChannelSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChannelSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ChannelSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelSearchResult[]>(null as any);
    }

    getResultBatches(searchQuery: string | undefined, searchFilter: SearchFilter | undefined, cancelToken?: CancelToken): Promise<BatchOfISearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetResultBatches?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        if (searchFilter === null)
            throw new Error("The parameter 'searchFilter' cannot be null.");
        else if (searchFilter !== undefined)
            url_ += "searchFilter=" + encodeURIComponent("" + searchFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResultBatches(_response);
        });
    }

    protected processGetResultBatches(response: AxiosResponse): Promise<BatchOfISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfISearchResult[]>(null as any);
    }
}

export interface IVideoClient {
    get(videoId: string | undefined): Promise<Video>;
}

export class VideoClient implements IVideoClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(videoId: string | undefined, cancelToken?: CancelToken): Promise<Video> {
        let url_ = this.baseUrl + "/api/Video/Get?";
        if (videoId === null)
            throw new Error("The parameter 'videoId' cannot be null.");
        else if (videoId !== undefined)
            url_ += "videoId=" + encodeURIComponent("" + videoId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<Video> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Video.fromJS(resultData200);
            return Promise.resolve<Video>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Video>(null as any);
    }
}

export interface IYoutubeClient {
    getByVideoId(videoId: VideoId): Promise<Video>;
    getByPlayListId(playlistId: PlaylistId): Promise<Playlist>;
    getVideosByPlayListId(playlistId: PlaylistId): Promise<PlaylistVideo[]>;
    getVideoBatches(playlistId: PlaylistId): Promise<BatchOfPlaylistVideo[]>;
    getByChannelId(channelId: ChannelId): Promise<Channel>;
    getByUser(userName: UserName): Promise<Channel>;
    getBySlug(channelSlug: ChannelSlug): Promise<Channel>;
    getByHandle(channelHandle: ChannelHandle): Promise<Channel>;
    getUploads(channelId: ChannelId): Promise<PlaylistVideo[]>;
    getResults(searchQuery: string | undefined): Promise<ISearchResult[]>;
    getVideos(searchQuery: string | undefined): Promise<VideoSearchResult[]>;
    getPlaylists(searchQuery: string | undefined): Promise<PlaylistSearchResult[]>;
    getChannels(searchQuery: string | undefined): Promise<ChannelSearchResult[]>;
    getResultBatches(searchQuery: string | undefined, searchFilter: SearchFilter | undefined): Promise<BatchOfISearchResult[]>;
    getResultBatchesWithFilter(searchQuery: string | undefined): Promise<BatchOfISearchResult[]>;
}

export class YoutubeClient implements IYoutubeClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    getByVideoId(videoId: VideoId, cancelToken?: CancelToken): Promise<Video> {
        let url_ = this.baseUrl + "/api/Youtube/GetByVideoId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(videoId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByVideoId(_response);
        });
    }

    protected processGetByVideoId(response: AxiosResponse): Promise<Video> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Video.fromJS(resultData200);
            return Promise.resolve<Video>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Video>(null as any);
    }

    getByPlayListId(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<Playlist> {
        let url_ = this.baseUrl + "/api/Youtube/GetByPlayListId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPlayListId(_response);
        });
    }

    protected processGetByPlayListId(response: AxiosResponse): Promise<Playlist> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Playlist.fromJS(resultData200);
            return Promise.resolve<Playlist>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Playlist>(null as any);
    }

    getVideosByPlayListId(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<PlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetVideosByPlayListId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideosByPlayListId(_response);
        });
    }

    protected processGetVideosByPlayListId(response: AxiosResponse): Promise<PlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistVideo[]>(null as any);
    }

    getVideoBatches(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<BatchOfPlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetVideoBatches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideoBatches(_response);
        });
    }

    protected processGetVideoBatches(response: AxiosResponse): Promise<BatchOfPlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfPlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfPlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfPlaylistVideo[]>(null as any);
    }

    getByChannelId(channelId: ChannelId, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Youtube/GetByChannelId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByChannelId(_response);
        });
    }

    protected processGetByChannelId(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getByUser(userName: UserName, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Youtube/GetByUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userName);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByUser(_response);
        });
    }

    protected processGetByUser(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getBySlug(channelSlug: ChannelSlug, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Youtube/GetBySlug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelSlug);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBySlug(_response);
        });
    }

    protected processGetBySlug(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getByHandle(channelHandle: ChannelHandle, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Youtube/GetByHandle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelHandle);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByHandle(_response);
        });
    }

    protected processGetByHandle(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getUploads(channelId: ChannelId, cancelToken?: CancelToken): Promise<PlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetUploads";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUploads(_response);
        });
    }

    protected processGetUploads(response: AxiosResponse): Promise<PlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistVideo[]>(null as any);
    }

    getResults(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<ISearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetResults?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResults(_response);
        });
    }

    protected processGetResults(response: AxiosResponse): Promise<ISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ISearchResult[]>(null as any);
    }

    getVideos(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<VideoSearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetVideos?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideos(_response);
        });
    }

    protected processGetVideos(response: AxiosResponse): Promise<VideoSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VideoSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<VideoSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VideoSearchResult[]>(null as any);
    }

    getPlaylists(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<PlaylistSearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetPlaylists?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPlaylists(_response);
        });
    }

    protected processGetPlaylists(response: AxiosResponse): Promise<PlaylistSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistSearchResult[]>(null as any);
    }

    getChannels(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<ChannelSearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetChannels?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetChannels(_response);
        });
    }

    protected processGetChannels(response: AxiosResponse): Promise<ChannelSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChannelSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ChannelSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelSearchResult[]>(null as any);
    }

    getResultBatches(searchQuery: string | undefined, searchFilter: SearchFilter | undefined, cancelToken?: CancelToken): Promise<BatchOfISearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetResultBatches?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        if (searchFilter === null)
            throw new Error("The parameter 'searchFilter' cannot be null.");
        else if (searchFilter !== undefined)
            url_ += "searchFilter=" + encodeURIComponent("" + searchFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResultBatches(_response);
        });
    }

    protected processGetResultBatches(response: AxiosResponse): Promise<BatchOfISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfISearchResult[]>(null as any);
    }

    getResultBatchesWithFilter(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<BatchOfISearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetResultBatchesWithFilter?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResultBatchesWithFilter(_response);
        });
    }

    protected processGetResultBatchesWithFilter(response: AxiosResponse): Promise<BatchOfISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfISearchResult[]>(null as any);
    }
}

/** Metadata associated with a YouTube channel. */
export class Channel implements IChannel {
    /** Channel ID. */
    id?: ChannelId;
    /** Channel URL. */
    url?: string;
    /** Channel title. */
    title?: string;
    /** Channel thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IChannel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? ChannelId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Channel {
        data = typeof data === 'object' ? data : {};
        let result = new Channel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube channel. */
export interface IChannel {
    /** Channel ID. */
    id?: ChannelId;
    /** Channel URL. */
    url?: string;
    /** Channel title. */
    title?: string;
    /** Channel thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Represents a syntactically valid YouTube channel ID. */
export class ChannelId implements IChannelId {
    /** Raw ID value. */
    value?: string;

    constructor(data?: IChannelId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ChannelId {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube channel ID. */
export interface IChannelId {
    /** Raw ID value. */
    value?: string;
}

/** Thumbnail image. */
export class Thumbnail implements IThumbnail {
    /** Thumbnail URL. */
    url?: string;
    /** Thumbnail resolution. */
    resolution?: Resolution;

    constructor(data?: IThumbnail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.resolution = _data["resolution"] ? Resolution.fromJS(_data["resolution"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Thumbnail {
        data = typeof data === 'object' ? data : {};
        let result = new Thumbnail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["resolution"] = this.resolution ? this.resolution.toJSON() : <any>undefined;
        return data;
    }
}

/** Thumbnail image. */
export interface IThumbnail {
    /** Thumbnail URL. */
    url?: string;
    /** Thumbnail resolution. */
    resolution?: Resolution;
}

/** Resolution of an image or a video. */
export class Resolution implements IResolution {
    /** Viewport width, measured in pixels. */
    width?: number;
    /** Viewport height, measured in pixels. */
    height?: number;
    /** Viewport area (i.e. width multiplied by height). */
    area?: number;

    constructor(data?: IResolution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.width = _data["width"];
            this.height = _data["height"];
            this.area = _data["area"];
        }
    }

    static fromJS(data: any): Resolution {
        data = typeof data === 'object' ? data : {};
        let result = new Resolution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        data["area"] = this.area;
        return data;
    }
}

/** Resolution of an image or a video. */
export interface IResolution {
    /** Viewport width, measured in pixels. */
    width?: number;
    /** Viewport height, measured in pixels. */
    height?: number;
    /** Viewport area (i.e. width multiplied by height). */
    area?: number;
}

/** Represents a syntactically valid YouTube user name. */
export class UserName implements IUserName {
    /** Raw user name value. */
    value?: string;

    constructor(data?: IUserName) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): UserName {
        data = typeof data === 'object' ? data : {};
        let result = new UserName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube user name. */
export interface IUserName {
    /** Raw user name value. */
    value?: string;
}

/** Represents a syntactically valid YouTube channel slug. */
export class ChannelSlug implements IChannelSlug {
    /** Raw slug value. */
    value?: string;

    constructor(data?: IChannelSlug) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ChannelSlug {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelSlug();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube channel slug. */
export interface IChannelSlug {
    /** Raw slug value. */
    value?: string;
}

/** Represents a syntactically valid YouTube channel handle. */
export class ChannelHandle implements IChannelHandle {
    /** Raw handle value. */
    value?: string;

    constructor(data?: IChannelHandle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ChannelHandle {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube channel handle. */
export interface IChannelHandle {
    /** Raw handle value. */
    value?: string;
}

/** Metadata associated with a YouTube video included in a playlist. */
export class PlaylistVideo implements IPlaylistVideo {
    /** ID of the playlist that contains this video. */
    playlistId?: PlaylistId;
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IPlaylistVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playlistId = _data["playlistId"] ? PlaylistId.fromJS(_data["playlistId"]) : <any>undefined;
            this.id = _data["id"] ? VideoId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            this.duration = _data["duration"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlaylistVideo {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistVideo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playlistId"] = this.playlistId ? this.playlistId.toJSON() : <any>undefined;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["duration"] = this.duration;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube video included in a playlist. */
export interface IPlaylistVideo {
    /** ID of the playlist that contains this video. */
    playlistId?: PlaylistId;
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Represents a syntactically valid YouTube playlist ID. */
export class PlaylistId implements IPlaylistId {
    /** Raw ID value. */
    value?: string;

    constructor(data?: IPlaylistId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): PlaylistId {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube playlist ID. */
export interface IPlaylistId {
    /** Raw ID value. */
    value?: string;
}

/** Represents a syntactically valid YouTube video ID. */
export class VideoId implements IVideoId {
    /** Raw ID value. */
    value?: string;

    constructor(data?: IVideoId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): VideoId {
        data = typeof data === 'object' ? data : {};
        let result = new VideoId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube video ID. */
export interface IVideoId {
    /** Raw ID value. */
    value?: string;
}

/** Reference to a channel that owns a specific YouTube video or playlist. */
export class Author implements IAuthor {
    /** Channel ID. */
    channelId?: ChannelId;
    /** Channel URL. */
    channelUrl?: string;
    /** Channel title. */
    channelTitle?: string;
    /** Channel title. */
    title?: string;

    constructor(data?: IAuthor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.channelId = _data["channelId"] ? ChannelId.fromJS(_data["channelId"]) : <any>undefined;
            this.channelUrl = _data["channelUrl"];
            this.channelTitle = _data["channelTitle"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): Author {
        data = typeof data === 'object' ? data : {};
        let result = new Author();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId ? this.channelId.toJSON() : <any>undefined;
        data["channelUrl"] = this.channelUrl;
        data["channelTitle"] = this.channelTitle;
        data["title"] = this.title;
        return data;
    }
}

/** Reference to a channel that owns a specific YouTube video or playlist. */
export interface IAuthor {
    /** Channel ID. */
    channelId?: ChannelId;
    /** Channel URL. */
    channelUrl?: string;
    /** Channel title. */
    channelTitle?: string;
    /** Channel title. */
    title?: string;
}

/** Metadata associated with a YouTube playlist. */
export class Playlist implements IPlaylist {
    /** Playlist ID. */
    id?: PlaylistId;
    /** Playlist URL. */
    url?: string;
    /** Playlist title. */
    title?: string;
    /** Playlist author. */
    author?: Author | undefined;
    /** Playlist description. */
    description?: string;
    /** Total count of videos included in the playlist. */
    count?: number | undefined;
    /** Playlist thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IPlaylist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? PlaylistId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            this.description = _data["description"];
            this.count = _data["count"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Playlist {
        data = typeof data === 'object' ? data : {};
        let result = new Playlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["count"] = this.count;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube playlist. */
export interface IPlaylist {
    /** Playlist ID. */
    id?: PlaylistId;
    /** Playlist URL. */
    url?: string;
    /** Playlist title. */
    title?: string;
    /** Playlist author. */
    author?: Author | undefined;
    /** Playlist description. */
    description?: string;
    /** Total count of videos included in the playlist. */
    count?: number | undefined;
    /** Playlist thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Generic collection of items returned by a single request. */
export class BatchOfPlaylistVideo implements IBatchOfPlaylistVideo {
    /** Items included in the batch. */
    items?: PlaylistVideo[];

    constructor(data?: IBatchOfPlaylistVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PlaylistVideo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchOfPlaylistVideo {
        data = typeof data === 'object' ? data : {};
        let result = new BatchOfPlaylistVideo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** Generic collection of items returned by a single request. */
export interface IBatchOfPlaylistVideo {
    /** Items included in the batch. */
    items?: PlaylistVideo[];
}

/** Abstract result returned by a search query.    Use pattern matching to handle specific instances of this type.    Can be either one of the following: */
export abstract class ISearchResult implements IISearchResult {
    /** Result URL. */
    url?: string;
    /** Result title. */
    title?: string;

    constructor(data?: IISearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): ISearchResult {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ISearchResult' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["title"] = this.title;
        return data;
    }
}

/** Abstract result returned by a search query.    Use pattern matching to handle specific instances of this type.    Can be either one of the following: */
export interface IISearchResult {
    /** Result URL. */
    url?: string;
    /** Result title. */
    title?: string;
}

/** Metadata associated with a YouTube video returned by a search query. */
export class VideoSearchResult implements IVideoSearchResult {
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IVideoSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? VideoId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            this.duration = _data["duration"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VideoSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new VideoSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["duration"] = this.duration;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube video returned by a search query. */
export interface IVideoSearchResult {
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Metadata associated with a YouTube playlist returned by a search query. */
export class PlaylistSearchResult implements IPlaylistSearchResult {
    /** Playlist ID. */
    id?: PlaylistId;
    /** Playlist URL. */
    url?: string;
    /** Playlist title. */
    title?: string;
    /** Playlist author. */
    author?: Author | undefined;
    /** Playlist thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IPlaylistSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? PlaylistId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlaylistSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube playlist returned by a search query. */
export interface IPlaylistSearchResult {
    /** Playlist ID. */
    id?: PlaylistId;
    /** Playlist URL. */
    url?: string;
    /** Playlist title. */
    title?: string;
    /** Playlist author. */
    author?: Author | undefined;
    /** Playlist thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Metadata associated with a YouTube channel returned by a search query. */
export class ChannelSearchResult implements IChannelSearchResult {
    /** Channel ID. */
    id?: ChannelId;
    /** Channel URL. */
    url?: string;
    /** Channel title. */
    title?: string;
    /** Channel thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IChannelSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? ChannelId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChannelSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube channel returned by a search query. */
export interface IChannelSearchResult {
    /** Channel ID. */
    id?: ChannelId;
    /** Channel URL. */
    url?: string;
    /** Channel title. */
    title?: string;
    /** Channel thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Generic collection of items returned by a single request. */
export class BatchOfISearchResult implements IBatchOfISearchResult {
    /** Items included in the batch. */
    items?: ISearchResult[];

    constructor(data?: IBatchOfISearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ISearchResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchOfISearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new BatchOfISearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** Generic collection of items returned by a single request. */
export interface IBatchOfISearchResult {
    /** Items included in the batch. */
    items?: ISearchResult[];
}

/** Filter applied to a YouTube search query. */
export enum SearchFilter {
    None = 0,
    Video = 1,
    Playlist = 2,
    Channel = 3,
}

/** Metadata associated with a YouTube video. */
export class Video implements IVideo {
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video upload date. */
    uploadDate?: Date;
    /** Video description. */
    description?: string;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];
    /** Available search keywords for the video. */
    keywords?: string[];
    /** Engagement statistics for the video. */
    engagement?: Engagement;

    constructor(data?: IVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? VideoId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            this.uploadDate = _data["uploadDate"] ? new Date(_data["uploadDate"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.duration = _data["duration"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
            if (Array.isArray(_data["keywords"])) {
                this.keywords = [] as any;
                for (let item of _data["keywords"])
                    this.keywords!.push(item);
            }
            this.engagement = _data["engagement"] ? Engagement.fromJS(_data["engagement"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Video {
        data = typeof data === 'object' ? data : {};
        let result = new Video();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["uploadDate"] = this.uploadDate ? this.uploadDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["duration"] = this.duration;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        if (Array.isArray(this.keywords)) {
            data["keywords"] = [];
            for (let item of this.keywords)
                data["keywords"].push(item);
        }
        data["engagement"] = this.engagement ? this.engagement.toJSON() : <any>undefined;
        return data;
    }
}

/** Metadata associated with a YouTube video. */
export interface IVideo {
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video upload date. */
    uploadDate?: Date;
    /** Video description. */
    description?: string;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];
    /** Available search keywords for the video. */
    keywords?: string[];
    /** Engagement statistics for the video. */
    engagement?: Engagement;
}

/** Engagement statistics. */
export class Engagement implements IEngagement {
    /** View count. */
    viewCount?: number;
    /** Like count. */
    likeCount?: number;
    /** Dislike count. */
    dislikeCount?: number;
    /** Average rating. */
    averageRating?: number;

    constructor(data?: IEngagement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.viewCount = _data["viewCount"];
            this.likeCount = _data["likeCount"];
            this.dislikeCount = _data["dislikeCount"];
            this.averageRating = _data["averageRating"];
        }
    }

    static fromJS(data: any): Engagement {
        data = typeof data === 'object' ? data : {};
        let result = new Engagement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["viewCount"] = this.viewCount;
        data["likeCount"] = this.likeCount;
        data["dislikeCount"] = this.dislikeCount;
        data["averageRating"] = this.averageRating;
        return data;
    }
}

/** Engagement statistics. */
export interface IEngagement {
    /** View count. */
    viewCount?: number;
    /** Like count. */
    likeCount?: number;
    /** Dislike count. */
    dislikeCount?: number;
    /** Average rating. */
    averageRating?: number;
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}