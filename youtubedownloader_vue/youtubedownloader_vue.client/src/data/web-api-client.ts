//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export interface IChannelClient {
    get(channelId: ChannelId): Promise<Channel>;
    getByUser(userName: UserName): Promise<Channel>;
    getBySlug(channelSlug: ChannelSlug): Promise<Channel>;
    getByHandle(channelHandle: ChannelHandle): Promise<Channel>;
    getUploads(channelId: ChannelId): Promise<PlaylistVideo[]>;
}

export class ChannelClient implements IChannelClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(channelId: ChannelId, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Channel/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getByUser(userName: UserName, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Channel/GetByUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userName);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByUser(_response);
        });
    }

    protected processGetByUser(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getBySlug(channelSlug: ChannelSlug, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Channel/GetBySlug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelSlug);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBySlug(_response);
        });
    }

    protected processGetBySlug(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getByHandle(channelHandle: ChannelHandle, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Channel/GetByHandle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelHandle);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByHandle(_response);
        });
    }

    protected processGetByHandle(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getUploads(channelId: ChannelId, cancelToken?: CancelToken): Promise<PlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Channel/GetUploads";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUploads(_response);
        });
    }

    protected processGetUploads(response: AxiosResponse): Promise<PlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistVideo[]>(null as any);
    }
}

export interface IIdentityClient {
    isAuthenticated(): Promise<boolean>;
    loginGET(request: LoginRequest): Promise<string>;
    loginPOST(request: LoginRequest): Promise<string>;
    logout(): Promise<FileResponse>;
    getUsername(): Promise<string>;
}

export class IdentityClient implements IIdentityClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    isAuthenticated( cancelToken?: CancelToken): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Identity/IsAuthenticated";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processIsAuthenticated(_response);
        });
    }

    protected processIsAuthenticated(response: AxiosResponse): Promise<boolean> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<boolean>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<boolean>(null as any);
    }

    loginGET(request: LoginRequest, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/Identity/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLoginGET(_response);
        });
    }

    protected processLoginGET(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    loginPOST(request: LoginRequest, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/Identity/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLoginPOST(_response);
        });
    }

    protected processLoginPOST(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    logout( cancelToken?: CancelToken): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Identity/Logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            responseType: "blob",
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/octet-stream"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: AxiosResponse): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers["content-disposition"] : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return Promise.resolve({ fileName: fileName, status: status, data: new Blob([response.data], { type: response.headers["content-type"] }), headers: _headers });
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    getUsername( cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/Identity/GetUsername";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUsername(_response);
        });
    }

    protected processGetUsername(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }
}

export interface IOneDriveClient {
    uploadFile(file: FileParameter | null | undefined): Promise<string>;
    listFiles(): Promise<DriveItem[]>;
}

export class OneDriveClient implements IOneDriveClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    uploadFile(file: FileParameter | null | undefined, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/api/OneDrive/UploadFile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("file", file.data, file.fileName ? file.fileName : "file");

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processUploadFile(_response);
        });
    }

    protected processUploadFile(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    listFiles( cancelToken?: CancelToken): Promise<DriveItem[]> {
        let url_ = this.baseUrl + "/api/OneDrive/ListFiles";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processListFiles(_response);
        });
    }

    protected processListFiles(response: AxiosResponse): Promise<DriveItem[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(DriveItem.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<DriveItem[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<DriveItem[]>(null as any);
    }
}

export interface IPlaylistClient {
    get(playlistId: PlaylistId): Promise<Playlist>;
    getVideos(playlistId: PlaylistId): Promise<PlaylistVideo[]>;
    getVideoBatches(playlistId: PlaylistId): Promise<BatchOfPlaylistVideo[]>;
}

export class PlaylistClient implements IPlaylistClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<Playlist> {
        let url_ = this.baseUrl + "/api/Playlist/Get";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<Playlist> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Playlist.fromJS(resultData200);
            return Promise.resolve<Playlist>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Playlist>(null as any);
    }

    getVideos(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<PlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Playlist/GetVideos";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideos(_response);
        });
    }

    protected processGetVideos(response: AxiosResponse): Promise<PlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistVideo[]>(null as any);
    }

    getVideoBatches(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<BatchOfPlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Playlist/GetVideoBatches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideoBatches(_response);
        });
    }

    protected processGetVideoBatches(response: AxiosResponse): Promise<BatchOfPlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfPlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfPlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfPlaylistVideo[]>(null as any);
    }
}

export interface ISearchClient {
    getResults(searchQuery: string | undefined): Promise<ISearchResult[]>;
    getVideos(searchQuery: string | undefined): Promise<VideoSearchResult[]>;
    getPlaylists(searchQuery: string | undefined): Promise<PlaylistSearchResult[]>;
    getChannels(searchQuery: string | undefined): Promise<ChannelSearchResult[]>;
    getResultBatches(searchQuery: string | undefined, searchFilter: SearchFilter | undefined): Promise<BatchOfISearchResult[]>;
}

export class SearchClient implements ISearchClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    getResults(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<ISearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetResults?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResults(_response);
        });
    }

    protected processGetResults(response: AxiosResponse): Promise<ISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ISearchResult[]>(null as any);
    }

    getVideos(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<VideoSearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetVideos?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideos(_response);
        });
    }

    protected processGetVideos(response: AxiosResponse): Promise<VideoSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VideoSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<VideoSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VideoSearchResult[]>(null as any);
    }

    getPlaylists(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<PlaylistSearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetPlaylists?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPlaylists(_response);
        });
    }

    protected processGetPlaylists(response: AxiosResponse): Promise<PlaylistSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistSearchResult[]>(null as any);
    }

    getChannels(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<ChannelSearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetChannels?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetChannels(_response);
        });
    }

    protected processGetChannels(response: AxiosResponse): Promise<ChannelSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChannelSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ChannelSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelSearchResult[]>(null as any);
    }

    getResultBatches(searchQuery: string | undefined, searchFilter: SearchFilter | undefined, cancelToken?: CancelToken): Promise<BatchOfISearchResult[]> {
        let url_ = this.baseUrl + "/api/Search/GetResultBatches?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        if (searchFilter === null)
            throw new Error("The parameter 'searchFilter' cannot be null.");
        else if (searchFilter !== undefined)
            url_ += "searchFilter=" + encodeURIComponent("" + searchFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResultBatches(_response);
        });
    }

    protected processGetResultBatches(response: AxiosResponse): Promise<BatchOfISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfISearchResult[]>(null as any);
    }
}

export interface IVideoClient {
    get(videoId: string | undefined): Promise<Video2>;
}

export class VideoClient implements IVideoClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    get(videoId: string | undefined, cancelToken?: CancelToken): Promise<Video2> {
        let url_ = this.baseUrl + "/api/Video/Get?";
        if (videoId === null)
            throw new Error("The parameter 'videoId' cannot be null.");
        else if (videoId !== undefined)
            url_ += "videoId=" + encodeURIComponent("" + videoId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: AxiosResponse): Promise<Video2> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Video2.fromJS(resultData200);
            return Promise.resolve<Video2>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Video2>(null as any);
    }
}

export interface IYoutubeClient {
    getByVideoId(videoId: VideoId): Promise<Video2>;
    getByPlayListId(playlistId: PlaylistId): Promise<Playlist>;
    getVideosByPlayListId(playlistId: PlaylistId): Promise<PlaylistVideo[]>;
    getVideoBatches(playlistId: PlaylistId): Promise<BatchOfPlaylistVideo[]>;
    getByChannelId(channelId: ChannelId): Promise<Channel>;
    getByUser(userName: UserName): Promise<Channel>;
    getBySlug(channelSlug: ChannelSlug): Promise<Channel>;
    getByHandle(channelHandle: ChannelHandle): Promise<Channel>;
    getUploads(channelId: ChannelId): Promise<PlaylistVideo[]>;
    getResults(searchQuery: string | undefined): Promise<ISearchResult[]>;
    getVideos(searchQuery: string | undefined): Promise<VideoSearchResult[]>;
    getPlaylists(searchQuery: string | undefined): Promise<PlaylistSearchResult[]>;
    getChannels(searchQuery: string | undefined): Promise<ChannelSearchResult[]>;
    getResultBatches(searchQuery: string | undefined, searchFilter: SearchFilter | undefined): Promise<BatchOfISearchResult[]>;
    getResultBatchesWithFilter(searchQuery: string | undefined): Promise<BatchOfISearchResult[]>;
}

export class YoutubeClient implements IYoutubeClient {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    getByVideoId(videoId: VideoId, cancelToken?: CancelToken): Promise<Video2> {
        let url_ = this.baseUrl + "/api/Youtube/GetByVideoId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(videoId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByVideoId(_response);
        });
    }

    protected processGetByVideoId(response: AxiosResponse): Promise<Video2> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Video2.fromJS(resultData200);
            return Promise.resolve<Video2>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Video2>(null as any);
    }

    getByPlayListId(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<Playlist> {
        let url_ = this.baseUrl + "/api/Youtube/GetByPlayListId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByPlayListId(_response);
        });
    }

    protected processGetByPlayListId(response: AxiosResponse): Promise<Playlist> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Playlist.fromJS(resultData200);
            return Promise.resolve<Playlist>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Playlist>(null as any);
    }

    getVideosByPlayListId(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<PlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetVideosByPlayListId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideosByPlayListId(_response);
        });
    }

    protected processGetVideosByPlayListId(response: AxiosResponse): Promise<PlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistVideo[]>(null as any);
    }

    getVideoBatches(playlistId: PlaylistId, cancelToken?: CancelToken): Promise<BatchOfPlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetVideoBatches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(playlistId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideoBatches(_response);
        });
    }

    protected processGetVideoBatches(response: AxiosResponse): Promise<BatchOfPlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfPlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfPlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfPlaylistVideo[]>(null as any);
    }

    getByChannelId(channelId: ChannelId, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Youtube/GetByChannelId";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByChannelId(_response);
        });
    }

    protected processGetByChannelId(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getByUser(userName: UserName, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Youtube/GetByUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(userName);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByUser(_response);
        });
    }

    protected processGetByUser(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getBySlug(channelSlug: ChannelSlug, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Youtube/GetBySlug";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelSlug);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBySlug(_response);
        });
    }

    protected processGetBySlug(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getByHandle(channelHandle: ChannelHandle, cancelToken?: CancelToken): Promise<Channel> {
        let url_ = this.baseUrl + "/api/Youtube/GetByHandle";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelHandle);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetByHandle(_response);
        });
    }

    protected processGetByHandle(response: AxiosResponse): Promise<Channel> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = Channel.fromJS(resultData200);
            return Promise.resolve<Channel>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Channel>(null as any);
    }

    getUploads(channelId: ChannelId, cancelToken?: CancelToken): Promise<PlaylistVideo[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetUploads";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(channelId);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "GET",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetUploads(_response);
        });
    }

    protected processGetUploads(response: AxiosResponse): Promise<PlaylistVideo[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistVideo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistVideo[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistVideo[]>(null as any);
    }

    getResults(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<ISearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetResults?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResults(_response);
        });
    }

    protected processGetResults(response: AxiosResponse): Promise<ISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ISearchResult[]>(null as any);
    }

    getVideos(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<VideoSearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetVideos?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetVideos(_response);
        });
    }

    protected processGetVideos(response: AxiosResponse): Promise<VideoSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(VideoSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<VideoSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<VideoSearchResult[]>(null as any);
    }

    getPlaylists(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<PlaylistSearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetPlaylists?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPlaylists(_response);
        });
    }

    protected processGetPlaylists(response: AxiosResponse): Promise<PlaylistSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlaylistSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<PlaylistSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PlaylistSearchResult[]>(null as any);
    }

    getChannels(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<ChannelSearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetChannels?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetChannels(_response);
        });
    }

    protected processGetChannels(response: AxiosResponse): Promise<ChannelSearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ChannelSearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<ChannelSearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ChannelSearchResult[]>(null as any);
    }

    getResultBatches(searchQuery: string | undefined, searchFilter: SearchFilter | undefined, cancelToken?: CancelToken): Promise<BatchOfISearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetResultBatches?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        if (searchFilter === null)
            throw new Error("The parameter 'searchFilter' cannot be null.");
        else if (searchFilter !== undefined)
            url_ += "searchFilter=" + encodeURIComponent("" + searchFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResultBatches(_response);
        });
    }

    protected processGetResultBatches(response: AxiosResponse): Promise<BatchOfISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfISearchResult[]>(null as any);
    }

    getResultBatchesWithFilter(searchQuery: string | undefined, cancelToken?: CancelToken): Promise<BatchOfISearchResult[]> {
        let url_ = this.baseUrl + "/api/Youtube/GetResultBatchesWithFilter?";
        if (searchQuery === null)
            throw new Error("The parameter 'searchQuery' cannot be null.");
        else if (searchQuery !== undefined)
            url_ += "searchQuery=" + encodeURIComponent("" + searchQuery) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResultBatchesWithFilter(_response);
        });
    }

    protected processGetResultBatchesWithFilter(response: AxiosResponse): Promise<BatchOfISearchResult[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BatchOfISearchResult.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return Promise.resolve<BatchOfISearchResult[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BatchOfISearchResult[]>(null as any);
    }
}

/** Metadata associated with a YouTube channel. */
export class Channel implements IChannel {
    /** Channel ID. */
    id?: ChannelId;
    /** Channel URL. */
    url?: string;
    /** Channel title. */
    title?: string;
    /** Channel thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IChannel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? ChannelId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Channel {
        data = typeof data === 'object' ? data : {};
        let result = new Channel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube channel. */
export interface IChannel {
    /** Channel ID. */
    id?: ChannelId;
    /** Channel URL. */
    url?: string;
    /** Channel title. */
    title?: string;
    /** Channel thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Represents a syntactically valid YouTube channel ID. */
export class ChannelId implements IChannelId {
    /** Raw ID value. */
    value?: string;

    constructor(data?: IChannelId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ChannelId {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube channel ID. */
export interface IChannelId {
    /** Raw ID value. */
    value?: string;
}

/** Thumbnail image. */
export class Thumbnail implements IThumbnail {
    /** Thumbnail URL. */
    url?: string;
    /** Thumbnail resolution. */
    resolution?: Resolution;

    constructor(data?: IThumbnail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.resolution = _data["resolution"] ? Resolution.fromJS(_data["resolution"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Thumbnail {
        data = typeof data === 'object' ? data : {};
        let result = new Thumbnail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["resolution"] = this.resolution ? this.resolution.toJSON() : <any>undefined;
        return data;
    }
}

/** Thumbnail image. */
export interface IThumbnail {
    /** Thumbnail URL. */
    url?: string;
    /** Thumbnail resolution. */
    resolution?: Resolution;
}

/** Resolution of an image or a video. */
export class Resolution implements IResolution {
    /** Viewport width, measured in pixels. */
    width?: number;
    /** Viewport height, measured in pixels. */
    height?: number;
    /** Viewport area (i.e. width multiplied by height). */
    area?: number;

    constructor(data?: IResolution) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.width = _data["width"];
            this.height = _data["height"];
            this.area = _data["area"];
        }
    }

    static fromJS(data: any): Resolution {
        data = typeof data === 'object' ? data : {};
        let result = new Resolution();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        data["area"] = this.area;
        return data;
    }
}

/** Resolution of an image or a video. */
export interface IResolution {
    /** Viewport width, measured in pixels. */
    width?: number;
    /** Viewport height, measured in pixels. */
    height?: number;
    /** Viewport area (i.e. width multiplied by height). */
    area?: number;
}

/** Represents a syntactically valid YouTube user name. */
export class UserName implements IUserName {
    /** Raw user name value. */
    value?: string;

    constructor(data?: IUserName) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): UserName {
        data = typeof data === 'object' ? data : {};
        let result = new UserName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube user name. */
export interface IUserName {
    /** Raw user name value. */
    value?: string;
}

/** Represents a syntactically valid YouTube channel slug. */
export class ChannelSlug implements IChannelSlug {
    /** Raw slug value. */
    value?: string;

    constructor(data?: IChannelSlug) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ChannelSlug {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelSlug();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube channel slug. */
export interface IChannelSlug {
    /** Raw slug value. */
    value?: string;
}

/** Represents a syntactically valid YouTube channel handle. */
export class ChannelHandle implements IChannelHandle {
    /** Raw handle value. */
    value?: string;

    constructor(data?: IChannelHandle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): ChannelHandle {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube channel handle. */
export interface IChannelHandle {
    /** Raw handle value. */
    value?: string;
}

/** Metadata associated with a YouTube video included in a playlist. */
export class PlaylistVideo implements IPlaylistVideo {
    /** ID of the playlist that contains this video. */
    playlistId?: PlaylistId;
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IPlaylistVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playlistId = _data["playlistId"] ? PlaylistId.fromJS(_data["playlistId"]) : <any>undefined;
            this.id = _data["id"] ? VideoId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            this.duration = _data["duration"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlaylistVideo {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistVideo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playlistId"] = this.playlistId ? this.playlistId.toJSON() : <any>undefined;
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["duration"] = this.duration;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube video included in a playlist. */
export interface IPlaylistVideo {
    /** ID of the playlist that contains this video. */
    playlistId?: PlaylistId;
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Represents a syntactically valid YouTube playlist ID. */
export class PlaylistId implements IPlaylistId {
    /** Raw ID value. */
    value?: string;

    constructor(data?: IPlaylistId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): PlaylistId {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube playlist ID. */
export interface IPlaylistId {
    /** Raw ID value. */
    value?: string;
}

/** Represents a syntactically valid YouTube video ID. */
export class VideoId implements IVideoId {
    /** Raw ID value. */
    value?: string;

    constructor(data?: IVideoId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): VideoId {
        data = typeof data === 'object' ? data : {};
        let result = new VideoId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        return data;
    }
}

/** Represents a syntactically valid YouTube video ID. */
export interface IVideoId {
    /** Raw ID value. */
    value?: string;
}

/** Reference to a channel that owns a specific YouTube video or playlist. */
export class Author implements IAuthor {
    /** Channel ID. */
    channelId?: ChannelId;
    /** Channel URL. */
    channelUrl?: string;
    /** Channel title. */
    channelTitle?: string;
    /** Channel title. */
    title?: string;

    constructor(data?: IAuthor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.channelId = _data["channelId"] ? ChannelId.fromJS(_data["channelId"]) : <any>undefined;
            this.channelUrl = _data["channelUrl"];
            this.channelTitle = _data["channelTitle"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): Author {
        data = typeof data === 'object' ? data : {};
        let result = new Author();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["channelId"] = this.channelId ? this.channelId.toJSON() : <any>undefined;
        data["channelUrl"] = this.channelUrl;
        data["channelTitle"] = this.channelTitle;
        data["title"] = this.title;
        return data;
    }
}

/** Reference to a channel that owns a specific YouTube video or playlist. */
export interface IAuthor {
    /** Channel ID. */
    channelId?: ChannelId;
    /** Channel URL. */
    channelUrl?: string;
    /** Channel title. */
    channelTitle?: string;
    /** Channel title. */
    title?: string;
}

export class LoginRequest implements ILoginRequest {
    email?: string;
    password?: string;
    twoFactorCode?: string | undefined;
    twoFactorRecoveryCode?: string | undefined;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.password = _data["password"];
            this.twoFactorCode = _data["twoFactorCode"];
            this.twoFactorRecoveryCode = _data["twoFactorRecoveryCode"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["password"] = this.password;
        data["twoFactorCode"] = this.twoFactorCode;
        data["twoFactorRecoveryCode"] = this.twoFactorRecoveryCode;
        return data;
    }
}

export interface ILoginRequest {
    email?: string;
    password?: string;
    twoFactorCode?: string | undefined;
    twoFactorRecoveryCode?: string | undefined;
}

export class Entity implements IEntity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier for an entity. Read-only. */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.id = _data["id"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): Entity {
        data = typeof data === 'object' ? data : {};
        let result = new Entity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IEntity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier for an entity. Read-only. */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class BaseItem extends Entity implements IBaseItem {
    /** Identity of the user, device, or application that created the item. Read-only. */
    createdBy?: IdentitySet | undefined;
    /** Identity of the user who created the item. Read-only. */
    createdByUser?: User | undefined;
    /** Date and time of item creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Provides a user-visible description of the item. Optional. */
    description?: string | undefined;
    /** ETag for the item. Read-only. */
    eTag?: string | undefined;
    /** Identity of the user, device, and application that last modified the item. Read-only. */
    lastModifiedBy?: IdentitySet | undefined;
    /** Identity of the user who last modified the item. Read-only. */
    lastModifiedByUser?: User | undefined;
    /** Date and time the item was last modified. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** The name of the item. Read-write. */
    name?: string | undefined;
    /** Parent information, if the item has a parent. Read-write. */
    parentReference?: ItemReference | undefined;
    /** URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only. */
    webUrl?: string | undefined;

    constructor(data?: IBaseItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdBy = _data["createdBy"] ? IdentitySet.fromJS(_data["createdBy"]) : <any>undefined;
            this.createdByUser = _data["createdByUser"] ? User.fromJS(_data["createdByUser"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.eTag = _data["eTag"];
            this.lastModifiedBy = _data["lastModifiedBy"] ? IdentitySet.fromJS(_data["lastModifiedBy"]) : <any>undefined;
            this.lastModifiedByUser = _data["lastModifiedByUser"] ? User.fromJS(_data["lastModifiedByUser"]) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.parentReference = _data["parentReference"] ? ItemReference.fromJS(_data["parentReference"]) : <any>undefined;
            this.webUrl = _data["webUrl"];
        }
    }

    static override fromJS(data: any): BaseItem {
        data = typeof data === 'object' ? data : {};
        let result = new BaseItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["createdByUser"] = this.createdByUser ? this.createdByUser.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["eTag"] = this.eTag;
        data["lastModifiedBy"] = this.lastModifiedBy ? this.lastModifiedBy.toJSON() : <any>undefined;
        data["lastModifiedByUser"] = this.lastModifiedByUser ? this.lastModifiedByUser.toJSON() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["parentReference"] = this.parentReference ? this.parentReference.toJSON() : <any>undefined;
        data["webUrl"] = this.webUrl;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseItem extends IEntity {
    /** Identity of the user, device, or application that created the item. Read-only. */
    createdBy?: IdentitySet | undefined;
    /** Identity of the user who created the item. Read-only. */
    createdByUser?: User | undefined;
    /** Date and time of item creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Provides a user-visible description of the item. Optional. */
    description?: string | undefined;
    /** ETag for the item. Read-only. */
    eTag?: string | undefined;
    /** Identity of the user, device, and application that last modified the item. Read-only. */
    lastModifiedBy?: IdentitySet | undefined;
    /** Identity of the user who last modified the item. Read-only. */
    lastModifiedByUser?: User | undefined;
    /** Date and time the item was last modified. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** The name of the item. Read-write. */
    name?: string | undefined;
    /** Parent information, if the item has a parent. Read-write. */
    parentReference?: ItemReference | undefined;
    /** URL that either displays the resource in the browser (for Office file formats), or is a direct link to the file (for other formats). Read-only. */
    webUrl?: string | undefined;
}

export class DriveItem extends BaseItem implements IDriveItem {
    /** Analytics about the view activities that took place on this item. */
    analytics?: ItemAnalytics | undefined;
    /** Audio metadata, if the item is an audio file. Read-only. Read-only. Only on OneDrive Personal. */
    audio?: Audio | undefined;
    /** Bundle metadata, if the item is a bundle. Read-only. */
    bundle?: Bundle | undefined;
    /** Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable. */
    children?: DriveItem[] | undefined;
    /** The content stream, if the item represents a file. */
    content?: string | undefined;
    /** An eTag for the content of the item. This eTag isn't changed if only the metadata is changed. Note This property isn't returned if the item is a folder. Read-only. */
    cTag?: string | undefined;
    /** Information about the deleted state of the item. Read-only. */
    deleted?: Deleted | undefined;
    /** File metadata, if the item is a file. Read-only. */
    file?: FileObject | undefined;
    /** File system information on client. Read-write. */
    fileSystemInfo?: FileSystemInfo | undefined;
    /** Folder metadata, if the item is a folder. Read-only. */
    folder?: Folder | undefined;
    /** Image metadata, if the item is an image. Read-only. */
    image?: Image | undefined;
    /** For drives in SharePoint, the associated document library list item. Read-only. Nullable. */
    listItem?: ListItem | undefined;
    /** Location metadata, if the item has location data. Read-only. */
    location?: GeoCoordinates | undefined;
    /** Malware metadata, if the item was detected to contain malware. Read-only. */
    malware?: Malware | undefined;
    /** If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only. */
    package?: Package | undefined;
    /** If present, indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only. */
    pendingOperations?: PendingOperations | undefined;
    /** The set of permissions for the item. Read-only. Nullable. */
    permissions?: Permission[] | undefined;
    /** Photo metadata, if the item is a photo. Read-only. */
    photo?: Photo | undefined;
    /** Provides information about the published or checked-out state of an item, in locations that support such actions. This property isn't returned by default. Read-only. */
    publication?: PublicationFacet | undefined;
    /** Remote item data, if the item is shared from a drive other than the one being accessed. Read-only. */
    remoteItem?: RemoteItem | undefined;
    /** Information about retention label and settings enforced on the driveItem. Read-write. */
    retentionLabel?: ItemRetentionLabel | undefined;
    /** If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive. */
    root?: Root | undefined;
    /** Search metadata, if the item is from a search result. Read-only. */
    searchResult?: SearchResult | undefined;
    /** Indicates that the item was shared with others and provides information about the shared state of the item. Read-only. */
    shared?: Shared | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** Size of the item in bytes. Read-only. */
    size?: number | undefined;
    /** If the current item is also available as a special folder, this facet is returned. Read-only. */
    specialFolder?: SpecialFolder | undefined;
    /** The set of subscriptions on the item. Only supported on the root of a drive. */
    subscriptions?: Subscription[] | undefined;
    /** Collection of thumbnailSet objects associated with the item. For more information, see getting thumbnails. Read-only. Nullable. */
    thumbnails?: ThumbnailSet[] | undefined;
    /** The list of previous versions of the item. For more info, see getting previous versions. Read-only. Nullable. */
    versions?: DriveItemVersion[] | undefined;
    /** Video metadata, if the item is a video. Read-only. */
    video?: Video | undefined;
    /** WebDAV compatible URL for the item. */
    webDavUrl?: string | undefined;
    /** For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet's contents. Nullable. */
    workbook?: Workbook | undefined;

    constructor(data?: IDriveItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.analytics = _data["analytics"] ? ItemAnalytics.fromJS(_data["analytics"]) : <any>undefined;
            this.audio = _data["audio"] ? Audio.fromJS(_data["audio"]) : <any>undefined;
            this.bundle = _data["bundle"] ? Bundle.fromJS(_data["bundle"]) : <any>undefined;
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(DriveItem.fromJS(item));
            }
            this.content = _data["content"];
            this.cTag = _data["cTag"];
            this.deleted = _data["deleted"] ? Deleted.fromJS(_data["deleted"]) : <any>undefined;
            this.file = _data["file"] ? FileObject.fromJS(_data["file"]) : <any>undefined;
            this.fileSystemInfo = _data["fileSystemInfo"] ? FileSystemInfo.fromJS(_data["fileSystemInfo"]) : <any>undefined;
            this.folder = _data["folder"] ? Folder.fromJS(_data["folder"]) : <any>undefined;
            this.image = _data["image"] ? Image.fromJS(_data["image"]) : <any>undefined;
            this.listItem = _data["listItem"] ? ListItem.fromJS(_data["listItem"]) : <any>undefined;
            this.location = _data["location"] ? GeoCoordinates.fromJS(_data["location"]) : <any>undefined;
            this.malware = _data["malware"] ? Malware.fromJS(_data["malware"]) : <any>undefined;
            this.package = _data["package"] ? Package.fromJS(_data["package"]) : <any>undefined;
            this.pendingOperations = _data["pendingOperations"] ? PendingOperations.fromJS(_data["pendingOperations"]) : <any>undefined;
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(Permission.fromJS(item));
            }
            this.photo = _data["photo"] ? Photo.fromJS(_data["photo"]) : <any>undefined;
            this.publication = _data["publication"] ? PublicationFacet.fromJS(_data["publication"]) : <any>undefined;
            this.remoteItem = _data["remoteItem"] ? RemoteItem.fromJS(_data["remoteItem"]) : <any>undefined;
            this.retentionLabel = _data["retentionLabel"] ? ItemRetentionLabel.fromJS(_data["retentionLabel"]) : <any>undefined;
            this.root = _data["root"] ? Root.fromJS(_data["root"]) : <any>undefined;
            this.searchResult = _data["searchResult"] ? SearchResult.fromJS(_data["searchResult"]) : <any>undefined;
            this.shared = _data["shared"] ? Shared.fromJS(_data["shared"]) : <any>undefined;
            this.sharepointIds = _data["sharepointIds"] ? SharepointIds.fromJS(_data["sharepointIds"]) : <any>undefined;
            this.size = _data["size"];
            this.specialFolder = _data["specialFolder"] ? SpecialFolder.fromJS(_data["specialFolder"]) : <any>undefined;
            if (Array.isArray(_data["subscriptions"])) {
                this.subscriptions = [] as any;
                for (let item of _data["subscriptions"])
                    this.subscriptions!.push(Subscription.fromJS(item));
            }
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(ThumbnailSet.fromJS(item));
            }
            if (Array.isArray(_data["versions"])) {
                this.versions = [] as any;
                for (let item of _data["versions"])
                    this.versions!.push(DriveItemVersion.fromJS(item));
            }
            this.video = _data["video"] ? Video.fromJS(_data["video"]) : <any>undefined;
            this.webDavUrl = _data["webDavUrl"];
            this.workbook = _data["workbook"] ? Workbook.fromJS(_data["workbook"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): DriveItem {
        data = typeof data === 'object' ? data : {};
        let result = new DriveItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["analytics"] = this.analytics ? this.analytics.toJSON() : <any>undefined;
        data["audio"] = this.audio ? this.audio.toJSON() : <any>undefined;
        data["bundle"] = this.bundle ? this.bundle.toJSON() : <any>undefined;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["content"] = this.content;
        data["cTag"] = this.cTag;
        data["deleted"] = this.deleted ? this.deleted.toJSON() : <any>undefined;
        data["file"] = this.file ? this.file.toJSON() : <any>undefined;
        data["fileSystemInfo"] = this.fileSystemInfo ? this.fileSystemInfo.toJSON() : <any>undefined;
        data["folder"] = this.folder ? this.folder.toJSON() : <any>undefined;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["listItem"] = this.listItem ? this.listItem.toJSON() : <any>undefined;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["malware"] = this.malware ? this.malware.toJSON() : <any>undefined;
        data["package"] = this.package ? this.package.toJSON() : <any>undefined;
        data["pendingOperations"] = this.pendingOperations ? this.pendingOperations.toJSON() : <any>undefined;
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        data["photo"] = this.photo ? this.photo.toJSON() : <any>undefined;
        data["publication"] = this.publication ? this.publication.toJSON() : <any>undefined;
        data["remoteItem"] = this.remoteItem ? this.remoteItem.toJSON() : <any>undefined;
        data["retentionLabel"] = this.retentionLabel ? this.retentionLabel.toJSON() : <any>undefined;
        data["root"] = this.root ? this.root.toJSON() : <any>undefined;
        data["searchResult"] = this.searchResult ? this.searchResult.toJSON() : <any>undefined;
        data["shared"] = this.shared ? this.shared.toJSON() : <any>undefined;
        data["sharepointIds"] = this.sharepointIds ? this.sharepointIds.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["specialFolder"] = this.specialFolder ? this.specialFolder.toJSON() : <any>undefined;
        if (Array.isArray(this.subscriptions)) {
            data["subscriptions"] = [];
            for (let item of this.subscriptions)
                data["subscriptions"].push(item.toJSON());
        }
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        if (Array.isArray(this.versions)) {
            data["versions"] = [];
            for (let item of this.versions)
                data["versions"].push(item.toJSON());
        }
        data["video"] = this.video ? this.video.toJSON() : <any>undefined;
        data["webDavUrl"] = this.webDavUrl;
        data["workbook"] = this.workbook ? this.workbook.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IDriveItem extends IBaseItem {
    /** Analytics about the view activities that took place on this item. */
    analytics?: ItemAnalytics | undefined;
    /** Audio metadata, if the item is an audio file. Read-only. Read-only. Only on OneDrive Personal. */
    audio?: Audio | undefined;
    /** Bundle metadata, if the item is a bundle. Read-only. */
    bundle?: Bundle | undefined;
    /** Collection containing Item objects for the immediate children of Item. Only items representing folders have children. Read-only. Nullable. */
    children?: DriveItem[] | undefined;
    /** The content stream, if the item represents a file. */
    content?: string | undefined;
    /** An eTag for the content of the item. This eTag isn't changed if only the metadata is changed. Note This property isn't returned if the item is a folder. Read-only. */
    cTag?: string | undefined;
    /** Information about the deleted state of the item. Read-only. */
    deleted?: Deleted | undefined;
    /** File metadata, if the item is a file. Read-only. */
    file?: FileObject | undefined;
    /** File system information on client. Read-write. */
    fileSystemInfo?: FileSystemInfo | undefined;
    /** Folder metadata, if the item is a folder. Read-only. */
    folder?: Folder | undefined;
    /** Image metadata, if the item is an image. Read-only. */
    image?: Image | undefined;
    /** For drives in SharePoint, the associated document library list item. Read-only. Nullable. */
    listItem?: ListItem | undefined;
    /** Location metadata, if the item has location data. Read-only. */
    location?: GeoCoordinates | undefined;
    /** Malware metadata, if the item was detected to contain malware. Read-only. */
    malware?: Malware | undefined;
    /** If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only. */
    package?: Package | undefined;
    /** If present, indicates that one or more operations that might affect the state of the driveItem are pending completion. Read-only. */
    pendingOperations?: PendingOperations | undefined;
    /** The set of permissions for the item. Read-only. Nullable. */
    permissions?: Permission[] | undefined;
    /** Photo metadata, if the item is a photo. Read-only. */
    photo?: Photo | undefined;
    /** Provides information about the published or checked-out state of an item, in locations that support such actions. This property isn't returned by default. Read-only. */
    publication?: PublicationFacet | undefined;
    /** Remote item data, if the item is shared from a drive other than the one being accessed. Read-only. */
    remoteItem?: RemoteItem | undefined;
    /** Information about retention label and settings enforced on the driveItem. Read-write. */
    retentionLabel?: ItemRetentionLabel | undefined;
    /** If this property is non-null, it indicates that the driveItem is the top-most driveItem in the drive. */
    root?: Root | undefined;
    /** Search metadata, if the item is from a search result. Read-only. */
    searchResult?: SearchResult | undefined;
    /** Indicates that the item was shared with others and provides information about the shared state of the item. Read-only. */
    shared?: Shared | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** Size of the item in bytes. Read-only. */
    size?: number | undefined;
    /** If the current item is also available as a special folder, this facet is returned. Read-only. */
    specialFolder?: SpecialFolder | undefined;
    /** The set of subscriptions on the item. Only supported on the root of a drive. */
    subscriptions?: Subscription[] | undefined;
    /** Collection of thumbnailSet objects associated with the item. For more information, see getting thumbnails. Read-only. Nullable. */
    thumbnails?: ThumbnailSet[] | undefined;
    /** The list of previous versions of the item. For more info, see getting previous versions. Read-only. Nullable. */
    versions?: DriveItemVersion[] | undefined;
    /** Video metadata, if the item is a video. Read-only. */
    video?: Video | undefined;
    /** WebDAV compatible URL for the item. */
    webDavUrl?: string | undefined;
    /** For files that are Excel spreadsheets, access to the workbook API to work with the spreadsheet's contents. Nullable. */
    workbook?: Workbook | undefined;
}

export class ItemAnalytics extends Entity implements IItemAnalytics {
    /** The allTime property */
    allTime?: ItemActivityStat | undefined;
    /** The itemActivityStats property */
    itemActivityStats?: ItemActivityStat[] | undefined;
    /** The lastSevenDays property */
    lastSevenDays?: ItemActivityStat | undefined;

    constructor(data?: IItemAnalytics) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.allTime = _data["allTime"] ? ItemActivityStat.fromJS(_data["allTime"]) : <any>undefined;
            if (Array.isArray(_data["itemActivityStats"])) {
                this.itemActivityStats = [] as any;
                for (let item of _data["itemActivityStats"])
                    this.itemActivityStats!.push(ItemActivityStat.fromJS(item));
            }
            this.lastSevenDays = _data["lastSevenDays"] ? ItemActivityStat.fromJS(_data["lastSevenDays"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ItemAnalytics {
        data = typeof data === 'object' ? data : {};
        let result = new ItemAnalytics();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allTime"] = this.allTime ? this.allTime.toJSON() : <any>undefined;
        if (Array.isArray(this.itemActivityStats)) {
            data["itemActivityStats"] = [];
            for (let item of this.itemActivityStats)
                data["itemActivityStats"].push(item.toJSON());
        }
        data["lastSevenDays"] = this.lastSevenDays ? this.lastSevenDays.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IItemAnalytics extends IEntity {
    /** The allTime property */
    allTime?: ItemActivityStat | undefined;
    /** The itemActivityStats property */
    itemActivityStats?: ItemActivityStat[] | undefined;
    /** The lastSevenDays property */
    lastSevenDays?: ItemActivityStat | undefined;
}

export class ItemActivityStat extends Entity implements IItemActivityStat {
    /** Statistics about the access actions in this interval. Read-only. */
    access?: ItemActionStat | undefined;
    /** Exposes the itemActivities represented in this itemActivityStat resource. */
    activities?: ItemActivity[] | undefined;
    /** Statistics about the create actions in this interval. Read-only. */
    create?: ItemActionStat | undefined;
    /** Statistics about the delete actions in this interval. Read-only. */
    delete?: ItemActionStat | undefined;
    /** Statistics about the edit actions in this interval. Read-only. */
    edit?: ItemActionStat | undefined;
    /** When the interval ends. Read-only. */
    endDateTime?: Date | undefined;
    /** Indicates that the statistics in this interval are based on incomplete data. Read-only. */
    incompleteData?: IncompleteData | undefined;
    /** Indicates whether the item is 'trending.' Read-only. */
    isTrending?: boolean | undefined;
    /** Statistics about the move actions in this interval. Read-only. */
    move?: ItemActionStat | undefined;
    /** When the interval starts. Read-only. */
    startDateTime?: Date | undefined;

    constructor(data?: IItemActivityStat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.access = _data["access"] ? ItemActionStat.fromJS(_data["access"]) : <any>undefined;
            if (Array.isArray(_data["activities"])) {
                this.activities = [] as any;
                for (let item of _data["activities"])
                    this.activities!.push(ItemActivity.fromJS(item));
            }
            this.create = _data["create"] ? ItemActionStat.fromJS(_data["create"]) : <any>undefined;
            this.delete = _data["delete"] ? ItemActionStat.fromJS(_data["delete"]) : <any>undefined;
            this.edit = _data["edit"] ? ItemActionStat.fromJS(_data["edit"]) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
            this.incompleteData = _data["incompleteData"] ? IncompleteData.fromJS(_data["incompleteData"]) : <any>undefined;
            this.isTrending = _data["isTrending"];
            this.move = _data["move"] ? ItemActionStat.fromJS(_data["move"]) : <any>undefined;
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): ItemActivityStat {
        data = typeof data === 'object' ? data : {};
        let result = new ItemActivityStat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["access"] = this.access ? this.access.toJSON() : <any>undefined;
        if (Array.isArray(this.activities)) {
            data["activities"] = [];
            for (let item of this.activities)
                data["activities"].push(item.toJSON());
        }
        data["create"] = this.create ? this.create.toJSON() : <any>undefined;
        data["delete"] = this.delete ? this.delete.toJSON() : <any>undefined;
        data["edit"] = this.edit ? this.edit.toJSON() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        data["incompleteData"] = this.incompleteData ? this.incompleteData.toJSON() : <any>undefined;
        data["isTrending"] = this.isTrending;
        data["move"] = this.move ? this.move.toJSON() : <any>undefined;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IItemActivityStat extends IEntity {
    /** Statistics about the access actions in this interval. Read-only. */
    access?: ItemActionStat | undefined;
    /** Exposes the itemActivities represented in this itemActivityStat resource. */
    activities?: ItemActivity[] | undefined;
    /** Statistics about the create actions in this interval. Read-only. */
    create?: ItemActionStat | undefined;
    /** Statistics about the delete actions in this interval. Read-only. */
    delete?: ItemActionStat | undefined;
    /** Statistics about the edit actions in this interval. Read-only. */
    edit?: ItemActionStat | undefined;
    /** When the interval ends. Read-only. */
    endDateTime?: Date | undefined;
    /** Indicates that the statistics in this interval are based on incomplete data. Read-only. */
    incompleteData?: IncompleteData | undefined;
    /** Indicates whether the item is 'trending.' Read-only. */
    isTrending?: boolean | undefined;
    /** Statistics about the move actions in this interval. Read-only. */
    move?: ItemActionStat | undefined;
    /** When the interval starts. Read-only. */
    startDateTime?: Date | undefined;
}

export class ItemActionStat implements IItemActionStat {
    /** The number of times the action took place. Read-only. */
    actionCount?: number | undefined;
    /** The number of distinct actors that performed the action. Read-only. */
    actorCount?: number | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IItemActionStat) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionCount = _data["actionCount"];
            this.actorCount = _data["actorCount"];
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ItemActionStat {
        data = typeof data === 'object' ? data : {};
        let result = new ItemActionStat();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionCount"] = this.actionCount;
        data["actorCount"] = this.actorCount;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IItemActionStat {
    /** The number of times the action took place. Read-only. */
    actionCount?: number | undefined;
    /** The number of distinct actors that performed the action. Read-only. */
    actorCount?: number | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

/** Stores model information in a different location than the object properties. Implementations can provide dirty tracking capabilities, caching capabilities or integration with 3rd party stores. */
export abstract class IBackingStore implements IIBackingStore {
    initializationCompleted?: boolean;
    returnOnlyChangedValues?: boolean;

    constructor(data?: IIBackingStore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.initializationCompleted = _data["initializationCompleted"];
            this.returnOnlyChangedValues = _data["returnOnlyChangedValues"];
        }
    }

    static fromJS(data: any): IBackingStore {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'IBackingStore' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["initializationCompleted"] = this.initializationCompleted;
        data["returnOnlyChangedValues"] = this.returnOnlyChangedValues;
        return data;
    }
}

/** Stores model information in a different location than the object properties. Implementations can provide dirty tracking capabilities, caching capabilities or integration with 3rd party stores. */
export interface IIBackingStore {
    initializationCompleted?: boolean;
    returnOnlyChangedValues?: boolean;
}

export class ItemActivity extends Entity implements IItemActivity {
    /** An item was accessed. */
    access?: AccessAction | undefined;
    /** Details about when the activity took place. Read-only. */
    activityDateTime?: Date | undefined;
    /** Identity of who performed the action. Read-only. */
    actor?: IdentitySet | undefined;
    /** Exposes the driveItem that was the target of this activity. */
    driveItem?: DriveItem | undefined;

    constructor(data?: IItemActivity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.access = _data["access"] ? AccessAction.fromJS(_data["access"]) : <any>undefined;
            this.activityDateTime = _data["activityDateTime"] ? new Date(_data["activityDateTime"].toString()) : <any>undefined;
            this.actor = _data["actor"] ? IdentitySet.fromJS(_data["actor"]) : <any>undefined;
            this.driveItem = _data["driveItem"] ? DriveItem.fromJS(_data["driveItem"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ItemActivity {
        data = typeof data === 'object' ? data : {};
        let result = new ItemActivity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["access"] = this.access ? this.access.toJSON() : <any>undefined;
        data["activityDateTime"] = this.activityDateTime ? this.activityDateTime.toISOString() : <any>undefined;
        data["actor"] = this.actor ? this.actor.toJSON() : <any>undefined;
        data["driveItem"] = this.driveItem ? this.driveItem.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IItemActivity extends IEntity {
    /** An item was accessed. */
    access?: AccessAction | undefined;
    /** Details about when the activity took place. Read-only. */
    activityDateTime?: Date | undefined;
    /** Identity of who performed the action. Read-only. */
    actor?: IdentitySet | undefined;
    /** Exposes the driveItem that was the target of this activity. */
    driveItem?: DriveItem | undefined;
}

export class AccessAction implements IAccessAction {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IAccessAction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): AccessAction {
        data = typeof data === 'object' ? data : {};
        let result = new AccessAction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IAccessAction {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class IdentitySet implements IIdentitySet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Optional. The application associated with this action. */
    application?: Identity | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional. The device associated with this action. */
    device?: Identity | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Optional. The user associated with this action. */
    user?: Identity | undefined;

    constructor(data?: IIdentitySet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.application = _data["application"] ? Identity.fromJS(_data["application"]) : <any>undefined;
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.device = _data["device"] ? Identity.fromJS(_data["device"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.user = _data["user"] ? Identity.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IdentitySet {
        data = typeof data === 'object' ? data : {};
        let result = new IdentitySet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["device"] = this.device ? this.device.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIdentitySet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Optional. The application associated with this action. */
    application?: Identity | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional. The device associated with this action. */
    device?: Identity | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Optional. The user associated with this action. */
    user?: Identity | undefined;
}

export class Identity implements IIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta. */
    displayName?: string | undefined;
    /** Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review. */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.id = _data["id"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): Identity {
        data = typeof data === 'object' ? data : {};
        let result = new Identity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["id"] = this.id;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the identity.For drive items, the display name might not always be available or up to date. For example, if a user changes their display name the API might show the new value in a future response, but the items associated with the user don't show up as changed when using delta. */
    displayName?: string | undefined;
    /** Unique identifier for the identity or actor. For example, in the access reviews decisions API, this property might record the id of the principal, that is, the group, user, or application that's subject to review. */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class IncompleteData implements IIncompleteData {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The service does not have source data before the specified time. */
    missingDataBeforeDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Some data was not recorded due to excessive activity. */
    wasThrottled?: boolean | undefined;

    constructor(data?: IIncompleteData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.missingDataBeforeDateTime = _data["missingDataBeforeDateTime"] ? new Date(_data["missingDataBeforeDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
            this.wasThrottled = _data["wasThrottled"];
        }
    }

    static fromJS(data: any): IncompleteData {
        data = typeof data === 'object' ? data : {};
        let result = new IncompleteData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["missingDataBeforeDateTime"] = this.missingDataBeforeDateTime ? this.missingDataBeforeDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        data["wasThrottled"] = this.wasThrottled;
        return data;
    }
}

export interface IIncompleteData {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The service does not have source data before the specified time. */
    missingDataBeforeDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Some data was not recorded due to excessive activity. */
    wasThrottled?: boolean | undefined;
}

export class Audio implements IAudio {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The title of the album for this audio file. */
    album?: string | undefined;
    /** The artist named on the album for the audio file. */
    albumArtist?: string | undefined;
    /** The performing artist for the audio file. */
    artist?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Bitrate expressed in kbps. */
    bitrate?: number | undefined;
    /** The name of the composer of the audio file. */
    composers?: string | undefined;
    /** Copyright information for the audio file. */
    copyright?: string | undefined;
    /** The number of the disc this audio file came from. */
    disc?: number | undefined;
    /** The total number of discs in this album. */
    discCount?: number | undefined;
    /** Duration of the audio file, expressed in milliseconds */
    duration?: number | undefined;
    /** The genre of this audio file. */
    genre?: string | undefined;
    /** Indicates if the file is protected with digital rights management. */
    hasDrm?: boolean | undefined;
    /** Indicates if the file is encoded with a variable bitrate. */
    isVariableBitrate?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The title of the audio file. */
    title?: string | undefined;
    /** The number of the track on the original disc for this audio file. */
    track?: number | undefined;
    /** The total number of tracks on the original disc for this audio file. */
    trackCount?: number | undefined;
    /** The year the audio file was recorded. */
    year?: number | undefined;

    constructor(data?: IAudio) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.album = _data["album"];
            this.albumArtist = _data["albumArtist"];
            this.artist = _data["artist"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.bitrate = _data["bitrate"];
            this.composers = _data["composers"];
            this.copyright = _data["copyright"];
            this.disc = _data["disc"];
            this.discCount = _data["discCount"];
            this.duration = _data["duration"];
            this.genre = _data["genre"];
            this.hasDrm = _data["hasDrm"];
            this.isVariableBitrate = _data["isVariableBitrate"];
            this.odataType = _data["odataType"];
            this.title = _data["title"];
            this.track = _data["track"];
            this.trackCount = _data["trackCount"];
            this.year = _data["year"];
        }
    }

    static fromJS(data: any): Audio {
        data = typeof data === 'object' ? data : {};
        let result = new Audio();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["album"] = this.album;
        data["albumArtist"] = this.albumArtist;
        data["artist"] = this.artist;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["bitrate"] = this.bitrate;
        data["composers"] = this.composers;
        data["copyright"] = this.copyright;
        data["disc"] = this.disc;
        data["discCount"] = this.discCount;
        data["duration"] = this.duration;
        data["genre"] = this.genre;
        data["hasDrm"] = this.hasDrm;
        data["isVariableBitrate"] = this.isVariableBitrate;
        data["odataType"] = this.odataType;
        data["title"] = this.title;
        data["track"] = this.track;
        data["trackCount"] = this.trackCount;
        data["year"] = this.year;
        return data;
    }
}

export interface IAudio {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The title of the album for this audio file. */
    album?: string | undefined;
    /** The artist named on the album for the audio file. */
    albumArtist?: string | undefined;
    /** The performing artist for the audio file. */
    artist?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Bitrate expressed in kbps. */
    bitrate?: number | undefined;
    /** The name of the composer of the audio file. */
    composers?: string | undefined;
    /** Copyright information for the audio file. */
    copyright?: string | undefined;
    /** The number of the disc this audio file came from. */
    disc?: number | undefined;
    /** The total number of discs in this album. */
    discCount?: number | undefined;
    /** Duration of the audio file, expressed in milliseconds */
    duration?: number | undefined;
    /** The genre of this audio file. */
    genre?: string | undefined;
    /** Indicates if the file is protected with digital rights management. */
    hasDrm?: boolean | undefined;
    /** Indicates if the file is encoded with a variable bitrate. */
    isVariableBitrate?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The title of the audio file. */
    title?: string | undefined;
    /** The number of the track on the original disc for this audio file. */
    track?: number | undefined;
    /** The total number of tracks on the original disc for this audio file. */
    trackCount?: number | undefined;
    /** The year the audio file was recorded. */
    year?: number | undefined;
}

export class Bundle implements IBundle {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If the bundle is an album, then the album property is included */
    album?: Album | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Number of children contained immediately within this container. */
    childCount?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IBundle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.album = _data["album"] ? Album.fromJS(_data["album"]) : <any>undefined;
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.childCount = _data["childCount"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): Bundle {
        data = typeof data === 'object' ? data : {};
        let result = new Bundle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["album"] = this.album ? this.album.toJSON() : <any>undefined;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["childCount"] = this.childCount;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IBundle {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If the bundle is an album, then the album property is included */
    album?: Album | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Number of children contained immediately within this container. */
    childCount?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Album implements IAlbum {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Unique identifier of the driveItem that is the cover of the album. */
    coverImageItemId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IAlbum) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.coverImageItemId = _data["coverImageItemId"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): Album {
        data = typeof data === 'object' ? data : {};
        let result = new Album();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["coverImageItemId"] = this.coverImageItemId;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IAlbum {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Unique identifier of the driveItem that is the cover of the album. */
    coverImageItemId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Deleted implements IDeleted {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Represents the state of the deleted item. */
    state?: string | undefined;

    constructor(data?: IDeleted) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): Deleted {
        data = typeof data === 'object' ? data : {};
        let result = new Deleted();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["state"] = this.state;
        return data;
    }
}

export interface IDeleted {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Represents the state of the deleted item. */
    state?: string | undefined;
}

export class FileObject implements IFileObject {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Hashes of the file's binary content, if available. Read-only. */
    hashes?: Hashes | undefined;
    /** The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only. */
    mimeType?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The processingMetadata property */
    processingMetadata?: boolean | undefined;

    constructor(data?: IFileObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.hashes = _data["hashes"] ? Hashes.fromJS(_data["hashes"]) : <any>undefined;
            this.mimeType = _data["mimeType"];
            this.odataType = _data["odataType"];
            this.processingMetadata = _data["processingMetadata"];
        }
    }

    static fromJS(data: any): FileObject {
        data = typeof data === 'object' ? data : {};
        let result = new FileObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["hashes"] = this.hashes ? this.hashes.toJSON() : <any>undefined;
        data["mimeType"] = this.mimeType;
        data["odataType"] = this.odataType;
        data["processingMetadata"] = this.processingMetadata;
        return data;
    }
}

export interface IFileObject {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Hashes of the file's binary content, if available. Read-only. */
    hashes?: Hashes | undefined;
    /** The MIME type for the file. This is determined by logic on the server and might not be the value provided when the file was uploaded. Read-only. */
    mimeType?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The processingMetadata property */
    processingMetadata?: boolean | undefined;
}

export class Hashes implements IHashes {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The CRC32 value of the file in little endian (if available). Read-only. */
    crc32Hash?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only. */
    quickXorHash?: string | undefined;
    /** SHA1 hash for the contents of the file (if available). Read-only. */
    sha1Hash?: string | undefined;
    /** SHA256 hash for the contents of the file (if available). Read-only. */
    sha256Hash?: string | undefined;

    constructor(data?: IHashes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.crc32Hash = _data["crc32Hash"];
            this.odataType = _data["odataType"];
            this.quickXorHash = _data["quickXorHash"];
            this.sha1Hash = _data["sha1Hash"];
            this.sha256Hash = _data["sha256Hash"];
        }
    }

    static fromJS(data: any): Hashes {
        data = typeof data === 'object' ? data : {};
        let result = new Hashes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["crc32Hash"] = this.crc32Hash;
        data["odataType"] = this.odataType;
        data["quickXorHash"] = this.quickXorHash;
        data["sha1Hash"] = this.sha1Hash;
        data["sha256Hash"] = this.sha256Hash;
        return data;
    }
}

export interface IHashes {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The CRC32 value of the file in little endian (if available). Read-only. */
    crc32Hash?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only. */
    quickXorHash?: string | undefined;
    /** SHA1 hash for the contents of the file (if available). Read-only. */
    sha1Hash?: string | undefined;
    /** SHA256 hash for the contents of the file (if available). Read-only. */
    sha256Hash?: string | undefined;
}

export class FileSystemInfo implements IFileSystemInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The UTC date and time the file was created on a client. */
    createdDateTime?: Date | undefined;
    /** The UTC date and time the file was last accessed. Available for the recent file list only. */
    lastAccessedDateTime?: Date | undefined;
    /** The UTC date and time the file was last modified on a client. */
    lastModifiedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IFileSystemInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.lastAccessedDateTime = _data["lastAccessedDateTime"] ? new Date(_data["lastAccessedDateTime"].toString()) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): FileSystemInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FileSystemInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["lastAccessedDateTime"] = this.lastAccessedDateTime ? this.lastAccessedDateTime.toISOString() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IFileSystemInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The UTC date and time the file was created on a client. */
    createdDateTime?: Date | undefined;
    /** The UTC date and time the file was last accessed. Available for the recent file list only. */
    lastAccessedDateTime?: Date | undefined;
    /** The UTC date and time the file was last modified on a client. */
    lastModifiedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Folder implements IFolder {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Number of children contained immediately within this container. */
    childCount?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A collection of properties defining the recommended view for the folder. */
    view?: FolderView | undefined;

    constructor(data?: IFolder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.childCount = _data["childCount"];
            this.odataType = _data["odataType"];
            this.view = _data["view"] ? FolderView.fromJS(_data["view"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Folder {
        data = typeof data === 'object' ? data : {};
        let result = new Folder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["childCount"] = this.childCount;
        data["odataType"] = this.odataType;
        data["view"] = this.view ? this.view.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFolder {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Number of children contained immediately within this container. */
    childCount?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A collection of properties defining the recommended view for the folder. */
    view?: FolderView | undefined;
}

export class FolderView implements IFolderView {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The method by which the folder should be sorted. */
    sortBy?: string | undefined;
    /** If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending. */
    sortOrder?: string | undefined;
    /** The type of view that should be used to represent the folder. */
    viewType?: string | undefined;

    constructor(data?: IFolderView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.sortBy = _data["sortBy"];
            this.sortOrder = _data["sortOrder"];
            this.viewType = _data["viewType"];
        }
    }

    static fromJS(data: any): FolderView {
        data = typeof data === 'object' ? data : {};
        let result = new FolderView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["sortBy"] = this.sortBy;
        data["sortOrder"] = this.sortOrder;
        data["viewType"] = this.viewType;
        return data;
    }
}

export interface IFolderView {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The method by which the folder should be sorted. */
    sortBy?: string | undefined;
    /** If true, indicates that items should be sorted in descending order. Otherwise, items should be sorted ascending. */
    sortOrder?: string | undefined;
    /** The type of view that should be used to represent the folder. */
    viewType?: string | undefined;
}

export class Image implements IImage {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional. Height of the image, in pixels. Read-only. */
    height?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Optional. Width of the image, in pixels. Read-only. */
    width?: number | undefined;

    constructor(data?: IImage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.height = _data["height"];
            this.odataType = _data["odataType"];
            this.width = _data["width"];
        }
    }

    static fromJS(data: any): Image {
        data = typeof data === 'object' ? data : {};
        let result = new Image();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["height"] = this.height;
        data["odataType"] = this.odataType;
        data["width"] = this.width;
        return data;
    }
}

export interface IImage {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional. Height of the image, in pixels. Read-only. */
    height?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Optional. Width of the image, in pixels. Read-only. */
    width?: number | undefined;
}

export class ListItem extends BaseItem implements IListItem {
    /** Analytics about the view activities that took place on this item. */
    analytics?: ItemAnalytics | undefined;
    /** The content type of this list item */
    contentType?: ContentTypeInfo | undefined;
    /** Version information for a document set version created by a user. */
    documentSetVersions?: DocumentSetVersion[] | undefined;
    /** For document libraries, the driveItem relationship exposes the listItem as a driveItem */
    driveItem?: DriveItem | undefined;
    /** The values of the columns set on this list item. */
    fields?: FieldValueSet | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** The list of previous versions of the list item. */
    versions?: ListItemVersion[] | undefined;

    constructor(data?: IListItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.analytics = _data["analytics"] ? ItemAnalytics.fromJS(_data["analytics"]) : <any>undefined;
            this.contentType = _data["contentType"] ? ContentTypeInfo.fromJS(_data["contentType"]) : <any>undefined;
            if (Array.isArray(_data["documentSetVersions"])) {
                this.documentSetVersions = [] as any;
                for (let item of _data["documentSetVersions"])
                    this.documentSetVersions!.push(DocumentSetVersion.fromJS(item));
            }
            this.driveItem = _data["driveItem"] ? DriveItem.fromJS(_data["driveItem"]) : <any>undefined;
            this.fields = _data["fields"] ? FieldValueSet.fromJS(_data["fields"]) : <any>undefined;
            this.sharepointIds = _data["sharepointIds"] ? SharepointIds.fromJS(_data["sharepointIds"]) : <any>undefined;
            if (Array.isArray(_data["versions"])) {
                this.versions = [] as any;
                for (let item of _data["versions"])
                    this.versions!.push(ListItemVersion.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ListItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["analytics"] = this.analytics ? this.analytics.toJSON() : <any>undefined;
        data["contentType"] = this.contentType ? this.contentType.toJSON() : <any>undefined;
        if (Array.isArray(this.documentSetVersions)) {
            data["documentSetVersions"] = [];
            for (let item of this.documentSetVersions)
                data["documentSetVersions"].push(item.toJSON());
        }
        data["driveItem"] = this.driveItem ? this.driveItem.toJSON() : <any>undefined;
        data["fields"] = this.fields ? this.fields.toJSON() : <any>undefined;
        data["sharepointIds"] = this.sharepointIds ? this.sharepointIds.toJSON() : <any>undefined;
        if (Array.isArray(this.versions)) {
            data["versions"] = [];
            for (let item of this.versions)
                data["versions"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IListItem extends IBaseItem {
    /** Analytics about the view activities that took place on this item. */
    analytics?: ItemAnalytics | undefined;
    /** The content type of this list item */
    contentType?: ContentTypeInfo | undefined;
    /** Version information for a document set version created by a user. */
    documentSetVersions?: DocumentSetVersion[] | undefined;
    /** For document libraries, the driveItem relationship exposes the listItem as a driveItem */
    driveItem?: DriveItem | undefined;
    /** The values of the columns set on this list item. */
    fields?: FieldValueSet | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** The list of previous versions of the list item. */
    versions?: ListItemVersion[] | undefined;
}

export class ContentTypeInfo implements IContentTypeInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The ID of the content type. */
    id?: string | undefined;
    /** The name of the content type. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IContentTypeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.id = _data["id"];
            this.name = _data["name"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ContentTypeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ContentTypeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IContentTypeInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The ID of the content type. */
    id?: string | undefined;
    /** The name of the content type. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class BaseItemVersion extends Entity implements IBaseItemVersion {
    /** Identity of the user which last modified the version. Read-only. */
    lastModifiedBy?: IdentitySet | undefined;
    /** Date and time the version was last modified. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** Indicates the publication status of this particular version. Read-only. */
    publication?: PublicationFacet | undefined;

    constructor(data?: IBaseItemVersion) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.lastModifiedBy = _data["lastModifiedBy"] ? IdentitySet.fromJS(_data["lastModifiedBy"]) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.publication = _data["publication"] ? PublicationFacet.fromJS(_data["publication"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): BaseItemVersion {
        data = typeof data === 'object' ? data : {};
        let result = new BaseItemVersion();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastModifiedBy"] = this.lastModifiedBy ? this.lastModifiedBy.toJSON() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["publication"] = this.publication ? this.publication.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseItemVersion extends IEntity {
    /** Identity of the user which last modified the version. Read-only. */
    lastModifiedBy?: IdentitySet | undefined;
    /** Date and time the version was last modified. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** Indicates the publication status of this particular version. Read-only. */
    publication?: PublicationFacet | undefined;
}

export class ListItemVersion extends BaseItemVersion implements IListItemVersion {
    /** A collection of the fields and values for this version of the list item. */
    fields?: FieldValueSet | undefined;

    constructor(data?: IListItemVersion) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fields = _data["fields"] ? FieldValueSet.fromJS(_data["fields"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ListItemVersion {
        data = typeof data === 'object' ? data : {};
        let result = new ListItemVersion();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fields"] = this.fields ? this.fields.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IListItemVersion extends IBaseItemVersion {
    /** A collection of the fields and values for this version of the list item. */
    fields?: FieldValueSet | undefined;
}

export class DocumentSetVersion extends ListItemVersion implements IDocumentSetVersion {
    /** Comment about the captured version. */
    comment?: string | undefined;
    /** User who captured the version. */
    createdBy?: IdentitySet | undefined;
    /** Date and time when this version was created. */
    createdDateTime?: Date | undefined;
    /** Items within the document set that are captured as part of this version. */
    items?: DocumentSetVersionItem[] | undefined;
    /** If true, minor versions of items are also captured; otherwise, only major versions are captured. The default value is false. */
    shouldCaptureMinorVersion?: boolean | undefined;

    constructor(data?: IDocumentSetVersion) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.comment = _data["comment"];
            this.createdBy = _data["createdBy"] ? IdentitySet.fromJS(_data["createdBy"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DocumentSetVersionItem.fromJS(item));
            }
            this.shouldCaptureMinorVersion = _data["shouldCaptureMinorVersion"];
        }
    }

    static override fromJS(data: any): DocumentSetVersion {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentSetVersion();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["shouldCaptureMinorVersion"] = this.shouldCaptureMinorVersion;
        super.toJSON(data);
        return data;
    }
}

export interface IDocumentSetVersion extends IListItemVersion {
    /** Comment about the captured version. */
    comment?: string | undefined;
    /** User who captured the version. */
    createdBy?: IdentitySet | undefined;
    /** Date and time when this version was created. */
    createdDateTime?: Date | undefined;
    /** Items within the document set that are captured as part of this version. */
    items?: DocumentSetVersionItem[] | undefined;
    /** If true, minor versions of items are also captured; otherwise, only major versions are captured. The default value is false. */
    shouldCaptureMinorVersion?: boolean | undefined;
}

export class DocumentSetVersionItem implements IDocumentSetVersionItem {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier for the item. */
    itemId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The title of the item. */
    title?: string | undefined;
    /** The version ID of the item. */
    versionId?: string | undefined;

    constructor(data?: IDocumentSetVersionItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.itemId = _data["itemId"];
            this.odataType = _data["odataType"];
            this.title = _data["title"];
            this.versionId = _data["versionId"];
        }
    }

    static fromJS(data: any): DocumentSetVersionItem {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentSetVersionItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["itemId"] = this.itemId;
        data["odataType"] = this.odataType;
        data["title"] = this.title;
        data["versionId"] = this.versionId;
        return data;
    }
}

export interface IDocumentSetVersionItem {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier for the item. */
    itemId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The title of the item. */
    title?: string | undefined;
    /** The version ID of the item. */
    versionId?: string | undefined;
}

export class FieldValueSet extends Entity implements IFieldValueSet {

    constructor(data?: IFieldValueSet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): FieldValueSet {
        data = typeof data === 'object' ? data : {};
        let result = new FieldValueSet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IFieldValueSet extends IEntity {
}

export class PublicationFacet implements IPublicationFacet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The user who checked out the file. */
    checkedOutBy?: IdentitySet | undefined;
    /** The state of publication for this document. Either published or checkout. Read-only. */
    level?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The unique identifier for the version that is visible to the current caller. Read-only. */
    versionId?: string | undefined;

    constructor(data?: IPublicationFacet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.checkedOutBy = _data["checkedOutBy"] ? IdentitySet.fromJS(_data["checkedOutBy"]) : <any>undefined;
            this.level = _data["level"];
            this.odataType = _data["odataType"];
            this.versionId = _data["versionId"];
        }
    }

    static fromJS(data: any): PublicationFacet {
        data = typeof data === 'object' ? data : {};
        let result = new PublicationFacet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["checkedOutBy"] = this.checkedOutBy ? this.checkedOutBy.toJSON() : <any>undefined;
        data["level"] = this.level;
        data["odataType"] = this.odataType;
        data["versionId"] = this.versionId;
        return data;
    }
}

export interface IPublicationFacet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The user who checked out the file. */
    checkedOutBy?: IdentitySet | undefined;
    /** The state of publication for this document. Either published or checkout. Read-only. */
    level?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The unique identifier for the version that is visible to the current caller. Read-only. */
    versionId?: string | undefined;
}

export class SharepointIds implements ISharepointIds {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier (guid) for the item's list in SharePoint. */
    listId?: string | undefined;
    /** An integer identifier for the item within the containing list. */
    listItemId?: string | undefined;
    /** The unique identifier (guid) for the item within OneDrive for Business or a SharePoint site. */
    listItemUniqueId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The unique identifier (guid) for the item's site collection (SPSite). */
    siteId?: string | undefined;
    /** The SharePoint URL for the site that contains the item. */
    siteUrl?: string | undefined;
    /** The unique identifier (guid) for the tenancy. */
    tenantId?: string | undefined;
    /** The unique identifier (guid) for the item's site (SPWeb). */
    webId?: string | undefined;

    constructor(data?: ISharepointIds) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.listId = _data["listId"];
            this.listItemId = _data["listItemId"];
            this.listItemUniqueId = _data["listItemUniqueId"];
            this.odataType = _data["odataType"];
            this.siteId = _data["siteId"];
            this.siteUrl = _data["siteUrl"];
            this.tenantId = _data["tenantId"];
            this.webId = _data["webId"];
        }
    }

    static fromJS(data: any): SharepointIds {
        data = typeof data === 'object' ? data : {};
        let result = new SharepointIds();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["listId"] = this.listId;
        data["listItemId"] = this.listItemId;
        data["listItemUniqueId"] = this.listItemUniqueId;
        data["odataType"] = this.odataType;
        data["siteId"] = this.siteId;
        data["siteUrl"] = this.siteUrl;
        data["tenantId"] = this.tenantId;
        data["webId"] = this.webId;
        return data;
    }
}

export interface ISharepointIds {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier (guid) for the item's list in SharePoint. */
    listId?: string | undefined;
    /** An integer identifier for the item within the containing list. */
    listItemId?: string | undefined;
    /** The unique identifier (guid) for the item within OneDrive for Business or a SharePoint site. */
    listItemUniqueId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The unique identifier (guid) for the item's site collection (SPSite). */
    siteId?: string | undefined;
    /** The SharePoint URL for the site that contains the item. */
    siteUrl?: string | undefined;
    /** The unique identifier (guid) for the tenancy. */
    tenantId?: string | undefined;
    /** The unique identifier (guid) for the item's site (SPWeb). */
    webId?: string | undefined;
}

export class DirectoryObject extends Entity implements IDirectoryObject {
    /** Date and time when this object was deleted. Always null when the object hasn't been deleted. */
    deletedDateTime?: Date | undefined;

    constructor(data?: IDirectoryObject) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deletedDateTime = _data["deletedDateTime"] ? new Date(_data["deletedDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): DirectoryObject {
        data = typeof data === 'object' ? data : {};
        let result = new DirectoryObject();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deletedDateTime"] = this.deletedDateTime ? this.deletedDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IDirectoryObject extends IEntity {
    /** Date and time when this object was deleted. Always null when the object hasn't been deleted. */
    deletedDateTime?: Date | undefined;
}

/** Represents a Microsoft Entra user account. */
export class User extends DirectoryObject implements IUser {
    /** A freeform text entry field for the user to describe themselves. Returned only on $select. */
    aboutMe?: string | undefined;
    /** true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter (eq, ne, not, and in). */
    accountEnabled?: boolean | undefined;
    /** The user's activities across devices. Read-only. Nullable. */
    activities?: UserActivity[] | undefined;
    /** Sets the age group of the user. Allowed values: null, Minor, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select. Supports $filter (eq, ne, not, and in). */
    ageGroup?: string | undefined;
    /** The user's terms of use acceptance statuses. Read-only. Nullable. */
    agreementAcceptances?: AgreementAcceptance[] | undefined;
    /** Represents the app roles a user is granted for an application. Supports $expand. */
    appRoleAssignments?: AppRoleAssignment[] | undefined;
    /** The licenses that are assigned to the user, including inherited (group-based) licenses. This property doesn't differentiate between directly assigned and inherited licenses. Use the licenseAssignmentStates property to identify the directly assigned and inherited licenses. Not nullable. Returned only on $select. Supports $filter (eq, not, /$count eq 0, /$count ne 0). */
    assignedLicenses?: AssignedLicense[] | undefined;
    /** The plans that are assigned to the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq and not). */
    assignedPlans?: AssignedPlan[] | undefined;
    /** The authentication methods that are supported for the user. */
    authentication?: Authentication | undefined;
    /** The authorizationInfo property */
    authorizationInfo?: AuthorizationInfo | undefined;
    /** The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z. Returned only on $select. */
    birthday?: Date | undefined;
    /** The telephone numbers for the user. NOTE: Although it's a string collection, only one number can be set for this property. Read-only for users synced from the on-premises directory. Returned by default. Supports $filter (eq, not, ge, le, startsWith). */
    businessPhones?: string[] | undefined;
    /** The user's primary calendar. Read-only. */
    calendar?: Calendar | undefined;
    /** The user's calendar groups. Read-only. Nullable. */
    calendarGroups?: CalendarGroup[] | undefined;
    /** The user's calendars. Read-only. Nullable. */
    calendars?: Calendar[] | undefined;
    /** The calendar view for the calendar. Read-only. Nullable. */
    calendarView?: Event[] | undefined;
    /** The chats property */
    chats?: Chat[] | undefined;
    /** The city where the user is located. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    city?: string | undefined;
    /** The cloudClipboard property */
    cloudClipboard?: CloudClipboardRoot | undefined;
    /** The name of the company that the user is associated with. This property can be useful for describing the company that a guest comes from. The maximum length is 64 characters.Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    companyName?: string | undefined;
    /** Sets whether consent was obtained for minors. Allowed values: null, Granted, Denied, and NotRequired. For more information, see legal age group property definitions. Returned only on $select. Supports $filter (eq, ne, not, and in). */
    consentProvidedForMinor?: string | undefined;
    /** The user's contacts folders. Read-only. Nullable. */
    contactFolders?: ContactFolder[] | undefined;
    /** The user's contacts. Read-only. Nullable. */
    contacts?: Contact[] | undefined;
    /** The country/region where the user is located; for example, US or UK. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    country?: string | undefined;
    /** The date and time the user was created, in ISO 8601 format and UTC. The value can't be modified and is automatically populated when the entity is created. Nullable. For on-premises users, the value represents when they were first created in Microsoft Entra ID. Property is null for some users created before June 2018 and on-premises users that were synced to Microsoft Entra ID before June 2018. Read-only. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in). */
    createdDateTime?: Date | undefined;
    /** Directory objects that the user created. Read-only. Nullable. */
    createdObjects?: DirectoryObject[] | undefined;
    /** Indicates whether the user account was created through one of the following methods:  As a regular school or work account (null). As an external account (Invitation). As a local account for an Azure Active Directory B2C tenant (LocalAccount). Through self-service sign-up by an internal user using email verification (EmailVerified). Through self-service sign-up by a guest signing up through a link that is part of a user flow (SelfServiceSignUp). Read-only.Returned only on $select. Supports $filter (eq, ne, not, in). */
    creationType?: string | undefined;
    /** An open complex type that holds the value of a custom security attribute that is assigned to a directory object. Nullable. Returned only on $select. Supports $filter (eq, ne, not, startsWith). The filter value is case-sensitive. To read this property, the calling app must be assigned the CustomSecAttributeAssignment.Read.All permission. To write this property, the calling app must be assigned the CustomSecAttributeAssignment.ReadWrite.All permissions. To read or write this property in delegated scenarios, the admin must be assigned the Attribute Assignment Administrator role. */
    customSecurityAttributes?: CustomSecurityAttributeValue | undefined;
    /** The name of the department in which the user works. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, and eq on null values). */
    department?: string | undefined;
    /** The limit on the maximum number of devices that the user is permitted to enroll. Allowed values are 5 or 1000. */
    deviceEnrollmentLimit?: number | undefined;
    /** The list of troubleshooting events for this user. */
    deviceManagementTroubleshootingEvents?: DeviceManagementTroubleshootingEvent[] | undefined;
    /** The users and contacts that report to the user. (The users and contacts that have their manager property set to this user.) Read-only. Nullable. Supports $expand. */
    directReports?: DirectoryObject[] | undefined;
    /** The name displayed in the address book for the user. This value is usually the combination of the user's first name, middle initial, and family name. This property is required when a user is created and it can't be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values), $orderby, and $search. */
    displayName?: string | undefined;
    /** The user's OneDrive. Read-only. */
    drive?: Drive | undefined;
    /** A collection of drives available for this user. Read-only. */
    drives?: Drive[] | undefined;
    /** The employeeExperience property */
    employeeExperience?: EmployeeExperienceUser | undefined;
    /** The date and time when the user was hired or will start work in a future hire. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in). */
    employeeHireDate?: Date | undefined;
    /** The employee identifier assigned to the user by the organization. The maximum length is 16 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values). */
    employeeId?: string | undefined;
    /** The date and time when the user left or will leave the organization. To read this property, the calling app must be assigned the User-LifeCycleInfo.Read.All permission. To write this property, the calling app must be assigned the User.Read.All and User-LifeCycleInfo.ReadWrite.All permissions. To read this property in delegated scenarios, the admin needs at least one of the following Microsoft Entra roles: Lifecycle Workflows Administrator (least privilege), Global Reader. To write this property in delegated scenarios, the admin needs the Global Administrator role. Supports $filter (eq, ne, not , ge, le, in). For more information, see Configure the employeeLeaveDateTime property for a user. */
    employeeLeaveDateTime?: Date | undefined;
    /** Represents organization data (for example, division and costCenter) associated with a user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in). */
    employeeOrgData?: EmployeeOrgData | undefined;
    /** Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith). */
    employeeType?: string | undefined;
    /** The user's events. Default is to show Events under the Default Calendar. Read-only. Nullable. */
    events?: Event[] | undefined;
    /** The collection of open extensions defined for the user. Read-only. Supports $expand. Nullable. */
    extensions?: Extension[] | undefined;
    /** For a guest invited to the tenant using the invitation API, this property represents the invited user's invitation status. For invited users, the state can be PendingAcceptance or Accepted, or null for all other users. Returned only on $select. Supports $filter (eq, ne, not , in). */
    externalUserState?: string | undefined;
    /** Shows the timestamp for the latest change to the externalUserState property. Returned only on $select. Supports $filter (eq, ne, not , in). */
    externalUserStateChangeDateTime?: Date | undefined;
    /** The fax number of the user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values). */
    faxNumber?: string | undefined;
    /** The followedSites property */
    followedSites?: Site[] | undefined;
    /** The given name (first name) of the user. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values). */
    givenName?: string | undefined;
    /** The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z. Returned only on $select.  Note: This property is specific to SharePoint in Microsoft 365. We recommend using the native employeeHireDate property to set and update hire date values using Microsoft Graph APIs. */
    hireDate?: Date | undefined;
    /** Represents the identities that can be used to sign in to this user account. Microsoft (also known as a local account), organizations, or social identity providers such as Facebook, Google, and Microsoft can provide identity and tie it to a user account. It might contain multiple items with the same signInType value. Returned only on $select.  Supports $filter (eq) with limitations. */
    identities?: ObjectIdentity[] | undefined;
    /** The instant message voice-over IP (VOIP) session initiation protocol (SIP) addresses for the user. Read-only. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith). */
    imAddresses?: string[] | undefined;
    /** Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance. */
    inferenceClassification?: InferenceClassification | undefined;
    /** Represents relationships between a user and items such as OneDrive for work or school documents, calculated using advanced analytics and machine learning techniques. Read-only. Nullable. */
    insights?: ItemInsights | undefined;
    /** A list for the user to describe their interests. Returned only on $select. */
    interests?: string[] | undefined;
    /** The isManagementRestricted property */
    isManagementRestricted?: boolean | undefined;
    /** Don't use – reserved for future use. */
    isResourceAccount?: boolean | undefined;
    /** The user's job title. Maximum length is 128 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values). */
    jobTitle?: string | undefined;
    /** The joinedTeams property */
    joinedTeams?: Team[] | undefined;
    /** The time when this Microsoft Entra user last changed their password or when their password was created, whichever date the latest action was performed. The date and time information uses ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select. */
    lastPasswordChangeDateTime?: Date | undefined;
    /** Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, MinorWithOutParentalConsent, MinorWithParentalConsent, MinorNoParentalConsentRequired, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select. */
    legalAgeGroupClassification?: string | undefined;
    /** State of license assignments for this user. Also indicates licenses that are directly assigned or the user inherited through group memberships. Read-only. Returned only on $select. */
    licenseAssignmentStates?: LicenseAssignmentState[] | undefined;
    /** A collection of this user's license details. Read-only. */
    licenseDetails?: LicenseDetails[] | undefined;
    /** The SMTP address for the user, for example, jeff@contoso.com. Changes to this property update the user's proxyAddresses collection to include the value as an SMTP address. This property can't contain accent characters.  NOTE: We don't recommend updating this property for Azure AD B2C user profiles. Use the otherMails property instead. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith, and eq on null values). */
    mail?: string | undefined;
    /** Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale, and time zone. Returned only on $select. */
    mailboxSettings?: MailboxSettings | undefined;
    /** The user's mail folders. Read-only. Nullable. */
    mailFolders?: MailFolder[] | undefined;
    /** The mail alias for the user. This property must be specified when a user is created. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    mailNickname?: string | undefined;
    /** Zero or more managed app registrations that belong to the user. */
    managedAppRegistrations?: ManagedAppRegistration[] | undefined;
    /** The managed devices associated with the user. */
    managedDevices?: ManagedDevice[] | undefined;
    /** The user or contact that is this user's manager. Read-only. Supports $expand. */
    manager?: DirectoryObject | undefined;
    /** The groups and directory roles that the user is a member of. Read-only. Nullable. Supports $expand. */
    memberOf?: DirectoryObject[] | undefined;
    /** The messages in a mailbox or folder. Read-only. Nullable. */
    messages?: Message[] | undefined;
    /** The primary cellular telephone number for the user. Read-only for users synced from the on-premises directory. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values) and $search. */
    mobilePhone?: string | undefined;
    /** The URL for the user's site. Returned only on $select. */
    mySite?: string | undefined;
    /** The oauth2PermissionGrants property */
    oauth2PermissionGrants?: OAuth2PermissionGrant[] | undefined;
    /** The office location in the user's place of business. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    officeLocation?: string | undefined;
    /** The onenote property */
    onenote?: Onenote | undefined;
    /** Information about a meeting, including the URL used to join a meeting, the attendees list, and the description. */
    onlineMeetings?: OnlineMeeting[] | undefined;
    /** Contains the on-premises Active Directory distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. */
    onPremisesDistinguishedName?: string | undefined;
    /** Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. */
    onPremisesDomainName?: string | undefined;
    /** Contains extensionAttributes1-15 for the user. These extension attributes are also known as Exchange custom attributes 1-15. Each attribute can store up to 1024 characters. For an onPremisesSyncEnabled user, the source of authority for this set of properties is the on-premises and is read-only. For a cloud-only user (where onPremisesSyncEnabled is false), these properties can be set during the creation or update of a user object.  For a cloud-only user previously synced from on-premises Active Directory, these properties are read-only in Microsoft Graph but can be fully managed through the Exchange Admin Center or the Exchange Online V2 module in PowerShell. Returned only on $select. Supports $filter (eq, ne, not, in). */
    onPremisesExtensionAttributes?: OnPremisesExtensionAttributes | undefined;
    /** This property is used to associate an on-premises Active Directory user account to their Microsoft Entra user object. This property must be specified when creating a new user account in the Graph if you're using a federated domain for the user's userPrincipalName (UPN) property. NOTE: The $ and _ characters can't be used when specifying this property. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in). */
    onPremisesImmutableId?: string | undefined;
    /** Indicates the last time at which the object was synced with the on-premises directory; for example: 2013-02-16T03:04:54Z. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in). */
    onPremisesLastSyncDateTime?: Date | undefined;
    /** Errors when using Microsoft synchronization product during provisioning. Returned only on $select. Supports $filter (eq, not, ge, le). */
    onPremisesProvisioningErrors?: OnPremisesProvisioningError[] | undefined;
    /** Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith). */
    onPremisesSamAccountName?: string | undefined;
    /** Contains the on-premises security identifier (SID) for the user that was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq including on null values). */
    onPremisesSecurityIdentifier?: string | undefined;
    /** true if this user object is currently being synced from an on-premises Active Directory (AD); otherwise the user isn't being synced and can be managed in Microsoft Entra ID. Read-only. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). */
    onPremisesSyncEnabled?: boolean | undefined;
    /** Contains the on-premises userPrincipalName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith). */
    onPremisesUserPrincipalName?: string | undefined;
    /** A list of other email addresses for the user; for example: ['bob@contoso.com', 'Robert@fabrikam.com']. NOTE: This property can't contain accent characters. Returned only on $select. Supports $filter (eq, not, ge, le, in, startsWith, endsWith, /$count eq 0, /$count ne 0). */
    otherMails?: string[] | undefined;
    /** The outlook property */
    outlook?: OutlookUser | undefined;
    /** Devices the user owns. Read-only. Nullable. Supports $expand and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1). */
    ownedDevices?: DirectoryObject[] | undefined;
    /** Directory objects the user owns. Read-only. Nullable. Supports $expand, $select nested in $expand, and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1). */
    ownedObjects?: DirectoryObject[] | undefined;
    /** Specifies password policies for the user. This value is an enumeration with one possible value being DisableStrongPassword, which allows weaker passwords than the default policy to be specified. DisablePasswordExpiration can also be specified. The two might be specified together; for example: DisablePasswordExpiration, DisableStrongPassword. Returned only on $select. For more information on the default password policies, see Microsoft Entra password policies. Supports $filter (ne, not, and eq on null values). */
    passwordPolicies?: string | undefined;
    /** Specifies the password profile for the user. The profile contains the user's password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). To update this property:  In delegated access, the calling app must be assigned the User-PasswordProfile.ReadWrite.All delegated permission on behalf of the signed-in user.  In application-only access, the calling app must be assigned the User-PasswordProfile.ReadWrite.All application permission and at least the User Administrator Microsoft Entra role. */
    passwordProfile?: PasswordProfile | undefined;
    /** A list for the user to enumerate their past projects. Returned only on $select. */
    pastProjects?: string[] | undefined;
    /** People that are relevant to the user. Read-only. Nullable. */
    people?: Person[] | undefined;
    /** List all resource-specific permission grants of a user. */
    permissionGrants?: ResourceSpecificPermissionGrant[] | undefined;
    /** The user's profile photo. Read-only. */
    photo?: ProfilePhoto | undefined;
    /** The collection of the user's profile photos in different sizes. Read-only. */
    photos?: ProfilePhoto[] | undefined;
    /** Entry-point to the Planner resource that might exist for a user. Read-only. */
    planner?: PlannerUser | undefined;
    /** The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code. Maximum length is 40 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    postalCode?: string | undefined;
    /** The preferred data location for the user. For more information, see OneDrive Online Multi-Geo. */
    preferredDataLocation?: string | undefined;
    /** The preferred language for the user. The preferred language format is based on RFC 4646. The name is a combination of an ISO 639 two-letter lowercase culture code associated with the language, and an ISO 3166 two-letter uppercase subculture code associated with the country or region. Example: 'en-US', or 'es-ES'. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values) */
    preferredLanguage?: string | undefined;
    /** The preferred name for the user. Not Supported. This attribute returns an empty string.Returned only on $select. */
    preferredName?: string | undefined;
    /** The presence property */
    presence?: Presence | undefined;
    /** The print property */
    print?: UserPrint | undefined;
    /** The plans that are provisioned for the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le). */
    provisionedPlans?: ProvisionedPlan[] | undefined;
    /** For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. Changes to the mail property update this collection to include the value as an SMTP address. For more information, see mail and proxyAddresses properties. The proxy address prefixed with SMTP (capitalized) is the primary proxy address, while those addresses prefixed with smtp are the secondary proxy addresses. For Azure AD B2C accounts, this property has a limit of 10 unique addresses. Read-only in Microsoft Graph; you can update this property only through the Microsoft 365 admin center. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0). */
    proxyAddresses?: string[] | undefined;
    /** Devices that are registered for the user. Read-only. Nullable. Supports $expand and returns up to 100 objects. */
    registeredDevices?: DirectoryObject[] | undefined;
    /** A list for the user to enumerate their responsibilities. Returned only on $select. */
    responsibilities?: string[] | undefined;
    /** A list for the user to enumerate the schools they attended. Returned only on $select. */
    schools?: string[] | undefined;
    /** The scopedRoleMemberOf property */
    scopedRoleMemberOf?: ScopedRoleMembership[] | undefined;
    /** Security identifier (SID) of the user, used in Windows scenarios. Read-only. Returned by default. Supports $select and $filter (eq, not, ge, le, startsWith). */
    securityIdentifier?: string | undefined;
    /** Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a user object.  Supports $filter (eq, not, for isResolved and serviceInstance). */
    serviceProvisioningErrors?: ServiceProvisioningError[] | undefined;
    /** The settings property */
    settings?: UserSettings | undefined;
    /** Do not use in Microsoft Graph. Manage this property through the Microsoft 365 admin center instead. Represents whether the user should be included in the Outlook global address list. See Known issue. */
    showInAddressList?: boolean | undefined;
    /** Get the last signed-in date and request ID of the sign-in for a given user. Read-only.Returned only on $select. Supports $filter (eq, ne, not, ge, le) but not with any other filterable properties. Note: Details for this property require a Microsoft Entra ID P1 or P2 license and the AuditLog.Read.All permission.This property isn't returned for a user who never signed in or last signed in before April 2020. */
    signInActivity?: SignInActivity | undefined;
    /** Any refresh tokens or session tokens (session cookies) issued before this time are invalid. Applications get an error when using an invalid refresh or session token to acquire a delegated access token (to access APIs such as Microsoft Graph). If this happens, the application needs to acquire a new refresh token by requesting the authorized endpoint. Read-only. Use revokeSignInSessions to reset. Returned only on $select. */
    signInSessionsValidFromDateTime?: Date | undefined;
    /** A list for the user to enumerate their skills. Returned only on $select. */
    skills?: string[] | undefined;
    /** The identifier that relates the user to the working time schedule triggers. Read-Only. Nullable */
    solutions?: UserSolutionRoot | undefined;
    /** The users and groups responsible for this guest's privileges in the tenant and keeping the guest's information and access updated. (HTTP Methods: GET, POST, DELETE.). Supports $expand. */
    sponsors?: DirectoryObject[] | undefined;
    /** The state or province in the user's address. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    state?: string | undefined;
    /** The street address of the user's place of business. Maximum length is 1,024 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    streetAddress?: string | undefined;
    /** The user's surname (family name or last name). Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    surname?: string | undefined;
    /** A container for Microsoft Teams features available for the user. Read-only. Nullable. */
    teamwork?: UserTeamwork | undefined;
    /** Represents the To Do services available to a user. */
    todo?: Todo | undefined;
    /** The groups, including nested groups, and directory roles that a user is a member of. Nullable. */
    transitiveMemberOf?: DirectoryObject[] | undefined;
    /** A two-letter country code (ISO standard 3166). Required for users that are assigned licenses due to legal requirements to check for availability of services in countries. Examples include: US, JP, and GB. Not nullable. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    usageLocation?: string | undefined;
    /** The user principal name (UPN) of the user. The UPN is an Internet-style sign-in name for the user based on the Internet standard RFC 822. By convention, this value should map to the user's email name. The general format is alias@domain, where the domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization.NOTE: This property can't contain accent characters. Only the following characters are allowed A - Z, a - z, 0 - 9, ' . - _ ! # ^ ~. For the complete list of allowed characters, see username policies. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith) and $orderby. */
    userPrincipalName?: string | undefined;
    /** A string value that can be used to classify user types in your directory. The possible values are Member and Guest. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). NOTE: For more information about the permissions for members and guests, see What are the default user permissions in Microsoft Entra ID? */
    userType?: string | undefined;

    constructor(data?: IUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.aboutMe = _data["aboutMe"];
            this.accountEnabled = _data["accountEnabled"];
            if (Array.isArray(_data["activities"])) {
                this.activities = [] as any;
                for (let item of _data["activities"])
                    this.activities!.push(UserActivity.fromJS(item));
            }
            this.ageGroup = _data["ageGroup"];
            if (Array.isArray(_data["agreementAcceptances"])) {
                this.agreementAcceptances = [] as any;
                for (let item of _data["agreementAcceptances"])
                    this.agreementAcceptances!.push(AgreementAcceptance.fromJS(item));
            }
            if (Array.isArray(_data["appRoleAssignments"])) {
                this.appRoleAssignments = [] as any;
                for (let item of _data["appRoleAssignments"])
                    this.appRoleAssignments!.push(AppRoleAssignment.fromJS(item));
            }
            if (Array.isArray(_data["assignedLicenses"])) {
                this.assignedLicenses = [] as any;
                for (let item of _data["assignedLicenses"])
                    this.assignedLicenses!.push(AssignedLicense.fromJS(item));
            }
            if (Array.isArray(_data["assignedPlans"])) {
                this.assignedPlans = [] as any;
                for (let item of _data["assignedPlans"])
                    this.assignedPlans!.push(AssignedPlan.fromJS(item));
            }
            this.authentication = _data["authentication"] ? Authentication.fromJS(_data["authentication"]) : <any>undefined;
            this.authorizationInfo = _data["authorizationInfo"] ? AuthorizationInfo.fromJS(_data["authorizationInfo"]) : <any>undefined;
            this.birthday = _data["birthday"] ? new Date(_data["birthday"].toString()) : <any>undefined;
            if (Array.isArray(_data["businessPhones"])) {
                this.businessPhones = [] as any;
                for (let item of _data["businessPhones"])
                    this.businessPhones!.push(item);
            }
            this.calendar = _data["calendar"] ? Calendar.fromJS(_data["calendar"]) : <any>undefined;
            if (Array.isArray(_data["calendarGroups"])) {
                this.calendarGroups = [] as any;
                for (let item of _data["calendarGroups"])
                    this.calendarGroups!.push(CalendarGroup.fromJS(item));
            }
            if (Array.isArray(_data["calendars"])) {
                this.calendars = [] as any;
                for (let item of _data["calendars"])
                    this.calendars!.push(Calendar.fromJS(item));
            }
            if (Array.isArray(_data["calendarView"])) {
                this.calendarView = [] as any;
                for (let item of _data["calendarView"])
                    this.calendarView!.push(Event.fromJS(item));
            }
            if (Array.isArray(_data["chats"])) {
                this.chats = [] as any;
                for (let item of _data["chats"])
                    this.chats!.push(Chat.fromJS(item));
            }
            this.city = _data["city"];
            this.cloudClipboard = _data["cloudClipboard"] ? CloudClipboardRoot.fromJS(_data["cloudClipboard"]) : <any>undefined;
            this.companyName = _data["companyName"];
            this.consentProvidedForMinor = _data["consentProvidedForMinor"];
            if (Array.isArray(_data["contactFolders"])) {
                this.contactFolders = [] as any;
                for (let item of _data["contactFolders"])
                    this.contactFolders!.push(ContactFolder.fromJS(item));
            }
            if (Array.isArray(_data["contacts"])) {
                this.contacts = [] as any;
                for (let item of _data["contacts"])
                    this.contacts!.push(Contact.fromJS(item));
            }
            this.country = _data["country"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["createdObjects"])) {
                this.createdObjects = [] as any;
                for (let item of _data["createdObjects"])
                    this.createdObjects!.push(DirectoryObject.fromJS(item));
            }
            this.creationType = _data["creationType"];
            this.customSecurityAttributes = _data["customSecurityAttributes"] ? CustomSecurityAttributeValue.fromJS(_data["customSecurityAttributes"]) : <any>undefined;
            this.department = _data["department"];
            this.deviceEnrollmentLimit = _data["deviceEnrollmentLimit"];
            if (Array.isArray(_data["deviceManagementTroubleshootingEvents"])) {
                this.deviceManagementTroubleshootingEvents = [] as any;
                for (let item of _data["deviceManagementTroubleshootingEvents"])
                    this.deviceManagementTroubleshootingEvents!.push(DeviceManagementTroubleshootingEvent.fromJS(item));
            }
            if (Array.isArray(_data["directReports"])) {
                this.directReports = [] as any;
                for (let item of _data["directReports"])
                    this.directReports!.push(DirectoryObject.fromJS(item));
            }
            this.displayName = _data["displayName"];
            this.drive = _data["drive"] ? Drive.fromJS(_data["drive"]) : <any>undefined;
            if (Array.isArray(_data["drives"])) {
                this.drives = [] as any;
                for (let item of _data["drives"])
                    this.drives!.push(Drive.fromJS(item));
            }
            this.employeeExperience = _data["employeeExperience"] ? EmployeeExperienceUser.fromJS(_data["employeeExperience"]) : <any>undefined;
            this.employeeHireDate = _data["employeeHireDate"] ? new Date(_data["employeeHireDate"].toString()) : <any>undefined;
            this.employeeId = _data["employeeId"];
            this.employeeLeaveDateTime = _data["employeeLeaveDateTime"] ? new Date(_data["employeeLeaveDateTime"].toString()) : <any>undefined;
            this.employeeOrgData = _data["employeeOrgData"] ? EmployeeOrgData.fromJS(_data["employeeOrgData"]) : <any>undefined;
            this.employeeType = _data["employeeType"];
            if (Array.isArray(_data["events"])) {
                this.events = [] as any;
                for (let item of _data["events"])
                    this.events!.push(Event.fromJS(item));
            }
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            this.externalUserState = _data["externalUserState"];
            this.externalUserStateChangeDateTime = _data["externalUserStateChangeDateTime"] ? new Date(_data["externalUserStateChangeDateTime"].toString()) : <any>undefined;
            this.faxNumber = _data["faxNumber"];
            if (Array.isArray(_data["followedSites"])) {
                this.followedSites = [] as any;
                for (let item of _data["followedSites"])
                    this.followedSites!.push(Site.fromJS(item));
            }
            this.givenName = _data["givenName"];
            this.hireDate = _data["hireDate"] ? new Date(_data["hireDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["identities"])) {
                this.identities = [] as any;
                for (let item of _data["identities"])
                    this.identities!.push(ObjectIdentity.fromJS(item));
            }
            if (Array.isArray(_data["imAddresses"])) {
                this.imAddresses = [] as any;
                for (let item of _data["imAddresses"])
                    this.imAddresses!.push(item);
            }
            this.inferenceClassification = _data["inferenceClassification"] ? InferenceClassification.fromJS(_data["inferenceClassification"]) : <any>undefined;
            this.insights = _data["insights"] ? ItemInsights.fromJS(_data["insights"]) : <any>undefined;
            if (Array.isArray(_data["interests"])) {
                this.interests = [] as any;
                for (let item of _data["interests"])
                    this.interests!.push(item);
            }
            this.isManagementRestricted = _data["isManagementRestricted"];
            this.isResourceAccount = _data["isResourceAccount"];
            this.jobTitle = _data["jobTitle"];
            if (Array.isArray(_data["joinedTeams"])) {
                this.joinedTeams = [] as any;
                for (let item of _data["joinedTeams"])
                    this.joinedTeams!.push(Team.fromJS(item));
            }
            this.lastPasswordChangeDateTime = _data["lastPasswordChangeDateTime"] ? new Date(_data["lastPasswordChangeDateTime"].toString()) : <any>undefined;
            this.legalAgeGroupClassification = _data["legalAgeGroupClassification"];
            if (Array.isArray(_data["licenseAssignmentStates"])) {
                this.licenseAssignmentStates = [] as any;
                for (let item of _data["licenseAssignmentStates"])
                    this.licenseAssignmentStates!.push(LicenseAssignmentState.fromJS(item));
            }
            if (Array.isArray(_data["licenseDetails"])) {
                this.licenseDetails = [] as any;
                for (let item of _data["licenseDetails"])
                    this.licenseDetails!.push(LicenseDetails.fromJS(item));
            }
            this.mail = _data["mail"];
            this.mailboxSettings = _data["mailboxSettings"] ? MailboxSettings.fromJS(_data["mailboxSettings"]) : <any>undefined;
            if (Array.isArray(_data["mailFolders"])) {
                this.mailFolders = [] as any;
                for (let item of _data["mailFolders"])
                    this.mailFolders!.push(MailFolder.fromJS(item));
            }
            this.mailNickname = _data["mailNickname"];
            if (Array.isArray(_data["managedAppRegistrations"])) {
                this.managedAppRegistrations = [] as any;
                for (let item of _data["managedAppRegistrations"])
                    this.managedAppRegistrations!.push(ManagedAppRegistration.fromJS(item));
            }
            if (Array.isArray(_data["managedDevices"])) {
                this.managedDevices = [] as any;
                for (let item of _data["managedDevices"])
                    this.managedDevices!.push(ManagedDevice.fromJS(item));
            }
            this.manager = _data["manager"] ? DirectoryObject.fromJS(_data["manager"]) : <any>undefined;
            if (Array.isArray(_data["memberOf"])) {
                this.memberOf = [] as any;
                for (let item of _data["memberOf"])
                    this.memberOf!.push(DirectoryObject.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
            this.mobilePhone = _data["mobilePhone"];
            this.mySite = _data["mySite"];
            if (Array.isArray(_data["oauth2PermissionGrants"])) {
                this.oauth2PermissionGrants = [] as any;
                for (let item of _data["oauth2PermissionGrants"])
                    this.oauth2PermissionGrants!.push(OAuth2PermissionGrant.fromJS(item));
            }
            this.officeLocation = _data["officeLocation"];
            this.onenote = _data["onenote"] ? Onenote.fromJS(_data["onenote"]) : <any>undefined;
            if (Array.isArray(_data["onlineMeetings"])) {
                this.onlineMeetings = [] as any;
                for (let item of _data["onlineMeetings"])
                    this.onlineMeetings!.push(OnlineMeeting.fromJS(item));
            }
            this.onPremisesDistinguishedName = _data["onPremisesDistinguishedName"];
            this.onPremisesDomainName = _data["onPremisesDomainName"];
            this.onPremisesExtensionAttributes = _data["onPremisesExtensionAttributes"] ? OnPremisesExtensionAttributes.fromJS(_data["onPremisesExtensionAttributes"]) : <any>undefined;
            this.onPremisesImmutableId = _data["onPremisesImmutableId"];
            this.onPremisesLastSyncDateTime = _data["onPremisesLastSyncDateTime"] ? new Date(_data["onPremisesLastSyncDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["onPremisesProvisioningErrors"])) {
                this.onPremisesProvisioningErrors = [] as any;
                for (let item of _data["onPremisesProvisioningErrors"])
                    this.onPremisesProvisioningErrors!.push(OnPremisesProvisioningError.fromJS(item));
            }
            this.onPremisesSamAccountName = _data["onPremisesSamAccountName"];
            this.onPremisesSecurityIdentifier = _data["onPremisesSecurityIdentifier"];
            this.onPremisesSyncEnabled = _data["onPremisesSyncEnabled"];
            this.onPremisesUserPrincipalName = _data["onPremisesUserPrincipalName"];
            if (Array.isArray(_data["otherMails"])) {
                this.otherMails = [] as any;
                for (let item of _data["otherMails"])
                    this.otherMails!.push(item);
            }
            this.outlook = _data["outlook"] ? OutlookUser.fromJS(_data["outlook"]) : <any>undefined;
            if (Array.isArray(_data["ownedDevices"])) {
                this.ownedDevices = [] as any;
                for (let item of _data["ownedDevices"])
                    this.ownedDevices!.push(DirectoryObject.fromJS(item));
            }
            if (Array.isArray(_data["ownedObjects"])) {
                this.ownedObjects = [] as any;
                for (let item of _data["ownedObjects"])
                    this.ownedObjects!.push(DirectoryObject.fromJS(item));
            }
            this.passwordPolicies = _data["passwordPolicies"];
            this.passwordProfile = _data["passwordProfile"] ? PasswordProfile.fromJS(_data["passwordProfile"]) : <any>undefined;
            if (Array.isArray(_data["pastProjects"])) {
                this.pastProjects = [] as any;
                for (let item of _data["pastProjects"])
                    this.pastProjects!.push(item);
            }
            if (Array.isArray(_data["people"])) {
                this.people = [] as any;
                for (let item of _data["people"])
                    this.people!.push(Person.fromJS(item));
            }
            if (Array.isArray(_data["permissionGrants"])) {
                this.permissionGrants = [] as any;
                for (let item of _data["permissionGrants"])
                    this.permissionGrants!.push(ResourceSpecificPermissionGrant.fromJS(item));
            }
            this.photo = _data["photo"] ? ProfilePhoto.fromJS(_data["photo"]) : <any>undefined;
            if (Array.isArray(_data["photos"])) {
                this.photos = [] as any;
                for (let item of _data["photos"])
                    this.photos!.push(ProfilePhoto.fromJS(item));
            }
            this.planner = _data["planner"] ? PlannerUser.fromJS(_data["planner"]) : <any>undefined;
            this.postalCode = _data["postalCode"];
            this.preferredDataLocation = _data["preferredDataLocation"];
            this.preferredLanguage = _data["preferredLanguage"];
            this.preferredName = _data["preferredName"];
            this.presence = _data["presence"] ? Presence.fromJS(_data["presence"]) : <any>undefined;
            this.print = _data["print"] ? UserPrint.fromJS(_data["print"]) : <any>undefined;
            if (Array.isArray(_data["provisionedPlans"])) {
                this.provisionedPlans = [] as any;
                for (let item of _data["provisionedPlans"])
                    this.provisionedPlans!.push(ProvisionedPlan.fromJS(item));
            }
            if (Array.isArray(_data["proxyAddresses"])) {
                this.proxyAddresses = [] as any;
                for (let item of _data["proxyAddresses"])
                    this.proxyAddresses!.push(item);
            }
            if (Array.isArray(_data["registeredDevices"])) {
                this.registeredDevices = [] as any;
                for (let item of _data["registeredDevices"])
                    this.registeredDevices!.push(DirectoryObject.fromJS(item));
            }
            if (Array.isArray(_data["responsibilities"])) {
                this.responsibilities = [] as any;
                for (let item of _data["responsibilities"])
                    this.responsibilities!.push(item);
            }
            if (Array.isArray(_data["schools"])) {
                this.schools = [] as any;
                for (let item of _data["schools"])
                    this.schools!.push(item);
            }
            if (Array.isArray(_data["scopedRoleMemberOf"])) {
                this.scopedRoleMemberOf = [] as any;
                for (let item of _data["scopedRoleMemberOf"])
                    this.scopedRoleMemberOf!.push(ScopedRoleMembership.fromJS(item));
            }
            this.securityIdentifier = _data["securityIdentifier"];
            if (Array.isArray(_data["serviceProvisioningErrors"])) {
                this.serviceProvisioningErrors = [] as any;
                for (let item of _data["serviceProvisioningErrors"])
                    this.serviceProvisioningErrors!.push(ServiceProvisioningError.fromJS(item));
            }
            this.settings = _data["settings"] ? UserSettings.fromJS(_data["settings"]) : <any>undefined;
            this.showInAddressList = _data["showInAddressList"];
            this.signInActivity = _data["signInActivity"] ? SignInActivity.fromJS(_data["signInActivity"]) : <any>undefined;
            this.signInSessionsValidFromDateTime = _data["signInSessionsValidFromDateTime"] ? new Date(_data["signInSessionsValidFromDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["skills"])) {
                this.skills = [] as any;
                for (let item of _data["skills"])
                    this.skills!.push(item);
            }
            this.solutions = _data["solutions"] ? UserSolutionRoot.fromJS(_data["solutions"]) : <any>undefined;
            if (Array.isArray(_data["sponsors"])) {
                this.sponsors = [] as any;
                for (let item of _data["sponsors"])
                    this.sponsors!.push(DirectoryObject.fromJS(item));
            }
            this.state = _data["state"];
            this.streetAddress = _data["streetAddress"];
            this.surname = _data["surname"];
            this.teamwork = _data["teamwork"] ? UserTeamwork.fromJS(_data["teamwork"]) : <any>undefined;
            this.todo = _data["todo"] ? Todo.fromJS(_data["todo"]) : <any>undefined;
            if (Array.isArray(_data["transitiveMemberOf"])) {
                this.transitiveMemberOf = [] as any;
                for (let item of _data["transitiveMemberOf"])
                    this.transitiveMemberOf!.push(DirectoryObject.fromJS(item));
            }
            this.usageLocation = _data["usageLocation"];
            this.userPrincipalName = _data["userPrincipalName"];
            this.userType = _data["userType"];
        }
    }

    static override fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aboutMe"] = this.aboutMe;
        data["accountEnabled"] = this.accountEnabled;
        if (Array.isArray(this.activities)) {
            data["activities"] = [];
            for (let item of this.activities)
                data["activities"].push(item.toJSON());
        }
        data["ageGroup"] = this.ageGroup;
        if (Array.isArray(this.agreementAcceptances)) {
            data["agreementAcceptances"] = [];
            for (let item of this.agreementAcceptances)
                data["agreementAcceptances"].push(item.toJSON());
        }
        if (Array.isArray(this.appRoleAssignments)) {
            data["appRoleAssignments"] = [];
            for (let item of this.appRoleAssignments)
                data["appRoleAssignments"].push(item.toJSON());
        }
        if (Array.isArray(this.assignedLicenses)) {
            data["assignedLicenses"] = [];
            for (let item of this.assignedLicenses)
                data["assignedLicenses"].push(item.toJSON());
        }
        if (Array.isArray(this.assignedPlans)) {
            data["assignedPlans"] = [];
            for (let item of this.assignedPlans)
                data["assignedPlans"].push(item.toJSON());
        }
        data["authentication"] = this.authentication ? this.authentication.toJSON() : <any>undefined;
        data["authorizationInfo"] = this.authorizationInfo ? this.authorizationInfo.toJSON() : <any>undefined;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        if (Array.isArray(this.businessPhones)) {
            data["businessPhones"] = [];
            for (let item of this.businessPhones)
                data["businessPhones"].push(item);
        }
        data["calendar"] = this.calendar ? this.calendar.toJSON() : <any>undefined;
        if (Array.isArray(this.calendarGroups)) {
            data["calendarGroups"] = [];
            for (let item of this.calendarGroups)
                data["calendarGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.calendars)) {
            data["calendars"] = [];
            for (let item of this.calendars)
                data["calendars"].push(item.toJSON());
        }
        if (Array.isArray(this.calendarView)) {
            data["calendarView"] = [];
            for (let item of this.calendarView)
                data["calendarView"].push(item.toJSON());
        }
        if (Array.isArray(this.chats)) {
            data["chats"] = [];
            for (let item of this.chats)
                data["chats"].push(item.toJSON());
        }
        data["city"] = this.city;
        data["cloudClipboard"] = this.cloudClipboard ? this.cloudClipboard.toJSON() : <any>undefined;
        data["companyName"] = this.companyName;
        data["consentProvidedForMinor"] = this.consentProvidedForMinor;
        if (Array.isArray(this.contactFolders)) {
            data["contactFolders"] = [];
            for (let item of this.contactFolders)
                data["contactFolders"].push(item.toJSON());
        }
        if (Array.isArray(this.contacts)) {
            data["contacts"] = [];
            for (let item of this.contacts)
                data["contacts"].push(item.toJSON());
        }
        data["country"] = this.country;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.createdObjects)) {
            data["createdObjects"] = [];
            for (let item of this.createdObjects)
                data["createdObjects"].push(item.toJSON());
        }
        data["creationType"] = this.creationType;
        data["customSecurityAttributes"] = this.customSecurityAttributes ? this.customSecurityAttributes.toJSON() : <any>undefined;
        data["department"] = this.department;
        data["deviceEnrollmentLimit"] = this.deviceEnrollmentLimit;
        if (Array.isArray(this.deviceManagementTroubleshootingEvents)) {
            data["deviceManagementTroubleshootingEvents"] = [];
            for (let item of this.deviceManagementTroubleshootingEvents)
                data["deviceManagementTroubleshootingEvents"].push(item.toJSON());
        }
        if (Array.isArray(this.directReports)) {
            data["directReports"] = [];
            for (let item of this.directReports)
                data["directReports"].push(item.toJSON());
        }
        data["displayName"] = this.displayName;
        data["drive"] = this.drive ? this.drive.toJSON() : <any>undefined;
        if (Array.isArray(this.drives)) {
            data["drives"] = [];
            for (let item of this.drives)
                data["drives"].push(item.toJSON());
        }
        data["employeeExperience"] = this.employeeExperience ? this.employeeExperience.toJSON() : <any>undefined;
        data["employeeHireDate"] = this.employeeHireDate ? this.employeeHireDate.toISOString() : <any>undefined;
        data["employeeId"] = this.employeeId;
        data["employeeLeaveDateTime"] = this.employeeLeaveDateTime ? this.employeeLeaveDateTime.toISOString() : <any>undefined;
        data["employeeOrgData"] = this.employeeOrgData ? this.employeeOrgData.toJSON() : <any>undefined;
        data["employeeType"] = this.employeeType;
        if (Array.isArray(this.events)) {
            data["events"] = [];
            for (let item of this.events)
                data["events"].push(item.toJSON());
        }
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        data["externalUserState"] = this.externalUserState;
        data["externalUserStateChangeDateTime"] = this.externalUserStateChangeDateTime ? this.externalUserStateChangeDateTime.toISOString() : <any>undefined;
        data["faxNumber"] = this.faxNumber;
        if (Array.isArray(this.followedSites)) {
            data["followedSites"] = [];
            for (let item of this.followedSites)
                data["followedSites"].push(item.toJSON());
        }
        data["givenName"] = this.givenName;
        data["hireDate"] = this.hireDate ? this.hireDate.toISOString() : <any>undefined;
        if (Array.isArray(this.identities)) {
            data["identities"] = [];
            for (let item of this.identities)
                data["identities"].push(item.toJSON());
        }
        if (Array.isArray(this.imAddresses)) {
            data["imAddresses"] = [];
            for (let item of this.imAddresses)
                data["imAddresses"].push(item);
        }
        data["inferenceClassification"] = this.inferenceClassification ? this.inferenceClassification.toJSON() : <any>undefined;
        data["insights"] = this.insights ? this.insights.toJSON() : <any>undefined;
        if (Array.isArray(this.interests)) {
            data["interests"] = [];
            for (let item of this.interests)
                data["interests"].push(item);
        }
        data["isManagementRestricted"] = this.isManagementRestricted;
        data["isResourceAccount"] = this.isResourceAccount;
        data["jobTitle"] = this.jobTitle;
        if (Array.isArray(this.joinedTeams)) {
            data["joinedTeams"] = [];
            for (let item of this.joinedTeams)
                data["joinedTeams"].push(item.toJSON());
        }
        data["lastPasswordChangeDateTime"] = this.lastPasswordChangeDateTime ? this.lastPasswordChangeDateTime.toISOString() : <any>undefined;
        data["legalAgeGroupClassification"] = this.legalAgeGroupClassification;
        if (Array.isArray(this.licenseAssignmentStates)) {
            data["licenseAssignmentStates"] = [];
            for (let item of this.licenseAssignmentStates)
                data["licenseAssignmentStates"].push(item.toJSON());
        }
        if (Array.isArray(this.licenseDetails)) {
            data["licenseDetails"] = [];
            for (let item of this.licenseDetails)
                data["licenseDetails"].push(item.toJSON());
        }
        data["mail"] = this.mail;
        data["mailboxSettings"] = this.mailboxSettings ? this.mailboxSettings.toJSON() : <any>undefined;
        if (Array.isArray(this.mailFolders)) {
            data["mailFolders"] = [];
            for (let item of this.mailFolders)
                data["mailFolders"].push(item.toJSON());
        }
        data["mailNickname"] = this.mailNickname;
        if (Array.isArray(this.managedAppRegistrations)) {
            data["managedAppRegistrations"] = [];
            for (let item of this.managedAppRegistrations)
                data["managedAppRegistrations"].push(item.toJSON());
        }
        if (Array.isArray(this.managedDevices)) {
            data["managedDevices"] = [];
            for (let item of this.managedDevices)
                data["managedDevices"].push(item.toJSON());
        }
        data["manager"] = this.manager ? this.manager.toJSON() : <any>undefined;
        if (Array.isArray(this.memberOf)) {
            data["memberOf"] = [];
            for (let item of this.memberOf)
                data["memberOf"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["mobilePhone"] = this.mobilePhone;
        data["mySite"] = this.mySite;
        if (Array.isArray(this.oauth2PermissionGrants)) {
            data["oauth2PermissionGrants"] = [];
            for (let item of this.oauth2PermissionGrants)
                data["oauth2PermissionGrants"].push(item.toJSON());
        }
        data["officeLocation"] = this.officeLocation;
        data["onenote"] = this.onenote ? this.onenote.toJSON() : <any>undefined;
        if (Array.isArray(this.onlineMeetings)) {
            data["onlineMeetings"] = [];
            for (let item of this.onlineMeetings)
                data["onlineMeetings"].push(item.toJSON());
        }
        data["onPremisesDistinguishedName"] = this.onPremisesDistinguishedName;
        data["onPremisesDomainName"] = this.onPremisesDomainName;
        data["onPremisesExtensionAttributes"] = this.onPremisesExtensionAttributes ? this.onPremisesExtensionAttributes.toJSON() : <any>undefined;
        data["onPremisesImmutableId"] = this.onPremisesImmutableId;
        data["onPremisesLastSyncDateTime"] = this.onPremisesLastSyncDateTime ? this.onPremisesLastSyncDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.onPremisesProvisioningErrors)) {
            data["onPremisesProvisioningErrors"] = [];
            for (let item of this.onPremisesProvisioningErrors)
                data["onPremisesProvisioningErrors"].push(item.toJSON());
        }
        data["onPremisesSamAccountName"] = this.onPremisesSamAccountName;
        data["onPremisesSecurityIdentifier"] = this.onPremisesSecurityIdentifier;
        data["onPremisesSyncEnabled"] = this.onPremisesSyncEnabled;
        data["onPremisesUserPrincipalName"] = this.onPremisesUserPrincipalName;
        if (Array.isArray(this.otherMails)) {
            data["otherMails"] = [];
            for (let item of this.otherMails)
                data["otherMails"].push(item);
        }
        data["outlook"] = this.outlook ? this.outlook.toJSON() : <any>undefined;
        if (Array.isArray(this.ownedDevices)) {
            data["ownedDevices"] = [];
            for (let item of this.ownedDevices)
                data["ownedDevices"].push(item.toJSON());
        }
        if (Array.isArray(this.ownedObjects)) {
            data["ownedObjects"] = [];
            for (let item of this.ownedObjects)
                data["ownedObjects"].push(item.toJSON());
        }
        data["passwordPolicies"] = this.passwordPolicies;
        data["passwordProfile"] = this.passwordProfile ? this.passwordProfile.toJSON() : <any>undefined;
        if (Array.isArray(this.pastProjects)) {
            data["pastProjects"] = [];
            for (let item of this.pastProjects)
                data["pastProjects"].push(item);
        }
        if (Array.isArray(this.people)) {
            data["people"] = [];
            for (let item of this.people)
                data["people"].push(item.toJSON());
        }
        if (Array.isArray(this.permissionGrants)) {
            data["permissionGrants"] = [];
            for (let item of this.permissionGrants)
                data["permissionGrants"].push(item.toJSON());
        }
        data["photo"] = this.photo ? this.photo.toJSON() : <any>undefined;
        if (Array.isArray(this.photos)) {
            data["photos"] = [];
            for (let item of this.photos)
                data["photos"].push(item.toJSON());
        }
        data["planner"] = this.planner ? this.planner.toJSON() : <any>undefined;
        data["postalCode"] = this.postalCode;
        data["preferredDataLocation"] = this.preferredDataLocation;
        data["preferredLanguage"] = this.preferredLanguage;
        data["preferredName"] = this.preferredName;
        data["presence"] = this.presence ? this.presence.toJSON() : <any>undefined;
        data["print"] = this.print ? this.print.toJSON() : <any>undefined;
        if (Array.isArray(this.provisionedPlans)) {
            data["provisionedPlans"] = [];
            for (let item of this.provisionedPlans)
                data["provisionedPlans"].push(item.toJSON());
        }
        if (Array.isArray(this.proxyAddresses)) {
            data["proxyAddresses"] = [];
            for (let item of this.proxyAddresses)
                data["proxyAddresses"].push(item);
        }
        if (Array.isArray(this.registeredDevices)) {
            data["registeredDevices"] = [];
            for (let item of this.registeredDevices)
                data["registeredDevices"].push(item.toJSON());
        }
        if (Array.isArray(this.responsibilities)) {
            data["responsibilities"] = [];
            for (let item of this.responsibilities)
                data["responsibilities"].push(item);
        }
        if (Array.isArray(this.schools)) {
            data["schools"] = [];
            for (let item of this.schools)
                data["schools"].push(item);
        }
        if (Array.isArray(this.scopedRoleMemberOf)) {
            data["scopedRoleMemberOf"] = [];
            for (let item of this.scopedRoleMemberOf)
                data["scopedRoleMemberOf"].push(item.toJSON());
        }
        data["securityIdentifier"] = this.securityIdentifier;
        if (Array.isArray(this.serviceProvisioningErrors)) {
            data["serviceProvisioningErrors"] = [];
            for (let item of this.serviceProvisioningErrors)
                data["serviceProvisioningErrors"].push(item.toJSON());
        }
        data["settings"] = this.settings ? this.settings.toJSON() : <any>undefined;
        data["showInAddressList"] = this.showInAddressList;
        data["signInActivity"] = this.signInActivity ? this.signInActivity.toJSON() : <any>undefined;
        data["signInSessionsValidFromDateTime"] = this.signInSessionsValidFromDateTime ? this.signInSessionsValidFromDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.skills)) {
            data["skills"] = [];
            for (let item of this.skills)
                data["skills"].push(item);
        }
        data["solutions"] = this.solutions ? this.solutions.toJSON() : <any>undefined;
        if (Array.isArray(this.sponsors)) {
            data["sponsors"] = [];
            for (let item of this.sponsors)
                data["sponsors"].push(item.toJSON());
        }
        data["state"] = this.state;
        data["streetAddress"] = this.streetAddress;
        data["surname"] = this.surname;
        data["teamwork"] = this.teamwork ? this.teamwork.toJSON() : <any>undefined;
        data["todo"] = this.todo ? this.todo.toJSON() : <any>undefined;
        if (Array.isArray(this.transitiveMemberOf)) {
            data["transitiveMemberOf"] = [];
            for (let item of this.transitiveMemberOf)
                data["transitiveMemberOf"].push(item.toJSON());
        }
        data["usageLocation"] = this.usageLocation;
        data["userPrincipalName"] = this.userPrincipalName;
        data["userType"] = this.userType;
        super.toJSON(data);
        return data;
    }
}

/** Represents a Microsoft Entra user account. */
export interface IUser extends IDirectoryObject {
    /** A freeform text entry field for the user to describe themselves. Returned only on $select. */
    aboutMe?: string | undefined;
    /** true if the account is enabled; otherwise, false. This property is required when a user is created. Returned only on $select. Supports $filter (eq, ne, not, and in). */
    accountEnabled?: boolean | undefined;
    /** The user's activities across devices. Read-only. Nullable. */
    activities?: UserActivity[] | undefined;
    /** Sets the age group of the user. Allowed values: null, Minor, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select. Supports $filter (eq, ne, not, and in). */
    ageGroup?: string | undefined;
    /** The user's terms of use acceptance statuses. Read-only. Nullable. */
    agreementAcceptances?: AgreementAcceptance[] | undefined;
    /** Represents the app roles a user is granted for an application. Supports $expand. */
    appRoleAssignments?: AppRoleAssignment[] | undefined;
    /** The licenses that are assigned to the user, including inherited (group-based) licenses. This property doesn't differentiate between directly assigned and inherited licenses. Use the licenseAssignmentStates property to identify the directly assigned and inherited licenses. Not nullable. Returned only on $select. Supports $filter (eq, not, /$count eq 0, /$count ne 0). */
    assignedLicenses?: AssignedLicense[] | undefined;
    /** The plans that are assigned to the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq and not). */
    assignedPlans?: AssignedPlan[] | undefined;
    /** The authentication methods that are supported for the user. */
    authentication?: Authentication | undefined;
    /** The authorizationInfo property */
    authorizationInfo?: AuthorizationInfo | undefined;
    /** The birthday of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z. Returned only on $select. */
    birthday?: Date | undefined;
    /** The telephone numbers for the user. NOTE: Although it's a string collection, only one number can be set for this property. Read-only for users synced from the on-premises directory. Returned by default. Supports $filter (eq, not, ge, le, startsWith). */
    businessPhones?: string[] | undefined;
    /** The user's primary calendar. Read-only. */
    calendar?: Calendar | undefined;
    /** The user's calendar groups. Read-only. Nullable. */
    calendarGroups?: CalendarGroup[] | undefined;
    /** The user's calendars. Read-only. Nullable. */
    calendars?: Calendar[] | undefined;
    /** The calendar view for the calendar. Read-only. Nullable. */
    calendarView?: Event[] | undefined;
    /** The chats property */
    chats?: Chat[] | undefined;
    /** The city where the user is located. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    city?: string | undefined;
    /** The cloudClipboard property */
    cloudClipboard?: CloudClipboardRoot | undefined;
    /** The name of the company that the user is associated with. This property can be useful for describing the company that a guest comes from. The maximum length is 64 characters.Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    companyName?: string | undefined;
    /** Sets whether consent was obtained for minors. Allowed values: null, Granted, Denied, and NotRequired. For more information, see legal age group property definitions. Returned only on $select. Supports $filter (eq, ne, not, and in). */
    consentProvidedForMinor?: string | undefined;
    /** The user's contacts folders. Read-only. Nullable. */
    contactFolders?: ContactFolder[] | undefined;
    /** The user's contacts. Read-only. Nullable. */
    contacts?: Contact[] | undefined;
    /** The country/region where the user is located; for example, US or UK. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    country?: string | undefined;
    /** The date and time the user was created, in ISO 8601 format and UTC. The value can't be modified and is automatically populated when the entity is created. Nullable. For on-premises users, the value represents when they were first created in Microsoft Entra ID. Property is null for some users created before June 2018 and on-premises users that were synced to Microsoft Entra ID before June 2018. Read-only. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in). */
    createdDateTime?: Date | undefined;
    /** Directory objects that the user created. Read-only. Nullable. */
    createdObjects?: DirectoryObject[] | undefined;
    /** Indicates whether the user account was created through one of the following methods:  As a regular school or work account (null). As an external account (Invitation). As a local account for an Azure Active Directory B2C tenant (LocalAccount). Through self-service sign-up by an internal user using email verification (EmailVerified). Through self-service sign-up by a guest signing up through a link that is part of a user flow (SelfServiceSignUp). Read-only.Returned only on $select. Supports $filter (eq, ne, not, in). */
    creationType?: string | undefined;
    /** An open complex type that holds the value of a custom security attribute that is assigned to a directory object. Nullable. Returned only on $select. Supports $filter (eq, ne, not, startsWith). The filter value is case-sensitive. To read this property, the calling app must be assigned the CustomSecAttributeAssignment.Read.All permission. To write this property, the calling app must be assigned the CustomSecAttributeAssignment.ReadWrite.All permissions. To read or write this property in delegated scenarios, the admin must be assigned the Attribute Assignment Administrator role. */
    customSecurityAttributes?: CustomSecurityAttributeValue | undefined;
    /** The name of the department in which the user works. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, and eq on null values). */
    department?: string | undefined;
    /** The limit on the maximum number of devices that the user is permitted to enroll. Allowed values are 5 or 1000. */
    deviceEnrollmentLimit?: number | undefined;
    /** The list of troubleshooting events for this user. */
    deviceManagementTroubleshootingEvents?: DeviceManagementTroubleshootingEvent[] | undefined;
    /** The users and contacts that report to the user. (The users and contacts that have their manager property set to this user.) Read-only. Nullable. Supports $expand. */
    directReports?: DirectoryObject[] | undefined;
    /** The name displayed in the address book for the user. This value is usually the combination of the user's first name, middle initial, and family name. This property is required when a user is created and it can't be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values), $orderby, and $search. */
    displayName?: string | undefined;
    /** The user's OneDrive. Read-only. */
    drive?: Drive | undefined;
    /** A collection of drives available for this user. Read-only. */
    drives?: Drive[] | undefined;
    /** The employeeExperience property */
    employeeExperience?: EmployeeExperienceUser | undefined;
    /** The date and time when the user was hired or will start work in a future hire. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in). */
    employeeHireDate?: Date | undefined;
    /** The employee identifier assigned to the user by the organization. The maximum length is 16 characters. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values). */
    employeeId?: string | undefined;
    /** The date and time when the user left or will leave the organization. To read this property, the calling app must be assigned the User-LifeCycleInfo.Read.All permission. To write this property, the calling app must be assigned the User.Read.All and User-LifeCycleInfo.ReadWrite.All permissions. To read this property in delegated scenarios, the admin needs at least one of the following Microsoft Entra roles: Lifecycle Workflows Administrator (least privilege), Global Reader. To write this property in delegated scenarios, the admin needs the Global Administrator role. Supports $filter (eq, ne, not , ge, le, in). For more information, see Configure the employeeLeaveDateTime property for a user. */
    employeeLeaveDateTime?: Date | undefined;
    /** Represents organization data (for example, division and costCenter) associated with a user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in). */
    employeeOrgData?: EmployeeOrgData | undefined;
    /** Captures enterprise worker type. For example, Employee, Contractor, Consultant, or Vendor. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith). */
    employeeType?: string | undefined;
    /** The user's events. Default is to show Events under the Default Calendar. Read-only. Nullable. */
    events?: Event[] | undefined;
    /** The collection of open extensions defined for the user. Read-only. Supports $expand. Nullable. */
    extensions?: Extension[] | undefined;
    /** For a guest invited to the tenant using the invitation API, this property represents the invited user's invitation status. For invited users, the state can be PendingAcceptance or Accepted, or null for all other users. Returned only on $select. Supports $filter (eq, ne, not , in). */
    externalUserState?: string | undefined;
    /** Shows the timestamp for the latest change to the externalUserState property. Returned only on $select. Supports $filter (eq, ne, not , in). */
    externalUserStateChangeDateTime?: Date | undefined;
    /** The fax number of the user. Returned only on $select. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values). */
    faxNumber?: string | undefined;
    /** The followedSites property */
    followedSites?: Site[] | undefined;
    /** The given name (first name) of the user. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values). */
    givenName?: string | undefined;
    /** The hire date of the user. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014, is 2014-01-01T00:00:00Z. Returned only on $select.  Note: This property is specific to SharePoint in Microsoft 365. We recommend using the native employeeHireDate property to set and update hire date values using Microsoft Graph APIs. */
    hireDate?: Date | undefined;
    /** Represents the identities that can be used to sign in to this user account. Microsoft (also known as a local account), organizations, or social identity providers such as Facebook, Google, and Microsoft can provide identity and tie it to a user account. It might contain multiple items with the same signInType value. Returned only on $select.  Supports $filter (eq) with limitations. */
    identities?: ObjectIdentity[] | undefined;
    /** The instant message voice-over IP (VOIP) session initiation protocol (SIP) addresses for the user. Read-only. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith). */
    imAddresses?: string[] | undefined;
    /** Relevance classification of the user's messages based on explicit designations that override inferred relevance or importance. */
    inferenceClassification?: InferenceClassification | undefined;
    /** Represents relationships between a user and items such as OneDrive for work or school documents, calculated using advanced analytics and machine learning techniques. Read-only. Nullable. */
    insights?: ItemInsights | undefined;
    /** A list for the user to describe their interests. Returned only on $select. */
    interests?: string[] | undefined;
    /** The isManagementRestricted property */
    isManagementRestricted?: boolean | undefined;
    /** Don't use – reserved for future use. */
    isResourceAccount?: boolean | undefined;
    /** The user's job title. Maximum length is 128 characters. Returned by default. Supports $filter (eq, ne, not , ge, le, in, startsWith, and eq on null values). */
    jobTitle?: string | undefined;
    /** The joinedTeams property */
    joinedTeams?: Team[] | undefined;
    /** The time when this Microsoft Entra user last changed their password or when their password was created, whichever date the latest action was performed. The date and time information uses ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned only on $select. */
    lastPasswordChangeDateTime?: Date | undefined;
    /** Used by enterprise applications to determine the legal age group of the user. This property is read-only and calculated based on ageGroup and consentProvidedForMinor properties. Allowed values: null, MinorWithOutParentalConsent, MinorWithParentalConsent, MinorNoParentalConsentRequired, NotAdult, and Adult. For more information, see legal age group property definitions. Returned only on $select. */
    legalAgeGroupClassification?: string | undefined;
    /** State of license assignments for this user. Also indicates licenses that are directly assigned or the user inherited through group memberships. Read-only. Returned only on $select. */
    licenseAssignmentStates?: LicenseAssignmentState[] | undefined;
    /** A collection of this user's license details. Read-only. */
    licenseDetails?: LicenseDetails[] | undefined;
    /** The SMTP address for the user, for example, jeff@contoso.com. Changes to this property update the user's proxyAddresses collection to include the value as an SMTP address. This property can't contain accent characters.  NOTE: We don't recommend updating this property for Azure AD B2C user profiles. Use the otherMails property instead. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith, and eq on null values). */
    mail?: string | undefined;
    /** Settings for the primary mailbox of the signed-in user. You can get or update settings for sending automatic replies to incoming messages, locale, and time zone. Returned only on $select. */
    mailboxSettings?: MailboxSettings | undefined;
    /** The user's mail folders. Read-only. Nullable. */
    mailFolders?: MailFolder[] | undefined;
    /** The mail alias for the user. This property must be specified when a user is created. Maximum length is 64 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    mailNickname?: string | undefined;
    /** Zero or more managed app registrations that belong to the user. */
    managedAppRegistrations?: ManagedAppRegistration[] | undefined;
    /** The managed devices associated with the user. */
    managedDevices?: ManagedDevice[] | undefined;
    /** The user or contact that is this user's manager. Read-only. Supports $expand. */
    manager?: DirectoryObject | undefined;
    /** The groups and directory roles that the user is a member of. Read-only. Nullable. Supports $expand. */
    memberOf?: DirectoryObject[] | undefined;
    /** The messages in a mailbox or folder. Read-only. Nullable. */
    messages?: Message[] | undefined;
    /** The primary cellular telephone number for the user. Read-only for users synced from the on-premises directory. Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values) and $search. */
    mobilePhone?: string | undefined;
    /** The URL for the user's site. Returned only on $select. */
    mySite?: string | undefined;
    /** The oauth2PermissionGrants property */
    oauth2PermissionGrants?: OAuth2PermissionGrant[] | undefined;
    /** The office location in the user's place of business. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    officeLocation?: string | undefined;
    /** The onenote property */
    onenote?: Onenote | undefined;
    /** Information about a meeting, including the URL used to join a meeting, the attendees list, and the description. */
    onlineMeetings?: OnlineMeeting[] | undefined;
    /** Contains the on-premises Active Directory distinguished name or DN. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. */
    onPremisesDistinguishedName?: string | undefined;
    /** Contains the on-premises domainFQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. */
    onPremisesDomainName?: string | undefined;
    /** Contains extensionAttributes1-15 for the user. These extension attributes are also known as Exchange custom attributes 1-15. Each attribute can store up to 1024 characters. For an onPremisesSyncEnabled user, the source of authority for this set of properties is the on-premises and is read-only. For a cloud-only user (where onPremisesSyncEnabled is false), these properties can be set during the creation or update of a user object.  For a cloud-only user previously synced from on-premises Active Directory, these properties are read-only in Microsoft Graph but can be fully managed through the Exchange Admin Center or the Exchange Online V2 module in PowerShell. Returned only on $select. Supports $filter (eq, ne, not, in). */
    onPremisesExtensionAttributes?: OnPremisesExtensionAttributes | undefined;
    /** This property is used to associate an on-premises Active Directory user account to their Microsoft Entra user object. This property must be specified when creating a new user account in the Graph if you're using a federated domain for the user's userPrincipalName (UPN) property. NOTE: The $ and _ characters can't be used when specifying this property. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in). */
    onPremisesImmutableId?: string | undefined;
    /** Indicates the last time at which the object was synced with the on-premises directory; for example: 2013-02-16T03:04:54Z. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in). */
    onPremisesLastSyncDateTime?: Date | undefined;
    /** Errors when using Microsoft synchronization product during provisioning. Returned only on $select. Supports $filter (eq, not, ge, le). */
    onPremisesProvisioningErrors?: OnPremisesProvisioningError[] | undefined;
    /** Contains the on-premises samAccountName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith). */
    onPremisesSamAccountName?: string | undefined;
    /** Contains the on-premises security identifier (SID) for the user that was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq including on null values). */
    onPremisesSecurityIdentifier?: string | undefined;
    /** true if this user object is currently being synced from an on-premises Active Directory (AD); otherwise the user isn't being synced and can be managed in Microsoft Entra ID. Read-only. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). */
    onPremisesSyncEnabled?: boolean | undefined;
    /** Contains the on-premises userPrincipalName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect. Read-only. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith). */
    onPremisesUserPrincipalName?: string | undefined;
    /** A list of other email addresses for the user; for example: ['bob@contoso.com', 'Robert@fabrikam.com']. NOTE: This property can't contain accent characters. Returned only on $select. Supports $filter (eq, not, ge, le, in, startsWith, endsWith, /$count eq 0, /$count ne 0). */
    otherMails?: string[] | undefined;
    /** The outlook property */
    outlook?: OutlookUser | undefined;
    /** Devices the user owns. Read-only. Nullable. Supports $expand and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1). */
    ownedDevices?: DirectoryObject[] | undefined;
    /** Directory objects the user owns. Read-only. Nullable. Supports $expand, $select nested in $expand, and $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1). */
    ownedObjects?: DirectoryObject[] | undefined;
    /** Specifies password policies for the user. This value is an enumeration with one possible value being DisableStrongPassword, which allows weaker passwords than the default policy to be specified. DisablePasswordExpiration can also be specified. The two might be specified together; for example: DisablePasswordExpiration, DisableStrongPassword. Returned only on $select. For more information on the default password policies, see Microsoft Entra password policies. Supports $filter (ne, not, and eq on null values). */
    passwordPolicies?: string | undefined;
    /** Specifies the password profile for the user. The profile contains the user's password. This property is required when a user is created. The password in the profile must satisfy minimum requirements as specified by the passwordPolicies property. By default, a strong password is required. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). To update this property:  In delegated access, the calling app must be assigned the User-PasswordProfile.ReadWrite.All delegated permission on behalf of the signed-in user.  In application-only access, the calling app must be assigned the User-PasswordProfile.ReadWrite.All application permission and at least the User Administrator Microsoft Entra role. */
    passwordProfile?: PasswordProfile | undefined;
    /** A list for the user to enumerate their past projects. Returned only on $select. */
    pastProjects?: string[] | undefined;
    /** People that are relevant to the user. Read-only. Nullable. */
    people?: Person[] | undefined;
    /** List all resource-specific permission grants of a user. */
    permissionGrants?: ResourceSpecificPermissionGrant[] | undefined;
    /** The user's profile photo. Read-only. */
    photo?: ProfilePhoto | undefined;
    /** The collection of the user's profile photos in different sizes. Read-only. */
    photos?: ProfilePhoto[] | undefined;
    /** Entry-point to the Planner resource that might exist for a user. Read-only. */
    planner?: PlannerUser | undefined;
    /** The postal code for the user's postal address. The postal code is specific to the user's country/region. In the United States of America, this attribute contains the ZIP code. Maximum length is 40 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    postalCode?: string | undefined;
    /** The preferred data location for the user. For more information, see OneDrive Online Multi-Geo. */
    preferredDataLocation?: string | undefined;
    /** The preferred language for the user. The preferred language format is based on RFC 4646. The name is a combination of an ISO 639 two-letter lowercase culture code associated with the language, and an ISO 3166 two-letter uppercase subculture code associated with the country or region. Example: 'en-US', or 'es-ES'. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values) */
    preferredLanguage?: string | undefined;
    /** The preferred name for the user. Not Supported. This attribute returns an empty string.Returned only on $select. */
    preferredName?: string | undefined;
    /** The presence property */
    presence?: Presence | undefined;
    /** The print property */
    print?: UserPrint | undefined;
    /** The plans that are provisioned for the user. Read-only. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le). */
    provisionedPlans?: ProvisionedPlan[] | undefined;
    /** For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. Changes to the mail property update this collection to include the value as an SMTP address. For more information, see mail and proxyAddresses properties. The proxy address prefixed with SMTP (capitalized) is the primary proxy address, while those addresses prefixed with smtp are the secondary proxy addresses. For Azure AD B2C accounts, this property has a limit of 10 unique addresses. Read-only in Microsoft Graph; you can update this property only through the Microsoft 365 admin center. Not nullable. Returned only on $select. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0). */
    proxyAddresses?: string[] | undefined;
    /** Devices that are registered for the user. Read-only. Nullable. Supports $expand and returns up to 100 objects. */
    registeredDevices?: DirectoryObject[] | undefined;
    /** A list for the user to enumerate their responsibilities. Returned only on $select. */
    responsibilities?: string[] | undefined;
    /** A list for the user to enumerate the schools they attended. Returned only on $select. */
    schools?: string[] | undefined;
    /** The scopedRoleMemberOf property */
    scopedRoleMemberOf?: ScopedRoleMembership[] | undefined;
    /** Security identifier (SID) of the user, used in Windows scenarios. Read-only. Returned by default. Supports $select and $filter (eq, not, ge, le, startsWith). */
    securityIdentifier?: string | undefined;
    /** Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a user object.  Supports $filter (eq, not, for isResolved and serviceInstance). */
    serviceProvisioningErrors?: ServiceProvisioningError[] | undefined;
    /** The settings property */
    settings?: UserSettings | undefined;
    /** Do not use in Microsoft Graph. Manage this property through the Microsoft 365 admin center instead. Represents whether the user should be included in the Outlook global address list. See Known issue. */
    showInAddressList?: boolean | undefined;
    /** Get the last signed-in date and request ID of the sign-in for a given user. Read-only.Returned only on $select. Supports $filter (eq, ne, not, ge, le) but not with any other filterable properties. Note: Details for this property require a Microsoft Entra ID P1 or P2 license and the AuditLog.Read.All permission.This property isn't returned for a user who never signed in or last signed in before April 2020. */
    signInActivity?: SignInActivity | undefined;
    /** Any refresh tokens or session tokens (session cookies) issued before this time are invalid. Applications get an error when using an invalid refresh or session token to acquire a delegated access token (to access APIs such as Microsoft Graph). If this happens, the application needs to acquire a new refresh token by requesting the authorized endpoint. Read-only. Use revokeSignInSessions to reset. Returned only on $select. */
    signInSessionsValidFromDateTime?: Date | undefined;
    /** A list for the user to enumerate their skills. Returned only on $select. */
    skills?: string[] | undefined;
    /** The identifier that relates the user to the working time schedule triggers. Read-Only. Nullable */
    solutions?: UserSolutionRoot | undefined;
    /** The users and groups responsible for this guest's privileges in the tenant and keeping the guest's information and access updated. (HTTP Methods: GET, POST, DELETE.). Supports $expand. */
    sponsors?: DirectoryObject[] | undefined;
    /** The state or province in the user's address. Maximum length is 128 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    state?: string | undefined;
    /** The street address of the user's place of business. Maximum length is 1,024 characters. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    streetAddress?: string | undefined;
    /** The user's surname (family name or last name). Maximum length is 64 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    surname?: string | undefined;
    /** A container for Microsoft Teams features available for the user. Read-only. Nullable. */
    teamwork?: UserTeamwork | undefined;
    /** Represents the To Do services available to a user. */
    todo?: Todo | undefined;
    /** The groups, including nested groups, and directory roles that a user is a member of. Nullable. */
    transitiveMemberOf?: DirectoryObject[] | undefined;
    /** A two-letter country code (ISO standard 3166). Required for users that are assigned licenses due to legal requirements to check for availability of services in countries. Examples include: US, JP, and GB. Not nullable. Returned only on $select. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    usageLocation?: string | undefined;
    /** The user principal name (UPN) of the user. The UPN is an Internet-style sign-in name for the user based on the Internet standard RFC 822. By convention, this value should map to the user's email name. The general format is alias@domain, where the domain must be present in the tenant's collection of verified domains. This property is required when a user is created. The verified domains for the tenant can be accessed from the verifiedDomains property of organization.NOTE: This property can't contain accent characters. Only the following characters are allowed A - Z, a - z, 0 - 9, ' . - _ ! # ^ ~. For the complete list of allowed characters, see username policies. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, endsWith) and $orderby. */
    userPrincipalName?: string | undefined;
    /** A string value that can be used to classify user types in your directory. The possible values are Member and Guest. Returned only on $select. Supports $filter (eq, ne, not, in, and eq on null values). NOTE: For more information about the permissions for members and guests, see What are the default user permissions in Microsoft Entra ID? */
    userType?: string | undefined;
}

export class UserActivity extends Entity implements IUserActivity {
    /** Required. URL used to launch the activity in the best native experience represented by the appId. Might launch a web-based app if no native app exists. */
    activationUrl?: string | undefined;
    /** Required. URL for the domain representing the cross-platform identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain. For example: https://contoso.com or https://myapp.contoso.com but NOT https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per cross-platform app identity. For example, a separate file and domain is needed for Word vs. PowerPoint. */
    activitySourceHost?: string | undefined;
    /** Required. The unique activity ID in the context of the app - supplied by caller and immutable thereafter. */
    appActivityId?: string | undefined;
    /** Optional. Short text description of the app used to generate the activity for use in cases when the app is not installed on the user’s local device. */
    appDisplayName?: string | undefined;
    /** Optional. A custom piece of data - JSON-LD extensible description of content according to schema.org syntax. */
    contentInfo?: UntypedNode | undefined;
    /** Optional. Used in the event the content can be rendered outside of a native or web-based app experience (for example, a pointer to an item in an RSS feed). */
    contentUrl?: string | undefined;
    /** Set by the server. DateTime in UTC when the object was created on the server. */
    createdDateTime?: Date | undefined;
    /** Set by the server. DateTime in UTC when the object expired on the server. */
    expirationDateTime?: Date | undefined;
    /** Optional. URL used to launch the activity in a web-based app, if available. */
    fallbackUrl?: string | undefined;
    /** Optional. NavigationProperty/Containment; navigation property to the activity's historyItems. */
    historyItems?: ActivityHistoryItem[] | undefined;
    /** Set by the server. DateTime in UTC when the object was modified on the server. */
    lastModifiedDateTime?: Date | undefined;
    /** Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored. */
    status?: Status | undefined;
    /** Optional. The timezone in which the user's device used to generate the activity was located at activity creation time; values supplied as Olson IDs in order to support cross-platform representation. */
    userTimezone?: string | undefined;
    /** The visualElements property */
    visualElements?: VisualInfo | undefined;

    constructor(data?: IUserActivity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activationUrl = _data["activationUrl"];
            this.activitySourceHost = _data["activitySourceHost"];
            this.appActivityId = _data["appActivityId"];
            this.appDisplayName = _data["appDisplayName"];
            this.contentInfo = _data["contentInfo"] ? UntypedNode.fromJS(_data["contentInfo"]) : <any>undefined;
            this.contentUrl = _data["contentUrl"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            this.fallbackUrl = _data["fallbackUrl"];
            if (Array.isArray(_data["historyItems"])) {
                this.historyItems = [] as any;
                for (let item of _data["historyItems"])
                    this.historyItems!.push(ActivityHistoryItem.fromJS(item));
            }
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.userTimezone = _data["userTimezone"];
            this.visualElements = _data["visualElements"] ? VisualInfo.fromJS(_data["visualElements"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UserActivity {
        data = typeof data === 'object' ? data : {};
        let result = new UserActivity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activationUrl"] = this.activationUrl;
        data["activitySourceHost"] = this.activitySourceHost;
        data["appActivityId"] = this.appActivityId;
        data["appDisplayName"] = this.appDisplayName;
        data["contentInfo"] = this.contentInfo ? this.contentInfo.toJSON() : <any>undefined;
        data["contentUrl"] = this.contentUrl;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        data["fallbackUrl"] = this.fallbackUrl;
        if (Array.isArray(this.historyItems)) {
            data["historyItems"] = [];
            for (let item of this.historyItems)
                data["historyItems"].push(item.toJSON());
        }
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["userTimezone"] = this.userTimezone;
        data["visualElements"] = this.visualElements ? this.visualElements.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUserActivity extends IEntity {
    /** Required. URL used to launch the activity in the best native experience represented by the appId. Might launch a web-based app if no native app exists. */
    activationUrl?: string | undefined;
    /** Required. URL for the domain representing the cross-platform identity mapping for the app. Mapping is stored either as a JSON file hosted on the domain or configurable via Windows Dev Center. The JSON file is named cross-platform-app-identifiers and is hosted at root of your HTTPS domain, either at the top level domain or include a sub domain. For example: https://contoso.com or https://myapp.contoso.com but NOT https://myapp.contoso.com/somepath. You must have a unique file and domain (or sub domain) per cross-platform app identity. For example, a separate file and domain is needed for Word vs. PowerPoint. */
    activitySourceHost?: string | undefined;
    /** Required. The unique activity ID in the context of the app - supplied by caller and immutable thereafter. */
    appActivityId?: string | undefined;
    /** Optional. Short text description of the app used to generate the activity for use in cases when the app is not installed on the user’s local device. */
    appDisplayName?: string | undefined;
    /** Optional. A custom piece of data - JSON-LD extensible description of content according to schema.org syntax. */
    contentInfo?: UntypedNode | undefined;
    /** Optional. Used in the event the content can be rendered outside of a native or web-based app experience (for example, a pointer to an item in an RSS feed). */
    contentUrl?: string | undefined;
    /** Set by the server. DateTime in UTC when the object was created on the server. */
    createdDateTime?: Date | undefined;
    /** Set by the server. DateTime in UTC when the object expired on the server. */
    expirationDateTime?: Date | undefined;
    /** Optional. URL used to launch the activity in a web-based app, if available. */
    fallbackUrl?: string | undefined;
    /** Optional. NavigationProperty/Containment; navigation property to the activity's historyItems. */
    historyItems?: ActivityHistoryItem[] | undefined;
    /** Set by the server. DateTime in UTC when the object was modified on the server. */
    lastModifiedDateTime?: Date | undefined;
    /** Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored. */
    status?: Status | undefined;
    /** Optional. The timezone in which the user's device used to generate the activity was located at activity creation time; values supplied as Olson IDs in order to support cross-platform representation. */
    userTimezone?: string | undefined;
    /** The visualElements property */
    visualElements?: VisualInfo | undefined;
}

/** Base class for untyped node. */
export class UntypedNode implements IUntypedNode {

    constructor(data?: IUntypedNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): UntypedNode {
        data = typeof data === 'object' ? data : {};
        let result = new UntypedNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** Base class for untyped node. */
export interface IUntypedNode {
}

export class ActivityHistoryItem extends Entity implements IActivityHistoryItem {
    /** Optional. The duration of active user engagement. if not supplied, this is calculated from the startedDateTime and lastActiveDateTime. */
    activeDurationSeconds?: number | undefined;
    /** The activity property */
    activity?: UserActivity | undefined;
    /** Set by the server. DateTime in UTC when the object was created on the server. */
    createdDateTime?: Date | undefined;
    /** Optional. UTC DateTime when the activityHistoryItem will undergo hard-delete. Can be set by the client. */
    expirationDateTime?: Date | undefined;
    /** Optional. UTC DateTime when the activityHistoryItem (activity session) was last understood as active or finished - if null, activityHistoryItem status should be Ongoing. */
    lastActiveDateTime?: Date | undefined;
    /** Set by the server. DateTime in UTC when the object was modified on the server. */
    lastModifiedDateTime?: Date | undefined;
    /** Required. UTC DateTime when the activityHistoryItem (activity session) was started. Required for timeline history. */
    startedDateTime?: Date | undefined;
    /** Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored. */
    status?: Status | undefined;
    /** Optional. The timezone in which the user's device used to generate the activity was located at activity creation time. Values supplied as Olson IDs in order to support cross-platform representation. */
    userTimezone?: string | undefined;

    constructor(data?: IActivityHistoryItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activeDurationSeconds = _data["activeDurationSeconds"];
            this.activity = _data["activity"] ? UserActivity.fromJS(_data["activity"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            this.lastActiveDateTime = _data["lastActiveDateTime"] ? new Date(_data["lastActiveDateTime"].toString()) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.startedDateTime = _data["startedDateTime"] ? new Date(_data["startedDateTime"].toString()) : <any>undefined;
            this.status = _data["status"];
            this.userTimezone = _data["userTimezone"];
        }
    }

    static override fromJS(data: any): ActivityHistoryItem {
        data = typeof data === 'object' ? data : {};
        let result = new ActivityHistoryItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activeDurationSeconds"] = this.activeDurationSeconds;
        data["activity"] = this.activity ? this.activity.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        data["lastActiveDateTime"] = this.lastActiveDateTime ? this.lastActiveDateTime.toISOString() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["startedDateTime"] = this.startedDateTime ? this.startedDateTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        data["userTimezone"] = this.userTimezone;
        super.toJSON(data);
        return data;
    }
}

export interface IActivityHistoryItem extends IEntity {
    /** Optional. The duration of active user engagement. if not supplied, this is calculated from the startedDateTime and lastActiveDateTime. */
    activeDurationSeconds?: number | undefined;
    /** The activity property */
    activity?: UserActivity | undefined;
    /** Set by the server. DateTime in UTC when the object was created on the server. */
    createdDateTime?: Date | undefined;
    /** Optional. UTC DateTime when the activityHistoryItem will undergo hard-delete. Can be set by the client. */
    expirationDateTime?: Date | undefined;
    /** Optional. UTC DateTime when the activityHistoryItem (activity session) was last understood as active or finished - if null, activityHistoryItem status should be Ongoing. */
    lastActiveDateTime?: Date | undefined;
    /** Set by the server. DateTime in UTC when the object was modified on the server. */
    lastModifiedDateTime?: Date | undefined;
    /** Required. UTC DateTime when the activityHistoryItem (activity session) was started. Required for timeline history. */
    startedDateTime?: Date | undefined;
    /** Set by the server. A status code used to identify valid objects. Values: active, updated, deleted, ignored. */
    status?: Status | undefined;
    /** Optional. The timezone in which the user's device used to generate the activity was located at activity creation time. Values supplied as Olson IDs in order to support cross-platform representation. */
    userTimezone?: string | undefined;
}

export enum Status {
    Active = 0,
    Updated = 1,
    Deleted = 2,
    Ignored = 3,
    UnknownFutureValue = 4,
}

export class VisualInfo implements IVisualInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Optional. JSON object used to represent an icon which represents the application used to generate the activity */
    attribution?: ImageInfo | undefined;
    /** Optional. Background color used to render the activity in the UI - brand color for the application source of the activity. Must be a valid hex color */
    backgroundColor?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional. Custom piece of data - JSON object used to provide custom content to render the activity in the Windows Shell UI */
    content?: UntypedNode | undefined;
    /** Optional. Longer text description of the user's unique activity (example: document name, first sentence, and/or metadata) */
    description?: string | undefined;
    /** Required. Short text description of the user's unique activity (for example, document name in cases where an activity refers to document creation) */
    displayText?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IVisualInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.attribution = _data["attribution"] ? ImageInfo.fromJS(_data["attribution"]) : <any>undefined;
            this.backgroundColor = _data["backgroundColor"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.content = _data["content"] ? UntypedNode.fromJS(_data["content"]) : <any>undefined;
            this.description = _data["description"];
            this.displayText = _data["displayText"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): VisualInfo {
        data = typeof data === 'object' ? data : {};
        let result = new VisualInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["attribution"] = this.attribution ? this.attribution.toJSON() : <any>undefined;
        data["backgroundColor"] = this.backgroundColor;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["content"] = this.content ? this.content.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["displayText"] = this.displayText;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IVisualInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Optional. JSON object used to represent an icon which represents the application used to generate the activity */
    attribution?: ImageInfo | undefined;
    /** Optional. Background color used to render the activity in the UI - brand color for the application source of the activity. Must be a valid hex color */
    backgroundColor?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional. Custom piece of data - JSON object used to provide custom content to render the activity in the Windows Shell UI */
    content?: UntypedNode | undefined;
    /** Optional. Longer text description of the user's unique activity (example: document name, first sentence, and/or metadata) */
    description?: string | undefined;
    /** Required. Short text description of the user's unique activity (for example, document name in cases where an activity refers to document creation) */
    displayText?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ImageInfo implements IImageInfo {
    /** Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For example – a high contrast image */
    addImageQuery?: boolean | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Optional; alt-text accessible content for the image */
    alternateText?: string | undefined;
    /** The alternativeText property */
    alternativeText?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional; URI that points to an icon which represents the application used to generate the activity */
    iconUrl?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IImageInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addImageQuery = _data["addImageQuery"];
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.alternateText = _data["alternateText"];
            this.alternativeText = _data["alternativeText"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.iconUrl = _data["iconUrl"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ImageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ImageInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addImageQuery"] = this.addImageQuery;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["alternateText"] = this.alternateText;
        data["alternativeText"] = this.alternativeText;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["iconUrl"] = this.iconUrl;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IImageInfo {
    /** Optional; parameter used to indicate the server is able to render image dynamically in response to parameterization. For example – a high contrast image */
    addImageQuery?: boolean | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Optional; alt-text accessible content for the image */
    alternateText?: string | undefined;
    /** The alternativeText property */
    alternativeText?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional; URI that points to an icon which represents the application used to generate the activity */
    iconUrl?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class AgreementAcceptance extends Entity implements IAgreementAcceptance {
    /** The identifier of the agreement file accepted by the user. */
    agreementFileId?: string | undefined;
    /** The identifier of the agreement. */
    agreementId?: string | undefined;
    /** The display name of the device used for accepting the agreement. */
    deviceDisplayName?: string | undefined;
    /** The unique identifier of the device used for accepting the agreement. Supports $filter (eq) and eq for null values. */
    deviceId?: string | undefined;
    /** The operating system used to accept the agreement. */
    deviceOSType?: string | undefined;
    /** The operating system version of the device used to accept the agreement. */
    deviceOSVersion?: string | undefined;
    /** The expiration date time of the acceptance. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ge, le) and eq for null values. */
    expirationDateTime?: Date | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    recordedDateTime?: Date | undefined;
    /** The state of the agreement acceptance. Possible values are: accepted, declined. Supports $filter (eq). */
    state?: AgreementAcceptanceState | undefined;
    /** Display name of the user when the acceptance was recorded. */
    userDisplayName?: string | undefined;
    /** Email of the user when the acceptance was recorded. */
    userEmail?: string | undefined;
    /** The identifier of the user who accepted the agreement. Supports $filter (eq). */
    userId?: string | undefined;
    /** UPN of the user when the acceptance was recorded. */
    userPrincipalName?: string | undefined;

    constructor(data?: IAgreementAcceptance) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.agreementFileId = _data["agreementFileId"];
            this.agreementId = _data["agreementId"];
            this.deviceDisplayName = _data["deviceDisplayName"];
            this.deviceId = _data["deviceId"];
            this.deviceOSType = _data["deviceOSType"];
            this.deviceOSVersion = _data["deviceOSVersion"];
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            this.recordedDateTime = _data["recordedDateTime"] ? new Date(_data["recordedDateTime"].toString()) : <any>undefined;
            this.state = _data["state"];
            this.userDisplayName = _data["userDisplayName"];
            this.userEmail = _data["userEmail"];
            this.userId = _data["userId"];
            this.userPrincipalName = _data["userPrincipalName"];
        }
    }

    static override fromJS(data: any): AgreementAcceptance {
        data = typeof data === 'object' ? data : {};
        let result = new AgreementAcceptance();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["agreementFileId"] = this.agreementFileId;
        data["agreementId"] = this.agreementId;
        data["deviceDisplayName"] = this.deviceDisplayName;
        data["deviceId"] = this.deviceId;
        data["deviceOSType"] = this.deviceOSType;
        data["deviceOSVersion"] = this.deviceOSVersion;
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        data["recordedDateTime"] = this.recordedDateTime ? this.recordedDateTime.toISOString() : <any>undefined;
        data["state"] = this.state;
        data["userDisplayName"] = this.userDisplayName;
        data["userEmail"] = this.userEmail;
        data["userId"] = this.userId;
        data["userPrincipalName"] = this.userPrincipalName;
        super.toJSON(data);
        return data;
    }
}

export interface IAgreementAcceptance extends IEntity {
    /** The identifier of the agreement file accepted by the user. */
    agreementFileId?: string | undefined;
    /** The identifier of the agreement. */
    agreementId?: string | undefined;
    /** The display name of the device used for accepting the agreement. */
    deviceDisplayName?: string | undefined;
    /** The unique identifier of the device used for accepting the agreement. Supports $filter (eq) and eq for null values. */
    deviceId?: string | undefined;
    /** The operating system used to accept the agreement. */
    deviceOSType?: string | undefined;
    /** The operating system version of the device used to accept the agreement. */
    deviceOSVersion?: string | undefined;
    /** The expiration date time of the acceptance. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Supports $filter (eq, ge, le) and eq for null values. */
    expirationDateTime?: Date | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    recordedDateTime?: Date | undefined;
    /** The state of the agreement acceptance. Possible values are: accepted, declined. Supports $filter (eq). */
    state?: AgreementAcceptanceState | undefined;
    /** Display name of the user when the acceptance was recorded. */
    userDisplayName?: string | undefined;
    /** Email of the user when the acceptance was recorded. */
    userEmail?: string | undefined;
    /** The identifier of the user who accepted the agreement. Supports $filter (eq). */
    userId?: string | undefined;
    /** UPN of the user when the acceptance was recorded. */
    userPrincipalName?: string | undefined;
}

export enum AgreementAcceptanceState {
    Accepted = 0,
    Declined = 1,
    UnknownFutureValue = 2,
}

export class AppRoleAssignment extends DirectoryObject implements IAppRoleAssignment {
    /** The identifier (id) for the app role that's assigned to the principal. This app role must be exposed in the appRoles property on the resource application's service principal (resourceId). If the resource application hasn't declared any app roles, a default app role ID of 00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to the resource app without any specific app roles. Required on create. */
    appRoleId?: string | undefined;
    /** The time when the app role assignment was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    createdDateTime?: Date | undefined;
    /** The display name of the user, group, or service principal that was granted the app role assignment. Read-only. Supports $filter (eq and startswith). */
    principalDisplayName?: string | undefined;
    /** The unique identifier (id) for the user, security group, or service principal being granted the app role. Security groups with dynamic memberships are supported. Required on create. */
    principalId?: string | undefined;
    /** The type of the assigned principal. This can either be User, Group, or ServicePrincipal. Read-only. */
    principalType?: string | undefined;
    /** The display name of the resource app's service principal to which the assignment is made. */
    resourceDisplayName?: string | undefined;
    /** The unique identifier (id) for the resource service principal for which the assignment is made. Required on create. Supports $filter (eq only). */
    resourceId?: string | undefined;

    constructor(data?: IAppRoleAssignment) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.appRoleId = _data["appRoleId"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.principalDisplayName = _data["principalDisplayName"];
            this.principalId = _data["principalId"];
            this.principalType = _data["principalType"];
            this.resourceDisplayName = _data["resourceDisplayName"];
            this.resourceId = _data["resourceId"];
        }
    }

    static override fromJS(data: any): AppRoleAssignment {
        data = typeof data === 'object' ? data : {};
        let result = new AppRoleAssignment();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appRoleId"] = this.appRoleId;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["principalDisplayName"] = this.principalDisplayName;
        data["principalId"] = this.principalId;
        data["principalType"] = this.principalType;
        data["resourceDisplayName"] = this.resourceDisplayName;
        data["resourceId"] = this.resourceId;
        super.toJSON(data);
        return data;
    }
}

export interface IAppRoleAssignment extends IDirectoryObject {
    /** The identifier (id) for the app role that's assigned to the principal. This app role must be exposed in the appRoles property on the resource application's service principal (resourceId). If the resource application hasn't declared any app roles, a default app role ID of 00000000-0000-0000-0000-000000000000 can be specified to signal that the principal is assigned to the resource app without any specific app roles. Required on create. */
    appRoleId?: string | undefined;
    /** The time when the app role assignment was created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    createdDateTime?: Date | undefined;
    /** The display name of the user, group, or service principal that was granted the app role assignment. Read-only. Supports $filter (eq and startswith). */
    principalDisplayName?: string | undefined;
    /** The unique identifier (id) for the user, security group, or service principal being granted the app role. Security groups with dynamic memberships are supported. Required on create. */
    principalId?: string | undefined;
    /** The type of the assigned principal. This can either be User, Group, or ServicePrincipal. Read-only. */
    principalType?: string | undefined;
    /** The display name of the resource app's service principal to which the assignment is made. */
    resourceDisplayName?: string | undefined;
    /** The unique identifier (id) for the resource service principal for which the assignment is made. Required on create. Supports $filter (eq only). */
    resourceId?: string | undefined;
}

export class AssignedLicense implements IAssignedLicense {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A collection of the unique identifiers for plans that have been disabled. IDs are available in servicePlans > servicePlanId in the tenant's subscribedSkus or serviceStatus > servicePlanId in the tenant's companySubscription. */
    disabledPlans?: (string | undefined)[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The unique identifier for the SKU. Corresponds to the skuId from subscribedSkus or companySubscription. */
    skuId?: string | undefined;

    constructor(data?: IAssignedLicense) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            if (Array.isArray(_data["disabledPlans"])) {
                this.disabledPlans = [] as any;
                for (let item of _data["disabledPlans"])
                    this.disabledPlans!.push(item);
            }
            this.odataType = _data["odataType"];
            this.skuId = _data["skuId"];
        }
    }

    static fromJS(data: any): AssignedLicense {
        data = typeof data === 'object' ? data : {};
        let result = new AssignedLicense();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        if (Array.isArray(this.disabledPlans)) {
            data["disabledPlans"] = [];
            for (let item of this.disabledPlans)
                data["disabledPlans"].push(item);
        }
        data["odataType"] = this.odataType;
        data["skuId"] = this.skuId;
        return data;
    }
}

export interface IAssignedLicense {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A collection of the unique identifiers for plans that have been disabled. IDs are available in servicePlans > servicePlanId in the tenant's subscribedSkus or serviceStatus > servicePlanId in the tenant's companySubscription. */
    disabledPlans?: (string | undefined)[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The unique identifier for the SKU. Corresponds to the skuId from subscribedSkus or companySubscription. */
    skuId?: string | undefined;
}

export class AssignedPlan implements IAssignedPlan {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The date and time at which the plan was assigned. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    assignedDateTime?: Date | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value. */
    capabilityStatus?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The name of the service; for example, exchange. */
    service?: string | undefined;
    /** A GUID that identifies the service plan. For a complete list of GUIDs and their equivalent friendly service names, see Product names and service plan identifiers for licensing. */
    servicePlanId?: string | undefined;

    constructor(data?: IAssignedPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.assignedDateTime = _data["assignedDateTime"] ? new Date(_data["assignedDateTime"].toString()) : <any>undefined;
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.capabilityStatus = _data["capabilityStatus"];
            this.odataType = _data["odataType"];
            this.service = _data["service"];
            this.servicePlanId = _data["servicePlanId"];
        }
    }

    static fromJS(data: any): AssignedPlan {
        data = typeof data === 'object' ? data : {};
        let result = new AssignedPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["assignedDateTime"] = this.assignedDateTime ? this.assignedDateTime.toISOString() : <any>undefined;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["capabilityStatus"] = this.capabilityStatus;
        data["odataType"] = this.odataType;
        data["service"] = this.service;
        data["servicePlanId"] = this.servicePlanId;
        return data;
    }
}

export interface IAssignedPlan {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The date and time at which the plan was assigned. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    assignedDateTime?: Date | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value. */
    capabilityStatus?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The name of the service; for example, exchange. */
    service?: string | undefined;
    /** A GUID that identifies the service plan. For a complete list of GUIDs and their equivalent friendly service names, see Product names and service plan identifiers for licensing. */
    servicePlanId?: string | undefined;
}

export class Authentication extends Entity implements IAuthentication {
    /** The email address registered to a user for authentication. */
    emailMethods?: EmailAuthenticationMethod[] | undefined;
    /** Represents the FIDO2 security keys registered to a user for authentication. */
    fido2Methods?: Fido2AuthenticationMethod[] | undefined;
    /** Represents all authentication methods registered to a user. */
    methods?: AuthenticationMethod[] | undefined;
    /** The details of the Microsoft Authenticator app registered to a user for authentication. */
    microsoftAuthenticatorMethods?: MicrosoftAuthenticatorAuthenticationMethod[] | undefined;
    /** Represents the status of a long-running operation, such as a password reset operation. */
    operations?: LongRunningOperation[] | undefined;
    /** Represents the password registered to a user for authentication. For security, the password itself is never returned in the object, but action can be taken to reset a password. */
    passwordMethods?: PasswordAuthenticationMethod[] | undefined;
    /** The phone numbers registered to a user for authentication. */
    phoneMethods?: PhoneAuthenticationMethod[] | undefined;
    /** The software OATH time-based one-time password (TOTP) applications registered to a user for authentication. */
    softwareOathMethods?: SoftwareOathAuthenticationMethod[] | undefined;
    /** Represents a Temporary Access Pass registered to a user for authentication through time-limited passcodes. */
    temporaryAccessPassMethods?: TemporaryAccessPassAuthenticationMethod[] | undefined;
    /** Represents the Windows Hello for Business authentication method registered to a user for authentication. */
    windowsHelloForBusinessMethods?: WindowsHelloForBusinessAuthenticationMethod[] | undefined;

    constructor(data?: IAuthentication) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["emailMethods"])) {
                this.emailMethods = [] as any;
                for (let item of _data["emailMethods"])
                    this.emailMethods!.push(EmailAuthenticationMethod.fromJS(item));
            }
            if (Array.isArray(_data["fido2Methods"])) {
                this.fido2Methods = [] as any;
                for (let item of _data["fido2Methods"])
                    this.fido2Methods!.push(Fido2AuthenticationMethod.fromJS(item));
            }
            if (Array.isArray(_data["methods"])) {
                this.methods = [] as any;
                for (let item of _data["methods"])
                    this.methods!.push(AuthenticationMethod.fromJS(item));
            }
            if (Array.isArray(_data["microsoftAuthenticatorMethods"])) {
                this.microsoftAuthenticatorMethods = [] as any;
                for (let item of _data["microsoftAuthenticatorMethods"])
                    this.microsoftAuthenticatorMethods!.push(MicrosoftAuthenticatorAuthenticationMethod.fromJS(item));
            }
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(LongRunningOperation.fromJS(item));
            }
            if (Array.isArray(_data["passwordMethods"])) {
                this.passwordMethods = [] as any;
                for (let item of _data["passwordMethods"])
                    this.passwordMethods!.push(PasswordAuthenticationMethod.fromJS(item));
            }
            if (Array.isArray(_data["phoneMethods"])) {
                this.phoneMethods = [] as any;
                for (let item of _data["phoneMethods"])
                    this.phoneMethods!.push(PhoneAuthenticationMethod.fromJS(item));
            }
            if (Array.isArray(_data["softwareOathMethods"])) {
                this.softwareOathMethods = [] as any;
                for (let item of _data["softwareOathMethods"])
                    this.softwareOathMethods!.push(SoftwareOathAuthenticationMethod.fromJS(item));
            }
            if (Array.isArray(_data["temporaryAccessPassMethods"])) {
                this.temporaryAccessPassMethods = [] as any;
                for (let item of _data["temporaryAccessPassMethods"])
                    this.temporaryAccessPassMethods!.push(TemporaryAccessPassAuthenticationMethod.fromJS(item));
            }
            if (Array.isArray(_data["windowsHelloForBusinessMethods"])) {
                this.windowsHelloForBusinessMethods = [] as any;
                for (let item of _data["windowsHelloForBusinessMethods"])
                    this.windowsHelloForBusinessMethods!.push(WindowsHelloForBusinessAuthenticationMethod.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Authentication {
        data = typeof data === 'object' ? data : {};
        let result = new Authentication();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.emailMethods)) {
            data["emailMethods"] = [];
            for (let item of this.emailMethods)
                data["emailMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.fido2Methods)) {
            data["fido2Methods"] = [];
            for (let item of this.fido2Methods)
                data["fido2Methods"].push(item.toJSON());
        }
        if (Array.isArray(this.methods)) {
            data["methods"] = [];
            for (let item of this.methods)
                data["methods"].push(item.toJSON());
        }
        if (Array.isArray(this.microsoftAuthenticatorMethods)) {
            data["microsoftAuthenticatorMethods"] = [];
            for (let item of this.microsoftAuthenticatorMethods)
                data["microsoftAuthenticatorMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        if (Array.isArray(this.passwordMethods)) {
            data["passwordMethods"] = [];
            for (let item of this.passwordMethods)
                data["passwordMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.phoneMethods)) {
            data["phoneMethods"] = [];
            for (let item of this.phoneMethods)
                data["phoneMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.softwareOathMethods)) {
            data["softwareOathMethods"] = [];
            for (let item of this.softwareOathMethods)
                data["softwareOathMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.temporaryAccessPassMethods)) {
            data["temporaryAccessPassMethods"] = [];
            for (let item of this.temporaryAccessPassMethods)
                data["temporaryAccessPassMethods"].push(item.toJSON());
        }
        if (Array.isArray(this.windowsHelloForBusinessMethods)) {
            data["windowsHelloForBusinessMethods"] = [];
            for (let item of this.windowsHelloForBusinessMethods)
                data["windowsHelloForBusinessMethods"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IAuthentication extends IEntity {
    /** The email address registered to a user for authentication. */
    emailMethods?: EmailAuthenticationMethod[] | undefined;
    /** Represents the FIDO2 security keys registered to a user for authentication. */
    fido2Methods?: Fido2AuthenticationMethod[] | undefined;
    /** Represents all authentication methods registered to a user. */
    methods?: AuthenticationMethod[] | undefined;
    /** The details of the Microsoft Authenticator app registered to a user for authentication. */
    microsoftAuthenticatorMethods?: MicrosoftAuthenticatorAuthenticationMethod[] | undefined;
    /** Represents the status of a long-running operation, such as a password reset operation. */
    operations?: LongRunningOperation[] | undefined;
    /** Represents the password registered to a user for authentication. For security, the password itself is never returned in the object, but action can be taken to reset a password. */
    passwordMethods?: PasswordAuthenticationMethod[] | undefined;
    /** The phone numbers registered to a user for authentication. */
    phoneMethods?: PhoneAuthenticationMethod[] | undefined;
    /** The software OATH time-based one-time password (TOTP) applications registered to a user for authentication. */
    softwareOathMethods?: SoftwareOathAuthenticationMethod[] | undefined;
    /** Represents a Temporary Access Pass registered to a user for authentication through time-limited passcodes. */
    temporaryAccessPassMethods?: TemporaryAccessPassAuthenticationMethod[] | undefined;
    /** Represents the Windows Hello for Business authentication method registered to a user for authentication. */
    windowsHelloForBusinessMethods?: WindowsHelloForBusinessAuthenticationMethod[] | undefined;
}

export class AuthenticationMethod extends Entity implements IAuthenticationMethod {

    constructor(data?: IAuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): AuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IAuthenticationMethod extends IEntity {
}

export class EmailAuthenticationMethod extends AuthenticationMethod implements IEmailAuthenticationMethod {
    /** The email address registered to this user. */
    emailAddress?: string | undefined;

    constructor(data?: IEmailAuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.emailAddress = _data["emailAddress"];
        }
    }

    static override fromJS(data: any): EmailAuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new EmailAuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emailAddress"] = this.emailAddress;
        super.toJSON(data);
        return data;
    }
}

export interface IEmailAuthenticationMethod extends IAuthenticationMethod {
    /** The email address registered to this user. */
    emailAddress?: string | undefined;
}

export class Fido2AuthenticationMethod extends AuthenticationMethod implements IFido2AuthenticationMethod {
    /** Authenticator Attestation GUID, an identifier that indicates the type (e.g. make and model) of the authenticator. */
    aaGuid?: string | undefined;
    /** The attestation certificate(s) attached to this security key. */
    attestationCertificates?: string[] | undefined;
    /** The attestation level of this FIDO2 security key. Possible values are: attested, or notAttested. */
    attestationLevel?: AttestationLevel | undefined;
    /** The timestamp when this key was registered to the user. */
    createdDateTime?: Date | undefined;
    /** The display name of the key as given by the user. */
    displayName?: string | undefined;
    /** The manufacturer-assigned model of the FIDO2 security key. */
    model?: string | undefined;

    constructor(data?: IFido2AuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.aaGuid = _data["aaGuid"];
            if (Array.isArray(_data["attestationCertificates"])) {
                this.attestationCertificates = [] as any;
                for (let item of _data["attestationCertificates"])
                    this.attestationCertificates!.push(item);
            }
            this.attestationLevel = _data["attestationLevel"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.displayName = _data["displayName"];
            this.model = _data["model"];
        }
    }

    static override fromJS(data: any): Fido2AuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new Fido2AuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aaGuid"] = this.aaGuid;
        if (Array.isArray(this.attestationCertificates)) {
            data["attestationCertificates"] = [];
            for (let item of this.attestationCertificates)
                data["attestationCertificates"].push(item);
        }
        data["attestationLevel"] = this.attestationLevel;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["displayName"] = this.displayName;
        data["model"] = this.model;
        super.toJSON(data);
        return data;
    }
}

export interface IFido2AuthenticationMethod extends IAuthenticationMethod {
    /** Authenticator Attestation GUID, an identifier that indicates the type (e.g. make and model) of the authenticator. */
    aaGuid?: string | undefined;
    /** The attestation certificate(s) attached to this security key. */
    attestationCertificates?: string[] | undefined;
    /** The attestation level of this FIDO2 security key. Possible values are: attested, or notAttested. */
    attestationLevel?: AttestationLevel | undefined;
    /** The timestamp when this key was registered to the user. */
    createdDateTime?: Date | undefined;
    /** The display name of the key as given by the user. */
    displayName?: string | undefined;
    /** The manufacturer-assigned model of the FIDO2 security key. */
    model?: string | undefined;
}

export enum AttestationLevel {
    Attested = 0,
    NotAttested = 1,
    UnknownFutureValue = 2,
}

export class MicrosoftAuthenticatorAuthenticationMethod extends AuthenticationMethod implements IMicrosoftAuthenticatorAuthenticationMethod {
    /** The date and time that this app was registered. This property is null if the device isn't registered for passwordless Phone Sign-In. */
    createdDateTime?: Date | undefined;
    /** The registered device on which Microsoft Authenticator resides. This property is null if the device isn't registered for passwordless Phone Sign-In. */
    device?: Device | undefined;
    /** Tags containing app metadata. */
    deviceTag?: string | undefined;
    /** The name of the device on which this app is registered. */
    displayName?: string | undefined;
    /** Numerical version of this instance of the Authenticator app. */
    phoneAppVersion?: string | undefined;

    constructor(data?: IMicrosoftAuthenticatorAuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.device = _data["device"] ? Device.fromJS(_data["device"]) : <any>undefined;
            this.deviceTag = _data["deviceTag"];
            this.displayName = _data["displayName"];
            this.phoneAppVersion = _data["phoneAppVersion"];
        }
    }

    static override fromJS(data: any): MicrosoftAuthenticatorAuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new MicrosoftAuthenticatorAuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["device"] = this.device ? this.device.toJSON() : <any>undefined;
        data["deviceTag"] = this.deviceTag;
        data["displayName"] = this.displayName;
        data["phoneAppVersion"] = this.phoneAppVersion;
        super.toJSON(data);
        return data;
    }
}

export interface IMicrosoftAuthenticatorAuthenticationMethod extends IAuthenticationMethod {
    /** The date and time that this app was registered. This property is null if the device isn't registered for passwordless Phone Sign-In. */
    createdDateTime?: Date | undefined;
    /** The registered device on which Microsoft Authenticator resides. This property is null if the device isn't registered for passwordless Phone Sign-In. */
    device?: Device | undefined;
    /** Tags containing app metadata. */
    deviceTag?: string | undefined;
    /** The name of the device on which this app is registered. */
    displayName?: string | undefined;
    /** Numerical version of this instance of the Authenticator app. */
    phoneAppVersion?: string | undefined;
}

export class Device extends DirectoryObject implements IDevice {
    /** true if the account is enabled; otherwise, false. Required. Default is true.  Supports $filter (eq, ne, not, in). Only callers with at least the Cloud Device Administrator role can set this property. */
    accountEnabled?: boolean | undefined;
    /** For internal use only. Not nullable. Supports $filter (eq, not, ge, le). */
    alternativeSecurityIds?: AlternativeSecurityId[] | undefined;
    /** The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Supports $filter (eq, ne, not, ge, le, and eq on null values) and $orderby. */
    approximateLastSignInDateTime?: Date | undefined;
    /** The timestamp when the device is no longer deemed compliant. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    complianceExpirationDateTime?: Date | undefined;
    /** User-defined property set by Intune to automatically add devices to groups and simplify managing devices. */
    deviceCategory?: string | undefined;
    /** Unique identifier set by Azure Device Registration Service at the time of registration. This alternate key can be used to reference the device object. Supports $filter (eq, ne, not, startsWith). */
    deviceId?: string | undefined;
    /** For internal use only. Set to null. */
    deviceMetadata?: string | undefined;
    /** Ownership of the device. Intune sets this property. Possible values are: unknown, company, personal. */
    deviceOwnership?: string | undefined;
    /** For internal use only. */
    deviceVersion?: number | undefined;
    /** The display name for the device. Required. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby. */
    displayName?: string | undefined;
    /** Enrollment profile applied to the device. For example, Apple Device Enrollment Profile, Device enrollment - Corporate device identifiers, or Windows Autopilot profile name. This property is set by Intune. */
    enrollmentProfileName?: string | undefined;
    /** Enrollment type of the device. Intune sets this property. Possible values are: unknown, userEnrollment, deviceEnrollmentManager, appleBulkWithUser, appleBulkWithoutUser, windowsAzureADJoin, windowsBulkUserless, windowsAutoEnrollment, windowsBulkAzureDomainJoin, windowsCoManagement, windowsAzureADJoinUsingDeviceAuth,appleUserEnrollment, appleUserEnrollmentWithServiceAccount. NOTE: This property might return other values apart from those listed. */
    enrollmentType?: string | undefined;
    /** The collection of open extensions defined for the device. Read-only. Nullable. */
    extensions?: Extension[] | undefined;
    /** true if the device complies with Mobile Device Management (MDM) policies; otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not). */
    isCompliant?: boolean | undefined;
    /** true if the device is managed by a Mobile Device Management (MDM) app; otherwise, false. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not). */
    isManaged?: boolean | undefined;
    /** The isManagementRestricted property */
    isManagementRestricted?: boolean | undefined;
    /** true if the device is rooted or jail-broken. This property can only be updated by Intune. */
    isRooted?: boolean | undefined;
    /** The management channel of the device. This property is set by Intune. Possible values are: eas, mdm, easMdm, intuneClient, easIntuneClient, configurationManagerClient, configurationManagerClientMdm, configurationManagerClientMdmEas, unknown, jamf, googleCloudDevicePolicyController. */
    managementType?: string | undefined;
    /** Manufacturer of the device. Read-only. */
    manufacturer?: string | undefined;
    /** Application identifier used to register device into MDM. Read-only. Supports $filter (eq, ne, not, startsWith). */
    mdmAppId?: string | undefined;
    /** Groups and administrative units that this device is a member of. Read-only. Nullable. Supports $expand. */
    memberOf?: DirectoryObject[] | undefined;
    /** Model of the device. Read-only. */
    model?: string | undefined;
    /** The last time at which the object was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Read-only. Supports $filter (eq, ne, not, ge, le, in). */
    onPremisesLastSyncDateTime?: Date | undefined;
    /** The on-premises security identifier (SID) for the user who was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq). */
    onPremisesSecurityIdentifier?: string | undefined;
    /** true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Supports $filter (eq, ne, not, in, and eq on null values). */
    onPremisesSyncEnabled?: boolean | undefined;
    /** The type of operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values). */
    operatingSystem?: string | undefined;
    /** The version of the operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values). */
    operatingSystemVersion?: string | undefined;
    /** For internal use only. Not nullable. Supports $filter (eq, not, ge, le, startsWith,/$count eq 0, /$count ne 0). */
    physicalIds?: string[] | undefined;
    /** The profile type of the device. Possible values: RegisteredDevice (default), SecureVM, Printer, Shared, IoT. */
    profileType?: string | undefined;
    /** The user that cloud joined the device or registered their personal device. The registered owner is set at the time of registration. Read-only. Nullable. Supports $expand. */
    registeredOwners?: DirectoryObject[] | undefined;
    /** Collection of registered users of the device. For cloud joined devices and registered personal devices, registered users are set to the same value as registered owners at the time of registration. Read-only. Nullable. Supports $expand. */
    registeredUsers?: DirectoryObject[] | undefined;
    /** Date and time of when the device was registered. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    registrationDateTime?: Date | undefined;
    /** List of labels applied to the device by the system. Supports $filter (/$count eq 0, /$count ne 0). */
    systemLabels?: string[] | undefined;
    /** Groups and administrative units that the device is a member of. This operation is transitive. Supports $expand. */
    transitiveMemberOf?: DirectoryObject[] | undefined;
    /** Type of trust for the joined device. Read-only. Possible values:  Workplace (indicates bring your own personal devices), AzureAd (Cloud-only joined devices), ServerAd (on-premises domain joined devices joined to Microsoft Entra ID). For more information, see Introduction to device management in Microsoft Entra ID. */
    trustType?: string | undefined;

    constructor(data?: IDevice) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.accountEnabled = _data["accountEnabled"];
            if (Array.isArray(_data["alternativeSecurityIds"])) {
                this.alternativeSecurityIds = [] as any;
                for (let item of _data["alternativeSecurityIds"])
                    this.alternativeSecurityIds!.push(AlternativeSecurityId.fromJS(item));
            }
            this.approximateLastSignInDateTime = _data["approximateLastSignInDateTime"] ? new Date(_data["approximateLastSignInDateTime"].toString()) : <any>undefined;
            this.complianceExpirationDateTime = _data["complianceExpirationDateTime"] ? new Date(_data["complianceExpirationDateTime"].toString()) : <any>undefined;
            this.deviceCategory = _data["deviceCategory"];
            this.deviceId = _data["deviceId"];
            this.deviceMetadata = _data["deviceMetadata"];
            this.deviceOwnership = _data["deviceOwnership"];
            this.deviceVersion = _data["deviceVersion"];
            this.displayName = _data["displayName"];
            this.enrollmentProfileName = _data["enrollmentProfileName"];
            this.enrollmentType = _data["enrollmentType"];
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            this.isCompliant = _data["isCompliant"];
            this.isManaged = _data["isManaged"];
            this.isManagementRestricted = _data["isManagementRestricted"];
            this.isRooted = _data["isRooted"];
            this.managementType = _data["managementType"];
            this.manufacturer = _data["manufacturer"];
            this.mdmAppId = _data["mdmAppId"];
            if (Array.isArray(_data["memberOf"])) {
                this.memberOf = [] as any;
                for (let item of _data["memberOf"])
                    this.memberOf!.push(DirectoryObject.fromJS(item));
            }
            this.model = _data["model"];
            this.onPremisesLastSyncDateTime = _data["onPremisesLastSyncDateTime"] ? new Date(_data["onPremisesLastSyncDateTime"].toString()) : <any>undefined;
            this.onPremisesSecurityIdentifier = _data["onPremisesSecurityIdentifier"];
            this.onPremisesSyncEnabled = _data["onPremisesSyncEnabled"];
            this.operatingSystem = _data["operatingSystem"];
            this.operatingSystemVersion = _data["operatingSystemVersion"];
            if (Array.isArray(_data["physicalIds"])) {
                this.physicalIds = [] as any;
                for (let item of _data["physicalIds"])
                    this.physicalIds!.push(item);
            }
            this.profileType = _data["profileType"];
            if (Array.isArray(_data["registeredOwners"])) {
                this.registeredOwners = [] as any;
                for (let item of _data["registeredOwners"])
                    this.registeredOwners!.push(DirectoryObject.fromJS(item));
            }
            if (Array.isArray(_data["registeredUsers"])) {
                this.registeredUsers = [] as any;
                for (let item of _data["registeredUsers"])
                    this.registeredUsers!.push(DirectoryObject.fromJS(item));
            }
            this.registrationDateTime = _data["registrationDateTime"] ? new Date(_data["registrationDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["systemLabels"])) {
                this.systemLabels = [] as any;
                for (let item of _data["systemLabels"])
                    this.systemLabels!.push(item);
            }
            if (Array.isArray(_data["transitiveMemberOf"])) {
                this.transitiveMemberOf = [] as any;
                for (let item of _data["transitiveMemberOf"])
                    this.transitiveMemberOf!.push(DirectoryObject.fromJS(item));
            }
            this.trustType = _data["trustType"];
        }
    }

    static override fromJS(data: any): Device {
        data = typeof data === 'object' ? data : {};
        let result = new Device();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountEnabled"] = this.accountEnabled;
        if (Array.isArray(this.alternativeSecurityIds)) {
            data["alternativeSecurityIds"] = [];
            for (let item of this.alternativeSecurityIds)
                data["alternativeSecurityIds"].push(item.toJSON());
        }
        data["approximateLastSignInDateTime"] = this.approximateLastSignInDateTime ? this.approximateLastSignInDateTime.toISOString() : <any>undefined;
        data["complianceExpirationDateTime"] = this.complianceExpirationDateTime ? this.complianceExpirationDateTime.toISOString() : <any>undefined;
        data["deviceCategory"] = this.deviceCategory;
        data["deviceId"] = this.deviceId;
        data["deviceMetadata"] = this.deviceMetadata;
        data["deviceOwnership"] = this.deviceOwnership;
        data["deviceVersion"] = this.deviceVersion;
        data["displayName"] = this.displayName;
        data["enrollmentProfileName"] = this.enrollmentProfileName;
        data["enrollmentType"] = this.enrollmentType;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        data["isCompliant"] = this.isCompliant;
        data["isManaged"] = this.isManaged;
        data["isManagementRestricted"] = this.isManagementRestricted;
        data["isRooted"] = this.isRooted;
        data["managementType"] = this.managementType;
        data["manufacturer"] = this.manufacturer;
        data["mdmAppId"] = this.mdmAppId;
        if (Array.isArray(this.memberOf)) {
            data["memberOf"] = [];
            for (let item of this.memberOf)
                data["memberOf"].push(item.toJSON());
        }
        data["model"] = this.model;
        data["onPremisesLastSyncDateTime"] = this.onPremisesLastSyncDateTime ? this.onPremisesLastSyncDateTime.toISOString() : <any>undefined;
        data["onPremisesSecurityIdentifier"] = this.onPremisesSecurityIdentifier;
        data["onPremisesSyncEnabled"] = this.onPremisesSyncEnabled;
        data["operatingSystem"] = this.operatingSystem;
        data["operatingSystemVersion"] = this.operatingSystemVersion;
        if (Array.isArray(this.physicalIds)) {
            data["physicalIds"] = [];
            for (let item of this.physicalIds)
                data["physicalIds"].push(item);
        }
        data["profileType"] = this.profileType;
        if (Array.isArray(this.registeredOwners)) {
            data["registeredOwners"] = [];
            for (let item of this.registeredOwners)
                data["registeredOwners"].push(item.toJSON());
        }
        if (Array.isArray(this.registeredUsers)) {
            data["registeredUsers"] = [];
            for (let item of this.registeredUsers)
                data["registeredUsers"].push(item.toJSON());
        }
        data["registrationDateTime"] = this.registrationDateTime ? this.registrationDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.systemLabels)) {
            data["systemLabels"] = [];
            for (let item of this.systemLabels)
                data["systemLabels"].push(item);
        }
        if (Array.isArray(this.transitiveMemberOf)) {
            data["transitiveMemberOf"] = [];
            for (let item of this.transitiveMemberOf)
                data["transitiveMemberOf"].push(item.toJSON());
        }
        data["trustType"] = this.trustType;
        super.toJSON(data);
        return data;
    }
}

export interface IDevice extends IDirectoryObject {
    /** true if the account is enabled; otherwise, false. Required. Default is true.  Supports $filter (eq, ne, not, in). Only callers with at least the Cloud Device Administrator role can set this property. */
    accountEnabled?: boolean | undefined;
    /** For internal use only. Not nullable. Supports $filter (eq, not, ge, le). */
    alternativeSecurityIds?: AlternativeSecurityId[] | undefined;
    /** The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. Supports $filter (eq, ne, not, ge, le, and eq on null values) and $orderby. */
    approximateLastSignInDateTime?: Date | undefined;
    /** The timestamp when the device is no longer deemed compliant. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    complianceExpirationDateTime?: Date | undefined;
    /** User-defined property set by Intune to automatically add devices to groups and simplify managing devices. */
    deviceCategory?: string | undefined;
    /** Unique identifier set by Azure Device Registration Service at the time of registration. This alternate key can be used to reference the device object. Supports $filter (eq, ne, not, startsWith). */
    deviceId?: string | undefined;
    /** For internal use only. Set to null. */
    deviceMetadata?: string | undefined;
    /** Ownership of the device. Intune sets this property. Possible values are: unknown, company, personal. */
    deviceOwnership?: string | undefined;
    /** For internal use only. */
    deviceVersion?: number | undefined;
    /** The display name for the device. Required. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby. */
    displayName?: string | undefined;
    /** Enrollment profile applied to the device. For example, Apple Device Enrollment Profile, Device enrollment - Corporate device identifiers, or Windows Autopilot profile name. This property is set by Intune. */
    enrollmentProfileName?: string | undefined;
    /** Enrollment type of the device. Intune sets this property. Possible values are: unknown, userEnrollment, deviceEnrollmentManager, appleBulkWithUser, appleBulkWithoutUser, windowsAzureADJoin, windowsBulkUserless, windowsAutoEnrollment, windowsBulkAzureDomainJoin, windowsCoManagement, windowsAzureADJoinUsingDeviceAuth,appleUserEnrollment, appleUserEnrollmentWithServiceAccount. NOTE: This property might return other values apart from those listed. */
    enrollmentType?: string | undefined;
    /** The collection of open extensions defined for the device. Read-only. Nullable. */
    extensions?: Extension[] | undefined;
    /** true if the device complies with Mobile Device Management (MDM) policies; otherwise, false. Read-only. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not). */
    isCompliant?: boolean | undefined;
    /** true if the device is managed by a Mobile Device Management (MDM) app; otherwise, false. This can only be updated by Intune for any device OS type or by an approved MDM app for Windows OS devices. Supports $filter (eq, ne, not). */
    isManaged?: boolean | undefined;
    /** The isManagementRestricted property */
    isManagementRestricted?: boolean | undefined;
    /** true if the device is rooted or jail-broken. This property can only be updated by Intune. */
    isRooted?: boolean | undefined;
    /** The management channel of the device. This property is set by Intune. Possible values are: eas, mdm, easMdm, intuneClient, easIntuneClient, configurationManagerClient, configurationManagerClientMdm, configurationManagerClientMdmEas, unknown, jamf, googleCloudDevicePolicyController. */
    managementType?: string | undefined;
    /** Manufacturer of the device. Read-only. */
    manufacturer?: string | undefined;
    /** Application identifier used to register device into MDM. Read-only. Supports $filter (eq, ne, not, startsWith). */
    mdmAppId?: string | undefined;
    /** Groups and administrative units that this device is a member of. Read-only. Nullable. Supports $expand. */
    memberOf?: DirectoryObject[] | undefined;
    /** Model of the device. Read-only. */
    model?: string | undefined;
    /** The last time at which the object was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z Read-only. Supports $filter (eq, ne, not, ge, le, in). */
    onPremisesLastSyncDateTime?: Date | undefined;
    /** The on-premises security identifier (SID) for the user who was synchronized from on-premises to the cloud. Read-only. Returned only on $select. Supports $filter (eq). */
    onPremisesSecurityIdentifier?: string | undefined;
    /** true if this object is synced from an on-premises directory; false if this object was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Read-only. Supports $filter (eq, ne, not, in, and eq on null values). */
    onPremisesSyncEnabled?: boolean | undefined;
    /** The type of operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values). */
    operatingSystem?: string | undefined;
    /** The version of the operating system on the device. Required. Supports $filter (eq, ne, not, ge, le, startsWith, and eq on null values). */
    operatingSystemVersion?: string | undefined;
    /** For internal use only. Not nullable. Supports $filter (eq, not, ge, le, startsWith,/$count eq 0, /$count ne 0). */
    physicalIds?: string[] | undefined;
    /** The profile type of the device. Possible values: RegisteredDevice (default), SecureVM, Printer, Shared, IoT. */
    profileType?: string | undefined;
    /** The user that cloud joined the device or registered their personal device. The registered owner is set at the time of registration. Read-only. Nullable. Supports $expand. */
    registeredOwners?: DirectoryObject[] | undefined;
    /** Collection of registered users of the device. For cloud joined devices and registered personal devices, registered users are set to the same value as registered owners at the time of registration. Read-only. Nullable. Supports $expand. */
    registeredUsers?: DirectoryObject[] | undefined;
    /** Date and time of when the device was registered. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    registrationDateTime?: Date | undefined;
    /** List of labels applied to the device by the system. Supports $filter (/$count eq 0, /$count ne 0). */
    systemLabels?: string[] | undefined;
    /** Groups and administrative units that the device is a member of. This operation is transitive. Supports $expand. */
    transitiveMemberOf?: DirectoryObject[] | undefined;
    /** Type of trust for the joined device. Read-only. Possible values:  Workplace (indicates bring your own personal devices), AzureAd (Cloud-only joined devices), ServerAd (on-premises domain joined devices joined to Microsoft Entra ID). For more information, see Introduction to device management in Microsoft Entra ID. */
    trustType?: string | undefined;
}

export class AlternativeSecurityId implements IAlternativeSecurityId {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** For internal use only. */
    identityProvider?: string | undefined;
    /** For internal use only. */
    key?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** For internal use only. */
    type?: number | undefined;

    constructor(data?: IAlternativeSecurityId) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.identityProvider = _data["identityProvider"];
            this.key = _data["key"];
            this.odataType = _data["odataType"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): AlternativeSecurityId {
        data = typeof data === 'object' ? data : {};
        let result = new AlternativeSecurityId();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["identityProvider"] = this.identityProvider;
        data["key"] = this.key;
        data["odataType"] = this.odataType;
        data["type"] = this.type;
        return data;
    }
}

export interface IAlternativeSecurityId {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** For internal use only. */
    identityProvider?: string | undefined;
    /** For internal use only. */
    key?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** For internal use only. */
    type?: number | undefined;
}

export class Extension extends Entity implements IExtension {

    constructor(data?: IExtension) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): Extension {
        data = typeof data === 'object' ? data : {};
        let result = new Extension();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IExtension extends IEntity {
}

/** The status of a long-running operation. */
export class LongRunningOperation extends Entity implements ILongRunningOperation {
    /** The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    createdDateTime?: Date | undefined;
    /** The time of the last action in the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    lastActionDateTime?: Date | undefined;
    /** URI of the resource that the operation is performed on. */
    resourceLocation?: string | undefined;
    /** The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue. */
    status?: LongRunningOperationStatus | undefined;
    /** Details about the status of the operation. */
    statusDetail?: string | undefined;

    constructor(data?: ILongRunningOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.lastActionDateTime = _data["lastActionDateTime"] ? new Date(_data["lastActionDateTime"].toString()) : <any>undefined;
            this.resourceLocation = _data["resourceLocation"];
            this.status = _data["status"];
            this.statusDetail = _data["statusDetail"];
        }
    }

    static override fromJS(data: any): LongRunningOperation {
        data = typeof data === 'object' ? data : {};
        let result = new LongRunningOperation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["lastActionDateTime"] = this.lastActionDateTime ? this.lastActionDateTime.toISOString() : <any>undefined;
        data["resourceLocation"] = this.resourceLocation;
        data["status"] = this.status;
        data["statusDetail"] = this.statusDetail;
        super.toJSON(data);
        return data;
    }
}

/** The status of a long-running operation. */
export interface ILongRunningOperation extends IEntity {
    /** The start time of the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    createdDateTime?: Date | undefined;
    /** The time of the last action in the operation. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    lastActionDateTime?: Date | undefined;
    /** URI of the resource that the operation is performed on. */
    resourceLocation?: string | undefined;
    /** The status of the operation. The possible values are: notStarted, running, succeeded, failed, unknownFutureValue. */
    status?: LongRunningOperationStatus | undefined;
    /** Details about the status of the operation. */
    statusDetail?: string | undefined;
}

export enum LongRunningOperationStatus {
    NotStarted = 0,
    Running = 1,
    Succeeded = 2,
    Failed = 3,
    UnknownFutureValue = 4,
}

export class PasswordAuthenticationMethod extends AuthenticationMethod implements IPasswordAuthenticationMethod {
    /** The date and time when this password was last updated. This property is currently not populated. Read-only. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    createdDateTime?: Date | undefined;
    /** For security, the password is always returned as null from a LIST or GET operation. */
    password?: string | undefined;

    constructor(data?: IPasswordAuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.password = _data["password"];
        }
    }

    static override fromJS(data: any): PasswordAuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordAuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["password"] = this.password;
        super.toJSON(data);
        return data;
    }
}

export interface IPasswordAuthenticationMethod extends IAuthenticationMethod {
    /** The date and time when this password was last updated. This property is currently not populated. Read-only. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    createdDateTime?: Date | undefined;
    /** For security, the password is always returned as null from a LIST or GET operation. */
    password?: string | undefined;
}

export class PhoneAuthenticationMethod extends AuthenticationMethod implements IPhoneAuthenticationMethod {
    /** The phone number to text or call for authentication. Phone numbers use the format +{country code} {number}x{extension}, with extension optional. For example, +1 5555551234 or +1 5555551234x123 are valid. Numbers are rejected when creating or updating if they don't match the required format. */
    phoneNumber?: string | undefined;
    /** The type of this phone. Possible values are: mobile, alternateMobile, or office. */
    phoneType?: AuthenticationPhoneType | undefined;
    /** Whether a phone is ready to be used for SMS sign-in or not. Possible values are: notSupported, notAllowedByPolicy, notEnabled, phoneNumberNotUnique, ready, or notConfigured, unknownFutureValue. */
    smsSignInState?: AuthenticationMethodSignInState | undefined;

    constructor(data?: IPhoneAuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.phoneNumber = _data["phoneNumber"];
            this.phoneType = _data["phoneType"];
            this.smsSignInState = _data["smsSignInState"];
        }
    }

    static override fromJS(data: any): PhoneAuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new PhoneAuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["phoneNumber"] = this.phoneNumber;
        data["phoneType"] = this.phoneType;
        data["smsSignInState"] = this.smsSignInState;
        super.toJSON(data);
        return data;
    }
}

export interface IPhoneAuthenticationMethod extends IAuthenticationMethod {
    /** The phone number to text or call for authentication. Phone numbers use the format +{country code} {number}x{extension}, with extension optional. For example, +1 5555551234 or +1 5555551234x123 are valid. Numbers are rejected when creating or updating if they don't match the required format. */
    phoneNumber?: string | undefined;
    /** The type of this phone. Possible values are: mobile, alternateMobile, or office. */
    phoneType?: AuthenticationPhoneType | undefined;
    /** Whether a phone is ready to be used for SMS sign-in or not. Possible values are: notSupported, notAllowedByPolicy, notEnabled, phoneNumberNotUnique, ready, or notConfigured, unknownFutureValue. */
    smsSignInState?: AuthenticationMethodSignInState | undefined;
}

export enum AuthenticationPhoneType {
    Mobile = 0,
    AlternateMobile = 1,
    Office = 2,
    UnknownFutureValue = 3,
}

export enum AuthenticationMethodSignInState {
    NotSupported = 0,
    NotAllowedByPolicy = 1,
    NotEnabled = 2,
    PhoneNumberNotUnique = 3,
    Ready = 4,
    NotConfigured = 5,
    UnknownFutureValue = 6,
}

export class SoftwareOathAuthenticationMethod extends AuthenticationMethod implements ISoftwareOathAuthenticationMethod {
    /** The secret key of the method. Always returns null. */
    secretKey?: string | undefined;

    constructor(data?: ISoftwareOathAuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.secretKey = _data["secretKey"];
        }
    }

    static override fromJS(data: any): SoftwareOathAuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new SoftwareOathAuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["secretKey"] = this.secretKey;
        super.toJSON(data);
        return data;
    }
}

export interface ISoftwareOathAuthenticationMethod extends IAuthenticationMethod {
    /** The secret key of the method. Always returns null. */
    secretKey?: string | undefined;
}

export class TemporaryAccessPassAuthenticationMethod extends AuthenticationMethod implements ITemporaryAccessPassAuthenticationMethod {
    /** The date and time when the Temporary Access Pass was created. */
    createdDateTime?: Date | undefined;
    /** The state of the authentication method that indicates whether it's currently usable by the user. */
    isUsable?: boolean | undefined;
    /** Determines whether the pass is limited to a one-time use. If true, the pass can be used once; if false, the pass can be used multiple times within the Temporary Access Pass lifetime. */
    isUsableOnce?: boolean | undefined;
    /** The lifetime of the Temporary Access Pass in minutes starting at startDateTime. Must be between 10 and 43200 inclusive (equivalent to 30 days). */
    lifetimeInMinutes?: number | undefined;
    /** Details about the usability state (isUsable). Reasons can include: EnabledByPolicy, DisabledByPolicy, Expired, NotYetValid, OneTimeUsed. */
    methodUsabilityReason?: string | undefined;
    /** The date and time when the Temporary Access Pass becomes available to use and when isUsable is true is enforced. */
    startDateTime?: Date | undefined;
    /** The Temporary Access Pass used to authenticate. Returned only on creation of a new temporaryAccessPassAuthenticationMethod object; Hidden in subsequent read operations and returned as null with GET. */
    temporaryAccessPass?: string | undefined;

    constructor(data?: ITemporaryAccessPassAuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.isUsable = _data["isUsable"];
            this.isUsableOnce = _data["isUsableOnce"];
            this.lifetimeInMinutes = _data["lifetimeInMinutes"];
            this.methodUsabilityReason = _data["methodUsabilityReason"];
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
            this.temporaryAccessPass = _data["temporaryAccessPass"];
        }
    }

    static override fromJS(data: any): TemporaryAccessPassAuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new TemporaryAccessPassAuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["isUsable"] = this.isUsable;
        data["isUsableOnce"] = this.isUsableOnce;
        data["lifetimeInMinutes"] = this.lifetimeInMinutes;
        data["methodUsabilityReason"] = this.methodUsabilityReason;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        data["temporaryAccessPass"] = this.temporaryAccessPass;
        super.toJSON(data);
        return data;
    }
}

export interface ITemporaryAccessPassAuthenticationMethod extends IAuthenticationMethod {
    /** The date and time when the Temporary Access Pass was created. */
    createdDateTime?: Date | undefined;
    /** The state of the authentication method that indicates whether it's currently usable by the user. */
    isUsable?: boolean | undefined;
    /** Determines whether the pass is limited to a one-time use. If true, the pass can be used once; if false, the pass can be used multiple times within the Temporary Access Pass lifetime. */
    isUsableOnce?: boolean | undefined;
    /** The lifetime of the Temporary Access Pass in minutes starting at startDateTime. Must be between 10 and 43200 inclusive (equivalent to 30 days). */
    lifetimeInMinutes?: number | undefined;
    /** Details about the usability state (isUsable). Reasons can include: EnabledByPolicy, DisabledByPolicy, Expired, NotYetValid, OneTimeUsed. */
    methodUsabilityReason?: string | undefined;
    /** The date and time when the Temporary Access Pass becomes available to use and when isUsable is true is enforced. */
    startDateTime?: Date | undefined;
    /** The Temporary Access Pass used to authenticate. Returned only on creation of a new temporaryAccessPassAuthenticationMethod object; Hidden in subsequent read operations and returned as null with GET. */
    temporaryAccessPass?: string | undefined;
}

export class WindowsHelloForBusinessAuthenticationMethod extends AuthenticationMethod implements IWindowsHelloForBusinessAuthenticationMethod {
    /** The date and time that this Windows Hello for Business key was registered. */
    createdDateTime?: Date | undefined;
    /** The registered device on which this Windows Hello for Business key resides. Supports $expand. When you get a user's Windows Hello for Business registration information, this property is returned only on a single GET and when you specify ?$expand. For example, GET /users/admin@contoso.com/authentication/windowsHelloForBusinessMethods/_jpuR-TGZtk6aQCLF3BQjA2?$expand=device. */
    device?: Device | undefined;
    /** The name of the device on which Windows Hello for Business is registered */
    displayName?: string | undefined;
    /** Key strength of this Windows Hello for Business key. Possible values are: normal, weak, unknown. */
    keyStrength?: AuthenticationMethodKeyStrength | undefined;

    constructor(data?: IWindowsHelloForBusinessAuthenticationMethod) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.device = _data["device"] ? Device.fromJS(_data["device"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.keyStrength = _data["keyStrength"];
        }
    }

    static override fromJS(data: any): WindowsHelloForBusinessAuthenticationMethod {
        data = typeof data === 'object' ? data : {};
        let result = new WindowsHelloForBusinessAuthenticationMethod();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["device"] = this.device ? this.device.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["keyStrength"] = this.keyStrength;
        super.toJSON(data);
        return data;
    }
}

export interface IWindowsHelloForBusinessAuthenticationMethod extends IAuthenticationMethod {
    /** The date and time that this Windows Hello for Business key was registered. */
    createdDateTime?: Date | undefined;
    /** The registered device on which this Windows Hello for Business key resides. Supports $expand. When you get a user's Windows Hello for Business registration information, this property is returned only on a single GET and when you specify ?$expand. For example, GET /users/admin@contoso.com/authentication/windowsHelloForBusinessMethods/_jpuR-TGZtk6aQCLF3BQjA2?$expand=device. */
    device?: Device | undefined;
    /** The name of the device on which Windows Hello for Business is registered */
    displayName?: string | undefined;
    /** Key strength of this Windows Hello for Business key. Possible values are: normal, weak, unknown. */
    keyStrength?: AuthenticationMethodKeyStrength | undefined;
}

export enum AuthenticationMethodKeyStrength {
    Normal = 0,
    Weak = 1,
    Unknown = 2,
}

export class AuthorizationInfo implements IAuthorizationInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The certificateUserIds property */
    certificateUserIds?: string[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IAuthorizationInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            if (Array.isArray(_data["certificateUserIds"])) {
                this.certificateUserIds = [] as any;
                for (let item of _data["certificateUserIds"])
                    this.certificateUserIds!.push(item);
            }
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): AuthorizationInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorizationInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        if (Array.isArray(this.certificateUserIds)) {
            data["certificateUserIds"] = [];
            for (let item of this.certificateUserIds)
                data["certificateUserIds"].push(item);
        }
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IAuthorizationInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The certificateUserIds property */
    certificateUserIds?: string[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Calendar extends Entity implements ICalendar {
    /** Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness. */
    allowedOnlineMeetingProviders?: (OnlineMeetingProviderType | undefined)[] | undefined;
    /** The permissions of the users with whom the calendar is shared. */
    calendarPermissions?: CalendarPermission[] | undefined;
    /** The calendar view for the calendar. Navigation property. Read-only. */
    calendarView?: Event[] | undefined;
    /** true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who has been shared a calendar and granted write access. */
    canEdit?: boolean | undefined;
    /** true if the user has the permission to share the calendar, false otherwise. Only the user who created the calendar can share it. */
    canShare?: boolean | undefined;
    /** true if the user can read calendar items that have been marked private, false otherwise. */
    canViewPrivateItems?: boolean | undefined;
    /** Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only. */
    changeKey?: string | undefined;
    /** Specifies the color theme to distinguish the calendar from other calendars in a UI. The property values are: auto, lightBlue, lightGreen, lightOrange, lightGray, lightYellow, lightTeal, lightPink, lightBrown, lightRed, maxColor. */
    color?: CalendarColor | undefined;
    /** The default online meeting provider for meetings sent from this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness. */
    defaultOnlineMeetingProvider?: OnlineMeetingProviderType | undefined;
    /** The events in the calendar. Navigation property. Read-only. */
    events?: Event[] | undefined;
    /** The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only. */
    hexColor?: string | undefined;
    /** true if this is the default calendar where new events are created by default, false otherwise. */
    isDefaultCalendar?: boolean | undefined;
    /** Indicates whether this user calendar can be deleted from the user mailbox. */
    isRemovable?: boolean | undefined;
    /** Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses. */
    isTallyingResponses?: boolean | undefined;
    /** The collection of multi-value extended properties defined for the calendar. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The calendar name. */
    name?: string | undefined;
    /** If set, this represents the user who created or added the calendar. For a calendar that the user created or added, the owner property is set to the user. For a calendar shared with the user, the owner property is set to the person who shared that calendar with the user. */
    owner?: EmailAddress | undefined;
    /** The collection of single-value extended properties defined for the calendar. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;

    constructor(data?: ICalendar) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["allowedOnlineMeetingProviders"])) {
                this.allowedOnlineMeetingProviders = [] as any;
                for (let item of _data["allowedOnlineMeetingProviders"])
                    this.allowedOnlineMeetingProviders!.push(item);
            }
            if (Array.isArray(_data["calendarPermissions"])) {
                this.calendarPermissions = [] as any;
                for (let item of _data["calendarPermissions"])
                    this.calendarPermissions!.push(CalendarPermission.fromJS(item));
            }
            if (Array.isArray(_data["calendarView"])) {
                this.calendarView = [] as any;
                for (let item of _data["calendarView"])
                    this.calendarView!.push(Event.fromJS(item));
            }
            this.canEdit = _data["canEdit"];
            this.canShare = _data["canShare"];
            this.canViewPrivateItems = _data["canViewPrivateItems"];
            this.changeKey = _data["changeKey"];
            this.color = _data["color"];
            this.defaultOnlineMeetingProvider = _data["defaultOnlineMeetingProvider"];
            if (Array.isArray(_data["events"])) {
                this.events = [] as any;
                for (let item of _data["events"])
                    this.events!.push(Event.fromJS(item));
            }
            this.hexColor = _data["hexColor"];
            this.isDefaultCalendar = _data["isDefaultCalendar"];
            this.isRemovable = _data["isRemovable"];
            this.isTallyingResponses = _data["isTallyingResponses"];
            if (Array.isArray(_data["multiValueExtendedProperties"])) {
                this.multiValueExtendedProperties = [] as any;
                for (let item of _data["multiValueExtendedProperties"])
                    this.multiValueExtendedProperties!.push(MultiValueLegacyExtendedProperty.fromJS(item));
            }
            this.name = _data["name"];
            this.owner = _data["owner"] ? EmailAddress.fromJS(_data["owner"]) : <any>undefined;
            if (Array.isArray(_data["singleValueExtendedProperties"])) {
                this.singleValueExtendedProperties = [] as any;
                for (let item of _data["singleValueExtendedProperties"])
                    this.singleValueExtendedProperties!.push(SingleValueLegacyExtendedProperty.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Calendar {
        data = typeof data === 'object' ? data : {};
        let result = new Calendar();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedOnlineMeetingProviders)) {
            data["allowedOnlineMeetingProviders"] = [];
            for (let item of this.allowedOnlineMeetingProviders)
                data["allowedOnlineMeetingProviders"].push(item);
        }
        if (Array.isArray(this.calendarPermissions)) {
            data["calendarPermissions"] = [];
            for (let item of this.calendarPermissions)
                data["calendarPermissions"].push(item.toJSON());
        }
        if (Array.isArray(this.calendarView)) {
            data["calendarView"] = [];
            for (let item of this.calendarView)
                data["calendarView"].push(item.toJSON());
        }
        data["canEdit"] = this.canEdit;
        data["canShare"] = this.canShare;
        data["canViewPrivateItems"] = this.canViewPrivateItems;
        data["changeKey"] = this.changeKey;
        data["color"] = this.color;
        data["defaultOnlineMeetingProvider"] = this.defaultOnlineMeetingProvider;
        if (Array.isArray(this.events)) {
            data["events"] = [];
            for (let item of this.events)
                data["events"].push(item.toJSON());
        }
        data["hexColor"] = this.hexColor;
        data["isDefaultCalendar"] = this.isDefaultCalendar;
        data["isRemovable"] = this.isRemovable;
        data["isTallyingResponses"] = this.isTallyingResponses;
        if (Array.isArray(this.multiValueExtendedProperties)) {
            data["multiValueExtendedProperties"] = [];
            for (let item of this.multiValueExtendedProperties)
                data["multiValueExtendedProperties"].push(item.toJSON());
        }
        data["name"] = this.name;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        if (Array.isArray(this.singleValueExtendedProperties)) {
            data["singleValueExtendedProperties"] = [];
            for (let item of this.singleValueExtendedProperties)
                data["singleValueExtendedProperties"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICalendar extends IEntity {
    /** Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness. */
    allowedOnlineMeetingProviders?: (OnlineMeetingProviderType | undefined)[] | undefined;
    /** The permissions of the users with whom the calendar is shared. */
    calendarPermissions?: CalendarPermission[] | undefined;
    /** The calendar view for the calendar. Navigation property. Read-only. */
    calendarView?: Event[] | undefined;
    /** true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who has been shared a calendar and granted write access. */
    canEdit?: boolean | undefined;
    /** true if the user has the permission to share the calendar, false otherwise. Only the user who created the calendar can share it. */
    canShare?: boolean | undefined;
    /** true if the user can read calendar items that have been marked private, false otherwise. */
    canViewPrivateItems?: boolean | undefined;
    /** Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only. */
    changeKey?: string | undefined;
    /** Specifies the color theme to distinguish the calendar from other calendars in a UI. The property values are: auto, lightBlue, lightGreen, lightOrange, lightGray, lightYellow, lightTeal, lightPink, lightBrown, lightRed, maxColor. */
    color?: CalendarColor | undefined;
    /** The default online meeting provider for meetings sent from this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness. */
    defaultOnlineMeetingProvider?: OnlineMeetingProviderType | undefined;
    /** The events in the calendar. Navigation property. Read-only. */
    events?: Event[] | undefined;
    /** The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only. */
    hexColor?: string | undefined;
    /** true if this is the default calendar where new events are created by default, false otherwise. */
    isDefaultCalendar?: boolean | undefined;
    /** Indicates whether this user calendar can be deleted from the user mailbox. */
    isRemovable?: boolean | undefined;
    /** Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses. */
    isTallyingResponses?: boolean | undefined;
    /** The collection of multi-value extended properties defined for the calendar. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The calendar name. */
    name?: string | undefined;
    /** If set, this represents the user who created or added the calendar. For a calendar that the user created or added, the owner property is set to the user. For a calendar shared with the user, the owner property is set to the person who shared that calendar with the user. */
    owner?: EmailAddress | undefined;
    /** The collection of single-value extended properties defined for the calendar. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
}

export enum OnlineMeetingProviderType {
    Unknown = 0,
    SkypeForBusiness = 1,
    SkypeForConsumer = 2,
    TeamsForBusiness = 3,
}

export class CalendarPermission extends Entity implements ICalendarPermission {
    /** List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom. */
    allowedRoles?: (CalendarRoleType | undefined)[] | undefined;
    /** Represents a share recipient or delegate who has access to the calendar. For the 'My Organization' share recipient, the address property is null. Read-only. */
    emailAddress?: EmailAddress | undefined;
    /** True if the user in context (recipient or delegate) is inside the same organization as the calendar owner. */
    isInsideOrganization?: boolean | undefined;
    /** True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar. */
    isRemovable?: boolean | undefined;
    /** Current permission level of the calendar share recipient or delegate. */
    role?: CalendarRoleType | undefined;

    constructor(data?: ICalendarPermission) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["allowedRoles"])) {
                this.allowedRoles = [] as any;
                for (let item of _data["allowedRoles"])
                    this.allowedRoles!.push(item);
            }
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
            this.isInsideOrganization = _data["isInsideOrganization"];
            this.isRemovable = _data["isRemovable"];
            this.role = _data["role"];
        }
    }

    static override fromJS(data: any): CalendarPermission {
        data = typeof data === 'object' ? data : {};
        let result = new CalendarPermission();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedRoles)) {
            data["allowedRoles"] = [];
            for (let item of this.allowedRoles)
                data["allowedRoles"].push(item);
        }
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        data["isInsideOrganization"] = this.isInsideOrganization;
        data["isRemovable"] = this.isRemovable;
        data["role"] = this.role;
        super.toJSON(data);
        return data;
    }
}

export interface ICalendarPermission extends IEntity {
    /** List of allowed sharing or delegating permission levels for the calendar. Possible values are: none, freeBusyRead, limitedRead, read, write, delegateWithoutPrivateEventAccess, delegateWithPrivateEventAccess, custom. */
    allowedRoles?: (CalendarRoleType | undefined)[] | undefined;
    /** Represents a share recipient or delegate who has access to the calendar. For the 'My Organization' share recipient, the address property is null. Read-only. */
    emailAddress?: EmailAddress | undefined;
    /** True if the user in context (recipient or delegate) is inside the same organization as the calendar owner. */
    isInsideOrganization?: boolean | undefined;
    /** True if the user can be removed from the list of recipients or delegates for the specified calendar, false otherwise. The 'My organization' user determines the permissions other people within your organization have to the given calendar. You can't remove 'My organization' as a share recipient to a calendar. */
    isRemovable?: boolean | undefined;
    /** Current permission level of the calendar share recipient or delegate. */
    role?: CalendarRoleType | undefined;
}

export enum CalendarRoleType {
    None = 0,
    FreeBusyRead = 1,
    LimitedRead = 2,
    Read = 3,
    Write = 4,
    DelegateWithoutPrivateEventAccess = 5,
    DelegateWithPrivateEventAccess = 6,
    Custom = 7,
}

export class EmailAddress implements IEmailAddress {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The email address of the person or entity. */
    address?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the person or entity. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IEmailAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.address = _data["address"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.name = _data["name"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): EmailAddress {
        data = typeof data === 'object' ? data : {};
        let result = new EmailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["address"] = this.address;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IEmailAddress {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The email address of the person or entity. */
    address?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the person or entity. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class OutlookItem extends Entity implements IOutlookItem {
    /** The categories associated with the item */
    categories?: string[] | undefined;
    /** Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only. */
    changeKey?: string | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    createdDateTime?: Date | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastModifiedDateTime?: Date | undefined;

    constructor(data?: IOutlookItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
            this.changeKey = _data["changeKey"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): OutlookItem {
        data = typeof data === 'object' ? data : {};
        let result = new OutlookItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        data["changeKey"] = this.changeKey;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IOutlookItem extends IEntity {
    /** The categories associated with the item */
    categories?: string[] | undefined;
    /** Identifies the version of the item. Every time the item is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only. */
    changeKey?: string | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    createdDateTime?: Date | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastModifiedDateTime?: Date | undefined;
}

export class Event extends OutlookItem implements IEvent {
    /** true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. Default is true. */
    allowNewTimeProposals?: boolean | undefined;
    /** The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable. */
    attachments?: Attachment[] | undefined;
    /** The collection of attendees for the event. */
    attendees?: Attendee[] | undefined;
    /** The body of the message associated with the event. It can be in HTML or text format. */
    body?: ItemBody | undefined;
    /** The preview of the message associated with the event. It is in text format. */
    bodyPreview?: string | undefined;
    /** The calendar that contains the event. Navigation property. Read-only. */
    calendar?: Calendar | undefined;
    /** The date, time, and time zone that the event ends. By default, the end time is in UTC. */
    end?: DateTimeTimeZone | undefined;
    /** The collection of open extensions defined for the event. Nullable. */
    extensions?: Extension[] | undefined;
    /** Set to true if the event has attachments. */
    hasAttachments?: boolean | undefined;
    /** When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. Default is false. */
    hideAttendees?: boolean | undefined;
    /** A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only. */
    iCalUId?: string | undefined;
    /** The importance of the event. The possible values are: low, normal, high. */
    importance?: Importance | undefined;
    /** The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable. */
    instances?: Event[] | undefined;
    /** Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start and end time must be set to midnight and be in the same time zone. */
    isAllDay?: boolean | undefined;
    /** Set to true if the event has been canceled. */
    isCancelled?: boolean | undefined;
    /** Set to true if the user has updated the meeting in Outlook but has not sent the updates to attendees. Set to false if all changes have been sent, or if the event is an appointment without any attendees. */
    isDraft?: boolean | undefined;
    /** True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online. */
    isOnlineMeeting?: boolean | undefined;
    /** Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). This also applies if a delegate organized the event on behalf of the owner. */
    isOrganizer?: boolean | undefined;
    /** Set to true if an alert is set to remind the user of the event. */
    isReminderOn?: boolean | undefined;
    /** The location of the event. */
    location?: Location | undefined;
    /** The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection would be removed and replaced by the new location value. */
    locations?: Location[] | undefined;
    /** The collection of multi-value extended properties defined for the event. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** Details for an attendee to join the meeting online. Default is null. Read-only. After you set the isOnlineMeeting and onlineMeetingProvider properties to enable a meeting online, Microsoft Graph initializes onlineMeeting. When set, the meeting remains available online, and you cannot change the isOnlineMeeting, onlineMeetingProvider, and onlneMeeting properties again. */
    onlineMeeting?: OnlineMeetingInfo | undefined;
    /** Represents the online meeting service provider. By default, onlineMeetingProvider is unknown. The possible values are unknown, teamsForBusiness, skypeForBusiness, and skypeForConsumer. Optional.  After you set onlineMeetingProvider, Microsoft Graph initializes onlineMeeting. Subsequently you cannot change onlineMeetingProvider again, and the meeting remains available online. */
    onlineMeetingProvider?: OnlineMeetingProviderType | undefined;
    /** A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future. */
    onlineMeetingUrl?: string | undefined;
    /** The organizer of the event. */
    organizer?: Recipient | undefined;
    /** The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook. */
    originalEndTimeZone?: string | undefined;
    /** Represents the start time of an event when it is initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    originalStart?: Date | undefined;
    /** The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook. */
    originalStartTimeZone?: string | undefined;
    /** The recurrence pattern for the event. */
    recurrence?: PatternedRecurrence | undefined;
    /** The number of minutes before the event start time that the reminder alert occurs. */
    reminderMinutesBeforeStart?: number | undefined;
    /** Default is true, which represents the organizer would like an invitee to send a response to the event. */
    responseRequested?: boolean | undefined;
    /** Indicates the type of response sent in response to an event message. */
    responseStatus?: ResponseStatus | undefined;
    /** Possible values are: normal, personal, private, confidential. */
    sensitivity?: Sensitivity | undefined;
    /** The ID for the recurring series master item, if this event is part of a recurring series. */
    seriesMasterId?: string | undefined;
    /** The status to show. Possible values are: free, tentative, busy, oof, workingElsewhere, unknown. */
    showAs?: FreeBusyStatus | undefined;
    /** The collection of single-value extended properties defined for the event. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
    /** The start date, time, and time zone of the event. By default, the start time is in UTC. */
    start?: DateTimeTimeZone | undefined;
    /** The text of the event's subject line. */
    subject?: string | undefined;
    /** A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. This is useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you cannot change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional. */
    transactionId?: string | undefined;
    /** The event type. Possible values are: singleInstance, occurrence, exception, seriesMaster. Read-only */
    type?: EventType | undefined;
    /** The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL cannot be accessed from within an iFrame. */
    webLink?: string | undefined;

    constructor(data?: IEvent) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.allowNewTimeProposals = _data["allowNewTimeProposals"];
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [] as any;
                for (let item of _data["attachments"])
                    this.attachments!.push(Attachment.fromJS(item));
            }
            if (Array.isArray(_data["attendees"])) {
                this.attendees = [] as any;
                for (let item of _data["attendees"])
                    this.attendees!.push(Attendee.fromJS(item));
            }
            this.body = _data["body"] ? ItemBody.fromJS(_data["body"]) : <any>undefined;
            this.bodyPreview = _data["bodyPreview"];
            this.calendar = _data["calendar"] ? Calendar.fromJS(_data["calendar"]) : <any>undefined;
            this.end = _data["end"] ? DateTimeTimeZone.fromJS(_data["end"]) : <any>undefined;
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            this.hasAttachments = _data["hasAttachments"];
            this.hideAttendees = _data["hideAttendees"];
            this.iCalUId = _data["iCalUId"];
            this.importance = _data["importance"];
            if (Array.isArray(_data["instances"])) {
                this.instances = [] as any;
                for (let item of _data["instances"])
                    this.instances!.push(Event.fromJS(item));
            }
            this.isAllDay = _data["isAllDay"];
            this.isCancelled = _data["isCancelled"];
            this.isDraft = _data["isDraft"];
            this.isOnlineMeeting = _data["isOnlineMeeting"];
            this.isOrganizer = _data["isOrganizer"];
            this.isReminderOn = _data["isReminderOn"];
            this.location = _data["location"] ? Location.fromJS(_data["location"]) : <any>undefined;
            if (Array.isArray(_data["locations"])) {
                this.locations = [] as any;
                for (let item of _data["locations"])
                    this.locations!.push(Location.fromJS(item));
            }
            if (Array.isArray(_data["multiValueExtendedProperties"])) {
                this.multiValueExtendedProperties = [] as any;
                for (let item of _data["multiValueExtendedProperties"])
                    this.multiValueExtendedProperties!.push(MultiValueLegacyExtendedProperty.fromJS(item));
            }
            this.onlineMeeting = _data["onlineMeeting"] ? OnlineMeetingInfo.fromJS(_data["onlineMeeting"]) : <any>undefined;
            this.onlineMeetingProvider = _data["onlineMeetingProvider"];
            this.onlineMeetingUrl = _data["onlineMeetingUrl"];
            this.organizer = _data["organizer"] ? Recipient.fromJS(_data["organizer"]) : <any>undefined;
            this.originalEndTimeZone = _data["originalEndTimeZone"];
            this.originalStart = _data["originalStart"] ? new Date(_data["originalStart"].toString()) : <any>undefined;
            this.originalStartTimeZone = _data["originalStartTimeZone"];
            this.recurrence = _data["recurrence"] ? PatternedRecurrence.fromJS(_data["recurrence"]) : <any>undefined;
            this.reminderMinutesBeforeStart = _data["reminderMinutesBeforeStart"];
            this.responseRequested = _data["responseRequested"];
            this.responseStatus = _data["responseStatus"] ? ResponseStatus.fromJS(_data["responseStatus"]) : <any>undefined;
            this.sensitivity = _data["sensitivity"];
            this.seriesMasterId = _data["seriesMasterId"];
            this.showAs = _data["showAs"];
            if (Array.isArray(_data["singleValueExtendedProperties"])) {
                this.singleValueExtendedProperties = [] as any;
                for (let item of _data["singleValueExtendedProperties"])
                    this.singleValueExtendedProperties!.push(SingleValueLegacyExtendedProperty.fromJS(item));
            }
            this.start = _data["start"] ? DateTimeTimeZone.fromJS(_data["start"]) : <any>undefined;
            this.subject = _data["subject"];
            this.transactionId = _data["transactionId"];
            this.type = _data["type"];
            this.webLink = _data["webLink"];
        }
    }

    static override fromJS(data: any): Event {
        data = typeof data === 'object' ? data : {};
        let result = new Event();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowNewTimeProposals"] = this.allowNewTimeProposals;
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        if (Array.isArray(this.attendees)) {
            data["attendees"] = [];
            for (let item of this.attendees)
                data["attendees"].push(item.toJSON());
        }
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        data["bodyPreview"] = this.bodyPreview;
        data["calendar"] = this.calendar ? this.calendar.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        data["hasAttachments"] = this.hasAttachments;
        data["hideAttendees"] = this.hideAttendees;
        data["iCalUId"] = this.iCalUId;
        data["importance"] = this.importance;
        if (Array.isArray(this.instances)) {
            data["instances"] = [];
            for (let item of this.instances)
                data["instances"].push(item.toJSON());
        }
        data["isAllDay"] = this.isAllDay;
        data["isCancelled"] = this.isCancelled;
        data["isDraft"] = this.isDraft;
        data["isOnlineMeeting"] = this.isOnlineMeeting;
        data["isOrganizer"] = this.isOrganizer;
        data["isReminderOn"] = this.isReminderOn;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        if (Array.isArray(this.locations)) {
            data["locations"] = [];
            for (let item of this.locations)
                data["locations"].push(item.toJSON());
        }
        if (Array.isArray(this.multiValueExtendedProperties)) {
            data["multiValueExtendedProperties"] = [];
            for (let item of this.multiValueExtendedProperties)
                data["multiValueExtendedProperties"].push(item.toJSON());
        }
        data["onlineMeeting"] = this.onlineMeeting ? this.onlineMeeting.toJSON() : <any>undefined;
        data["onlineMeetingProvider"] = this.onlineMeetingProvider;
        data["onlineMeetingUrl"] = this.onlineMeetingUrl;
        data["organizer"] = this.organizer ? this.organizer.toJSON() : <any>undefined;
        data["originalEndTimeZone"] = this.originalEndTimeZone;
        data["originalStart"] = this.originalStart ? this.originalStart.toISOString() : <any>undefined;
        data["originalStartTimeZone"] = this.originalStartTimeZone;
        data["recurrence"] = this.recurrence ? this.recurrence.toJSON() : <any>undefined;
        data["reminderMinutesBeforeStart"] = this.reminderMinutesBeforeStart;
        data["responseRequested"] = this.responseRequested;
        data["responseStatus"] = this.responseStatus ? this.responseStatus.toJSON() : <any>undefined;
        data["sensitivity"] = this.sensitivity;
        data["seriesMasterId"] = this.seriesMasterId;
        data["showAs"] = this.showAs;
        if (Array.isArray(this.singleValueExtendedProperties)) {
            data["singleValueExtendedProperties"] = [];
            for (let item of this.singleValueExtendedProperties)
                data["singleValueExtendedProperties"].push(item.toJSON());
        }
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        data["subject"] = this.subject;
        data["transactionId"] = this.transactionId;
        data["type"] = this.type;
        data["webLink"] = this.webLink;
        super.toJSON(data);
        return data;
    }
}

export interface IEvent extends IOutlookItem {
    /** true if the meeting organizer allows invitees to propose a new time when responding; otherwise, false. Optional. Default is true. */
    allowNewTimeProposals?: boolean | undefined;
    /** The collection of FileAttachment, ItemAttachment, and referenceAttachment attachments for the event. Navigation property. Read-only. Nullable. */
    attachments?: Attachment[] | undefined;
    /** The collection of attendees for the event. */
    attendees?: Attendee[] | undefined;
    /** The body of the message associated with the event. It can be in HTML or text format. */
    body?: ItemBody | undefined;
    /** The preview of the message associated with the event. It is in text format. */
    bodyPreview?: string | undefined;
    /** The calendar that contains the event. Navigation property. Read-only. */
    calendar?: Calendar | undefined;
    /** The date, time, and time zone that the event ends. By default, the end time is in UTC. */
    end?: DateTimeTimeZone | undefined;
    /** The collection of open extensions defined for the event. Nullable. */
    extensions?: Extension[] | undefined;
    /** Set to true if the event has attachments. */
    hasAttachments?: boolean | undefined;
    /** When set to true, each attendee only sees themselves in the meeting request and meeting Tracking list. Default is false. */
    hideAttendees?: boolean | undefined;
    /** A unique identifier for an event across calendars. This ID is different for each occurrence in a recurring series. Read-only. */
    iCalUId?: string | undefined;
    /** The importance of the event. The possible values are: low, normal, high. */
    importance?: Importance | undefined;
    /** The occurrences of a recurring series, if the event is a series master. This property includes occurrences that are part of the recurrence pattern, and exceptions that have been modified, but does not include occurrences that have been cancelled from the series. Navigation property. Read-only. Nullable. */
    instances?: Event[] | undefined;
    /** Set to true if the event lasts all day. If true, regardless of whether it's a single-day or multi-day event, start and end time must be set to midnight and be in the same time zone. */
    isAllDay?: boolean | undefined;
    /** Set to true if the event has been canceled. */
    isCancelled?: boolean | undefined;
    /** Set to true if the user has updated the meeting in Outlook but has not sent the updates to attendees. Set to false if all changes have been sent, or if the event is an appointment without any attendees. */
    isDraft?: boolean | undefined;
    /** True if this event has online meeting information (that is, onlineMeeting points to an onlineMeetingInfo resource), false otherwise. Default is false (onlineMeeting is null). Optional.  After you set isOnlineMeeting to true, Microsoft Graph initializes onlineMeeting. Subsequently Outlook ignores any further changes to isOnlineMeeting, and the meeting remains available online. */
    isOnlineMeeting?: boolean | undefined;
    /** Set to true if the calendar owner (specified by the owner property of the calendar) is the organizer of the event (specified by the organizer property of the event). This also applies if a delegate organized the event on behalf of the owner. */
    isOrganizer?: boolean | undefined;
    /** Set to true if an alert is set to remind the user of the event. */
    isReminderOn?: boolean | undefined;
    /** The location of the event. */
    location?: Location | undefined;
    /** The locations where the event is held or attended from. The location and locations properties always correspond with each other. If you update the location property, any prior locations in the locations collection would be removed and replaced by the new location value. */
    locations?: Location[] | undefined;
    /** The collection of multi-value extended properties defined for the event. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** Details for an attendee to join the meeting online. Default is null. Read-only. After you set the isOnlineMeeting and onlineMeetingProvider properties to enable a meeting online, Microsoft Graph initializes onlineMeeting. When set, the meeting remains available online, and you cannot change the isOnlineMeeting, onlineMeetingProvider, and onlneMeeting properties again. */
    onlineMeeting?: OnlineMeetingInfo | undefined;
    /** Represents the online meeting service provider. By default, onlineMeetingProvider is unknown. The possible values are unknown, teamsForBusiness, skypeForBusiness, and skypeForConsumer. Optional.  After you set onlineMeetingProvider, Microsoft Graph initializes onlineMeeting. Subsequently you cannot change onlineMeetingProvider again, and the meeting remains available online. */
    onlineMeetingProvider?: OnlineMeetingProviderType | undefined;
    /** A URL for an online meeting. The property is set only when an organizer specifies in Outlook that an event is an online meeting such as Skype. Read-only.To access the URL to join an online meeting, use joinUrl which is exposed via the onlineMeeting property of the event. The onlineMeetingUrl property will be deprecated in the future. */
    onlineMeetingUrl?: string | undefined;
    /** The organizer of the event. */
    organizer?: Recipient | undefined;
    /** The end time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook. */
    originalEndTimeZone?: string | undefined;
    /** Represents the start time of an event when it is initially created as an occurrence or exception in a recurring series. This property is not returned for events that are single instances. Its date and time information is expressed in ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    originalStart?: Date | undefined;
    /** The start time zone that was set when the event was created. A value of tzone://Microsoft/Custom indicates that a legacy custom time zone was set in desktop Outlook. */
    originalStartTimeZone?: string | undefined;
    /** The recurrence pattern for the event. */
    recurrence?: PatternedRecurrence | undefined;
    /** The number of minutes before the event start time that the reminder alert occurs. */
    reminderMinutesBeforeStart?: number | undefined;
    /** Default is true, which represents the organizer would like an invitee to send a response to the event. */
    responseRequested?: boolean | undefined;
    /** Indicates the type of response sent in response to an event message. */
    responseStatus?: ResponseStatus | undefined;
    /** Possible values are: normal, personal, private, confidential. */
    sensitivity?: Sensitivity | undefined;
    /** The ID for the recurring series master item, if this event is part of a recurring series. */
    seriesMasterId?: string | undefined;
    /** The status to show. Possible values are: free, tentative, busy, oof, workingElsewhere, unknown. */
    showAs?: FreeBusyStatus | undefined;
    /** The collection of single-value extended properties defined for the event. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
    /** The start date, time, and time zone of the event. By default, the start time is in UTC. */
    start?: DateTimeTimeZone | undefined;
    /** The text of the event's subject line. */
    subject?: string | undefined;
    /** A custom identifier specified by a client app for the server to avoid redundant POST operations in case of client retries to create the same event. This is useful when low network connectivity causes the client to time out before receiving a response from the server for the client's prior create-event request. After you set transactionId when creating an event, you cannot change transactionId in a subsequent update. This property is only returned in a response payload if an app has set it. Optional. */
    transactionId?: string | undefined;
    /** The event type. Possible values are: singleInstance, occurrence, exception, seriesMaster. Read-only */
    type?: EventType | undefined;
    /** The URL to open the event in Outlook on the web.Outlook on the web opens the event in the browser if you are signed in to your mailbox. Otherwise, Outlook on the web prompts you to sign in.This URL cannot be accessed from within an iFrame. */
    webLink?: string | undefined;
}

export class Attachment extends Entity implements IAttachment {
    /** The MIME type. */
    contentType?: string | undefined;
    /** true if the attachment is an inline attachment; otherwise, false. */
    isInline?: boolean | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastModifiedDateTime?: Date | undefined;
    /** The attachment's file name. */
    name?: string | undefined;
    /** The length of the attachment in bytes. */
    size?: number | undefined;

    constructor(data?: IAttachment) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.contentType = _data["contentType"];
            this.isInline = _data["isInline"];
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.size = _data["size"];
        }
    }

    static override fromJS(data: any): Attachment {
        data = typeof data === 'object' ? data : {};
        let result = new Attachment();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentType"] = this.contentType;
        data["isInline"] = this.isInline;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["size"] = this.size;
        super.toJSON(data);
        return data;
    }
}

export interface IAttachment extends IEntity {
    /** The MIME type. */
    contentType?: string | undefined;
    /** true if the attachment is an inline attachment; otherwise, false. */
    isInline?: boolean | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastModifiedDateTime?: Date | undefined;
    /** The attachment's file name. */
    name?: string | undefined;
    /** The length of the attachment in bytes. */
    size?: number | undefined;
}

export class Recipient implements IRecipient {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The recipient's email address. */
    emailAddress?: EmailAddress | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IRecipient) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.emailAddress = _data["emailAddress"] ? EmailAddress.fromJS(_data["emailAddress"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): Recipient {
        data = typeof data === 'object' ? data : {};
        let result = new Recipient();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["emailAddress"] = this.emailAddress ? this.emailAddress.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IRecipient {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The recipient's email address. */
    emailAddress?: EmailAddress | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class AttendeeBase extends Recipient implements IAttendeeBase {
    /** The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type. */
    type?: AttendeeType | undefined;

    constructor(data?: IAttendeeBase) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.type = _data["type"];
        }
    }

    static override fromJS(data: any): AttendeeBase {
        data = typeof data === 'object' ? data : {};
        let result = new AttendeeBase();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IAttendeeBase extends IRecipient {
    /** The type of attendee. The possible values are: required, optional, resource. Currently if the attendee is a person, findMeetingTimes always considers the person is of the Required type. */
    type?: AttendeeType | undefined;
}

export class Attendee extends AttendeeBase implements IAttendee {
    /** An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn't proposed another time, then this property isn't included in a response of a GET event. */
    proposedNewTime?: TimeSlot | undefined;
    /** The attendee's response (none, accepted, declined, etc.) for the event and date-time that the response was sent. */
    status?: ResponseStatus | undefined;

    constructor(data?: IAttendee) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.proposedNewTime = _data["proposedNewTime"] ? TimeSlot.fromJS(_data["proposedNewTime"]) : <any>undefined;
            this.status = _data["status"] ? ResponseStatus.fromJS(_data["status"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Attendee {
        data = typeof data === 'object' ? data : {};
        let result = new Attendee();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["proposedNewTime"] = this.proposedNewTime ? this.proposedNewTime.toJSON() : <any>undefined;
        data["status"] = this.status ? this.status.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IAttendee extends IAttendeeBase {
    /** An alternate date/time proposed by the attendee for a meeting request to start and end. If the attendee hasn't proposed another time, then this property isn't included in a response of a GET event. */
    proposedNewTime?: TimeSlot | undefined;
    /** The attendee's response (none, accepted, declined, etc.) for the event and date-time that the response was sent. */
    status?: ResponseStatus | undefined;
}

export class TimeSlot implements ITimeSlot {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The end property */
    end?: DateTimeTimeZone | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The start property */
    start?: DateTimeTimeZone | undefined;

    constructor(data?: ITimeSlot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.end = _data["end"] ? DateTimeTimeZone.fromJS(_data["end"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.start = _data["start"] ? DateTimeTimeZone.fromJS(_data["start"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeSlot {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSlot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["end"] = this.end ? this.end.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["start"] = this.start ? this.start.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITimeSlot {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The end property */
    end?: DateTimeTimeZone | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The start property */
    start?: DateTimeTimeZone | undefined;
}

export class DateTimeTimeZone implements IDateTimeTimeZone {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A single point of time in a combined date and time representation ({date}T{time}; for example, 2017-08-29T04:00:00.0000000). */
    dateTime?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Represents a time zone, for example, 'Pacific Standard Time'. See below for more possible values. */
    timeZone?: string | undefined;

    constructor(data?: IDateTimeTimeZone) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.dateTime = _data["dateTime"];
            this.odataType = _data["odataType"];
            this.timeZone = _data["timeZone"];
        }
    }

    static fromJS(data: any): DateTimeTimeZone {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimeTimeZone();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["dateTime"] = this.dateTime;
        data["odataType"] = this.odataType;
        data["timeZone"] = this.timeZone;
        return data;
    }
}

export interface IDateTimeTimeZone {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A single point of time in a combined date and time representation ({date}T{time}; for example, 2017-08-29T04:00:00.0000000). */
    dateTime?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Represents a time zone, for example, 'Pacific Standard Time'. See below for more possible values. */
    timeZone?: string | undefined;
}

export class ResponseStatus implements IResponseStatus {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded.To differentiate between none and notResponded:  none – from organizer's perspective. This value is used when the status of an attendee/participant is reported to the organizer of a meeting.  notResponded – from attendee's perspective. Indicates the attendee has not responded to the meeting request.  Clients can treat notResponded == none.  As an example, if attendee Alex hasn't responded to a meeting request, getting Alex' response status for that event in Alex' calendar returns notResponded. Getting Alex' response from the calendar of any other attendee or the organizer's returns none. Getting the organizer's response for the event in anybody's calendar also returns none. */
    response?: ResponseType | undefined;
    /** The date and time when the response was returned. It uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    time?: Date | undefined;

    constructor(data?: IResponseStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.response = _data["response"];
            this.time = _data["time"] ? new Date(_data["time"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ResponseStatus {
        data = typeof data === 'object' ? data : {};
        let result = new ResponseStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["response"] = this.response;
        data["time"] = this.time ? this.time.toISOString() : <any>undefined;
        return data;
    }
}

export interface IResponseStatus {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The response type. Possible values are: none, organizer, tentativelyAccepted, accepted, declined, notResponded.To differentiate between none and notResponded:  none – from organizer's perspective. This value is used when the status of an attendee/participant is reported to the organizer of a meeting.  notResponded – from attendee's perspective. Indicates the attendee has not responded to the meeting request.  Clients can treat notResponded == none.  As an example, if attendee Alex hasn't responded to a meeting request, getting Alex' response status for that event in Alex' calendar returns notResponded. Getting Alex' response from the calendar of any other attendee or the organizer's returns none. Getting the organizer's response for the event in anybody's calendar also returns none. */
    response?: ResponseType | undefined;
    /** The date and time when the response was returned. It uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    time?: Date | undefined;
}

export enum ResponseType {
    None = 0,
    Organizer = 1,
    TentativelyAccepted = 2,
    Accepted = 3,
    Declined = 4,
    NotResponded = 5,
}

export enum AttendeeType {
    Required = 0,
    Optional = 1,
    Resource = 2,
}

export class ItemBody implements IItemBody {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The content of the item. */
    content?: string | undefined;
    /** The type of the content. Possible values are text and html. */
    contentType?: BodyType | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IItemBody) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.content = _data["content"];
            this.contentType = _data["contentType"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ItemBody {
        data = typeof data === 'object' ? data : {};
        let result = new ItemBody();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["content"] = this.content;
        data["contentType"] = this.contentType;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IItemBody {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The content of the item. */
    content?: string | undefined;
    /** The type of the content. Possible values are text and html. */
    contentType?: BodyType | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum BodyType {
    Text = 0,
    Html = 1,
}

export enum Importance {
    Low = 0,
    Normal = 1,
    High = 2,
}

export class Location implements ILocation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The street address of the location. */
    address?: PhysicalAddress | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The geographic coordinates and elevation of the location. */
    coordinates?: OutlookGeoCoordinates | undefined;
    /** The name associated with the location. */
    displayName?: string | undefined;
    /** Optional email address of the location. */
    locationEmailAddress?: string | undefined;
    /** The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only. */
    locationType?: LocationType | undefined;
    /** Optional URI representing the location. */
    locationUri?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** For internal use only. */
    uniqueId?: string | undefined;
    /** For internal use only. */
    uniqueIdType?: LocationUniqueIdType | undefined;

    constructor(data?: ILocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.address = _data["address"] ? PhysicalAddress.fromJS(_data["address"]) : <any>undefined;
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.coordinates = _data["coordinates"] ? OutlookGeoCoordinates.fromJS(_data["coordinates"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.locationEmailAddress = _data["locationEmailAddress"];
            this.locationType = _data["locationType"];
            this.locationUri = _data["locationUri"];
            this.odataType = _data["odataType"];
            this.uniqueId = _data["uniqueId"];
            this.uniqueIdType = _data["uniqueIdType"];
        }
    }

    static fromJS(data: any): Location {
        data = typeof data === 'object' ? data : {};
        let result = new Location();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["address"] = this.address ? this.address.toJSON() : <any>undefined;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["coordinates"] = this.coordinates ? this.coordinates.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["locationEmailAddress"] = this.locationEmailAddress;
        data["locationType"] = this.locationType;
        data["locationUri"] = this.locationUri;
        data["odataType"] = this.odataType;
        data["uniqueId"] = this.uniqueId;
        data["uniqueIdType"] = this.uniqueIdType;
        return data;
    }
}

export interface ILocation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The street address of the location. */
    address?: PhysicalAddress | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The geographic coordinates and elevation of the location. */
    coordinates?: OutlookGeoCoordinates | undefined;
    /** The name associated with the location. */
    displayName?: string | undefined;
    /** Optional email address of the location. */
    locationEmailAddress?: string | undefined;
    /** The type of location. The possible values are: default, conferenceRoom, homeAddress, businessAddress,geoCoordinates, streetAddress, hotel, restaurant, localBusiness, postalAddress. Read-only. */
    locationType?: LocationType | undefined;
    /** Optional URI representing the location. */
    locationUri?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** For internal use only. */
    uniqueId?: string | undefined;
    /** For internal use only. */
    uniqueIdType?: LocationUniqueIdType | undefined;
}

export class PhysicalAddress implements IPhysicalAddress {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The city. */
    city?: string | undefined;
    /** The country or region. It's a free-format string value, for example, 'United States'. */
    countryOrRegion?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The postal code. */
    postalCode?: string | undefined;
    /** The state. */
    state?: string | undefined;
    /** The street. */
    street?: string | undefined;

    constructor(data?: IPhysicalAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.city = _data["city"];
            this.countryOrRegion = _data["countryOrRegion"];
            this.odataType = _data["odataType"];
            this.postalCode = _data["postalCode"];
            this.state = _data["state"];
            this.street = _data["street"];
        }
    }

    static fromJS(data: any): PhysicalAddress {
        data = typeof data === 'object' ? data : {};
        let result = new PhysicalAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["city"] = this.city;
        data["countryOrRegion"] = this.countryOrRegion;
        data["odataType"] = this.odataType;
        data["postalCode"] = this.postalCode;
        data["state"] = this.state;
        data["street"] = this.street;
        return data;
    }
}

export interface IPhysicalAddress {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The city. */
    city?: string | undefined;
    /** The country or region. It's a free-format string value, for example, 'United States'. */
    countryOrRegion?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The postal code. */
    postalCode?: string | undefined;
    /** The state. */
    state?: string | undefined;
    /** The street. */
    street?: string | undefined;
}

export class OutlookGeoCoordinates implements IOutlookGeoCoordinates {
    /** The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters. */
    accuracy?: number | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The altitude of the location. */
    altitude?: number | undefined;
    /** The accuracy of the altitude. */
    altitudeAccuracy?: number | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The latitude of the location. */
    latitude?: number | undefined;
    /** The longitude of the location. */
    longitude?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IOutlookGeoCoordinates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accuracy = _data["accuracy"];
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.altitude = _data["altitude"];
            this.altitudeAccuracy = _data["altitudeAccuracy"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): OutlookGeoCoordinates {
        data = typeof data === 'object' ? data : {};
        let result = new OutlookGeoCoordinates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accuracy"] = this.accuracy;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["altitude"] = this.altitude;
        data["altitudeAccuracy"] = this.altitudeAccuracy;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IOutlookGeoCoordinates {
    /** The accuracy of the latitude and longitude. As an example, the accuracy can be measured in meters, such as the latitude and longitude are accurate to within 50 meters. */
    accuracy?: number | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The altitude of the location. */
    altitude?: number | undefined;
    /** The accuracy of the altitude. */
    altitudeAccuracy?: number | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The latitude of the location. */
    latitude?: number | undefined;
    /** The longitude of the location. */
    longitude?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum LocationType {
    Default = 0,
    ConferenceRoom = 1,
    HomeAddress = 2,
    BusinessAddress = 3,
    GeoCoordinates = 4,
    StreetAddress = 5,
    Hotel = 6,
    Restaurant = 7,
    LocalBusiness = 8,
    PostalAddress = 9,
}

export enum LocationUniqueIdType {
    Unknown = 0,
    LocationStore = 1,
    Directory = 2,
    Private = 3,
    Bing = 4,
}

export class MultiValueLegacyExtendedProperty extends Entity implements IMultiValueLegacyExtendedProperty {
    /** A collection of property values. */
    value?: string[] | undefined;

    constructor(data?: IMultiValueLegacyExtendedProperty) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(item);
            }
        }
    }

    static override fromJS(data: any): MultiValueLegacyExtendedProperty {
        data = typeof data === 'object' ? data : {};
        let result = new MultiValueLegacyExtendedProperty();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IMultiValueLegacyExtendedProperty extends IEntity {
    /** A collection of property values. */
    value?: string[] | undefined;
}

export class OnlineMeetingInfo implements IOnlineMeetingInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The ID of the conference. */
    conferenceId?: string | undefined;
    /** The external link that launches the online meeting. This is a URL that clients launch into a browser and will redirect the user to join the meeting. */
    joinUrl?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** All of the phone numbers associated with this conference. */
    phones?: Phone[] | undefined;
    /** The preformatted quick dial for this call. */
    quickDial?: string | undefined;
    /** The toll free numbers that can be used to join the conference. */
    tollFreeNumbers?: string[] | undefined;
    /** The toll number that can be used to join the conference. */
    tollNumber?: string | undefined;

    constructor(data?: IOnlineMeetingInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.conferenceId = _data["conferenceId"];
            this.joinUrl = _data["joinUrl"];
            this.odataType = _data["odataType"];
            if (Array.isArray(_data["phones"])) {
                this.phones = [] as any;
                for (let item of _data["phones"])
                    this.phones!.push(Phone.fromJS(item));
            }
            this.quickDial = _data["quickDial"];
            if (Array.isArray(_data["tollFreeNumbers"])) {
                this.tollFreeNumbers = [] as any;
                for (let item of _data["tollFreeNumbers"])
                    this.tollFreeNumbers!.push(item);
            }
            this.tollNumber = _data["tollNumber"];
        }
    }

    static fromJS(data: any): OnlineMeetingInfo {
        data = typeof data === 'object' ? data : {};
        let result = new OnlineMeetingInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["conferenceId"] = this.conferenceId;
        data["joinUrl"] = this.joinUrl;
        data["odataType"] = this.odataType;
        if (Array.isArray(this.phones)) {
            data["phones"] = [];
            for (let item of this.phones)
                data["phones"].push(item.toJSON());
        }
        data["quickDial"] = this.quickDial;
        if (Array.isArray(this.tollFreeNumbers)) {
            data["tollFreeNumbers"] = [];
            for (let item of this.tollFreeNumbers)
                data["tollFreeNumbers"].push(item);
        }
        data["tollNumber"] = this.tollNumber;
        return data;
    }
}

export interface IOnlineMeetingInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The ID of the conference. */
    conferenceId?: string | undefined;
    /** The external link that launches the online meeting. This is a URL that clients launch into a browser and will redirect the user to join the meeting. */
    joinUrl?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** All of the phone numbers associated with this conference. */
    phones?: Phone[] | undefined;
    /** The preformatted quick dial for this call. */
    quickDial?: string | undefined;
    /** The toll free numbers that can be used to join the conference. */
    tollFreeNumbers?: string[] | undefined;
    /** The toll number that can be used to join the conference. */
    tollNumber?: string | undefined;
}

export class Phone implements IPhone {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The language property */
    language?: string | undefined;
    /** The phone number. */
    number?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The region property */
    region?: string | undefined;
    /** The type of phone number. The possible values are: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio. */
    type?: PhoneType | undefined;

    constructor(data?: IPhone) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.language = _data["language"];
            this.number = _data["number"];
            this.odataType = _data["odataType"];
            this.region = _data["region"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Phone {
        data = typeof data === 'object' ? data : {};
        let result = new Phone();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["language"] = this.language;
        data["number"] = this.number;
        data["odataType"] = this.odataType;
        data["region"] = this.region;
        data["type"] = this.type;
        return data;
    }
}

export interface IPhone {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The language property */
    language?: string | undefined;
    /** The phone number. */
    number?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The region property */
    region?: string | undefined;
    /** The type of phone number. The possible values are: home, business, mobile, other, assistant, homeFax, businessFax, otherFax, pager, radio. */
    type?: PhoneType | undefined;
}

export enum PhoneType {
    Home = 0,
    Business = 1,
    Mobile = 2,
    Other = 3,
    Assistant = 4,
    HomeFax = 5,
    BusinessFax = 6,
    OtherFax = 7,
    Pager = 8,
    Radio = 9,
}

export class PatternedRecurrence implements IPatternedRecurrence {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The frequency of an event.  For access reviews: Do not specify this property for a one-time access review.  Only interval, dayOfMonth, and type (weekly, absoluteMonthly) properties of recurrencePattern are supported. */
    pattern?: RecurrencePattern | undefined;
    /** The duration of an event. */
    range?: RecurrenceRange | undefined;

    constructor(data?: IPatternedRecurrence) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.pattern = _data["pattern"] ? RecurrencePattern.fromJS(_data["pattern"]) : <any>undefined;
            this.range = _data["range"] ? RecurrenceRange.fromJS(_data["range"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PatternedRecurrence {
        data = typeof data === 'object' ? data : {};
        let result = new PatternedRecurrence();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["pattern"] = this.pattern ? this.pattern.toJSON() : <any>undefined;
        data["range"] = this.range ? this.range.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPatternedRecurrence {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The frequency of an event.  For access reviews: Do not specify this property for a one-time access review.  Only interval, dayOfMonth, and type (weekly, absoluteMonthly) properties of recurrencePattern are supported. */
    pattern?: RecurrencePattern | undefined;
    /** The duration of an event. */
    range?: RecurrenceRange | undefined;
}

export class RecurrencePattern implements IRecurrencePattern {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The day of the month on which the event occurs. Required if type is absoluteMonthly or absoluteYearly. */
    dayOfMonth?: number | undefined;
    /** A collection of the days of the week on which the event occurs. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or relativeYearly. */
    daysOfWeek?: (DayOfWeekObject | undefined)[] | undefined;
    /** The first day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. Default is sunday. Required if type is weekly. */
    firstDayOfWeek?: DayOfWeekObject | undefined;
    /** Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last. Default is first. Optional and used if type is relativeMonthly or relativeYearly. */
    index?: WeekIndex | undefined;
    /** The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type. Required. */
    interval?: number | undefined;
    /** The month in which the event occurs.  This is a number from 1 to 12. */
    month?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly. Required. For more information, see values of type property. */
    type?: RecurrencePatternType | undefined;

    constructor(data?: IRecurrencePattern) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.dayOfMonth = _data["dayOfMonth"];
            if (Array.isArray(_data["daysOfWeek"])) {
                this.daysOfWeek = [] as any;
                for (let item of _data["daysOfWeek"])
                    this.daysOfWeek!.push(item);
            }
            this.firstDayOfWeek = _data["firstDayOfWeek"];
            this.index = _data["index"];
            this.interval = _data["interval"];
            this.month = _data["month"];
            this.odataType = _data["odataType"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): RecurrencePattern {
        data = typeof data === 'object' ? data : {};
        let result = new RecurrencePattern();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["dayOfMonth"] = this.dayOfMonth;
        if (Array.isArray(this.daysOfWeek)) {
            data["daysOfWeek"] = [];
            for (let item of this.daysOfWeek)
                data["daysOfWeek"].push(item);
        }
        data["firstDayOfWeek"] = this.firstDayOfWeek;
        data["index"] = this.index;
        data["interval"] = this.interval;
        data["month"] = this.month;
        data["odataType"] = this.odataType;
        data["type"] = this.type;
        return data;
    }
}

export interface IRecurrencePattern {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The day of the month on which the event occurs. Required if type is absoluteMonthly or absoluteYearly. */
    dayOfMonth?: number | undefined;
    /** A collection of the days of the week on which the event occurs. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. If type is relativeMonthly or relativeYearly, and daysOfWeek specifies more than one day, the event falls on the first day that satisfies the pattern.  Required if type is weekly, relativeMonthly, or relativeYearly. */
    daysOfWeek?: (DayOfWeekObject | undefined)[] | undefined;
    /** The first day of the week. The possible values are: sunday, monday, tuesday, wednesday, thursday, friday, saturday. Default is sunday. Required if type is weekly. */
    firstDayOfWeek?: DayOfWeekObject | undefined;
    /** Specifies on which instance of the allowed days specified in daysOfWeek the event occurs, counted from the first instance in the month. The possible values are: first, second, third, fourth, last. Default is first. Optional and used if type is relativeMonthly or relativeYearly. */
    index?: WeekIndex | undefined;
    /** The number of units between occurrences, where units can be in days, weeks, months, or years, depending on the type. Required. */
    interval?: number | undefined;
    /** The month in which the event occurs.  This is a number from 1 to 12. */
    month?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The recurrence pattern type: daily, weekly, absoluteMonthly, relativeMonthly, absoluteYearly, relativeYearly. Required. For more information, see values of type property. */
    type?: RecurrencePatternType | undefined;
}

export enum DayOfWeekObject {
    Sunday = 0,
    Monday = 1,
    Tuesday = 2,
    Wednesday = 3,
    Thursday = 4,
    Friday = 5,
    Saturday = 6,
}

export enum WeekIndex {
    First = 0,
    Second = 1,
    Third = 2,
    Fourth = 3,
    Last = 4,
}

export enum RecurrencePatternType {
    Daily = 0,
    Weekly = 1,
    AbsoluteMonthly = 2,
    RelativeMonthly = 3,
    AbsoluteYearly = 4,
    RelativeYearly = 5,
}

export class RecurrenceRange implements IRecurrenceRange {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date to stop applying the recurrence pattern. Depending on the recurrence pattern of the event, the last occurrence of the meeting may not be this date. Required if type is endDate. */
    endDate?: DateDto | undefined;
    /** The number of times to repeat the event. Required and must be positive if type is numbered. */
    numberOfOccurrences?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Time zone for the startDate and endDate properties. Optional. If not specified, the time zone of the event is used. */
    recurrenceTimeZone?: string | undefined;
    /** The date to start applying the recurrence pattern. The first occurrence of the meeting may be this date or later, depending on the recurrence pattern of the event. Must be the same value as the start property of the recurring event. Required. */
    startDate?: DateDto | undefined;
    /** The recurrence range. The possible values are: endDate, noEnd, numbered. Required. */
    type?: RecurrenceRangeType | undefined;

    constructor(data?: IRecurrenceRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.endDate = _data["endDate"] ? DateDto.fromJS(_data["endDate"]) : <any>undefined;
            this.numberOfOccurrences = _data["numberOfOccurrences"];
            this.odataType = _data["odataType"];
            this.recurrenceTimeZone = _data["recurrenceTimeZone"];
            this.startDate = _data["startDate"] ? DateDto.fromJS(_data["startDate"]) : <any>undefined;
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): RecurrenceRange {
        data = typeof data === 'object' ? data : {};
        let result = new RecurrenceRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toJSON() : <any>undefined;
        data["numberOfOccurrences"] = this.numberOfOccurrences;
        data["odataType"] = this.odataType;
        data["recurrenceTimeZone"] = this.recurrenceTimeZone;
        data["startDate"] = this.startDate ? this.startDate.toJSON() : <any>undefined;
        data["type"] = this.type;
        return data;
    }
}

export interface IRecurrenceRange {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date to stop applying the recurrence pattern. Depending on the recurrence pattern of the event, the last occurrence of the meeting may not be this date. Required if type is endDate. */
    endDate?: DateDto | undefined;
    /** The number of times to repeat the event. Required and must be positive if type is numbered. */
    numberOfOccurrences?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Time zone for the startDate and endDate properties. Optional. If not specified, the time zone of the event is used. */
    recurrenceTimeZone?: string | undefined;
    /** The date to start applying the recurrence pattern. The first occurrence of the meeting may be this date or later, depending on the recurrence pattern of the event. Must be the same value as the start property of the recurring event. Required. */
    startDate?: DateDto | undefined;
    /** The recurrence range. The possible values are: endDate, noEnd, numbered. Required. */
    type?: RecurrenceRangeType | undefined;
}

/** Model to represent only the date component of a DateTime */
export class DateDto implements IDateDto {
    /** The DateTime object. */
    dateTime?: Date;
    /** The date's year. */
    year?: number;
    /** The date's month. */
    month?: number;
    /** The date's day. */
    day?: number;

    constructor(data?: IDateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
        }
    }

    static fromJS(data: any): DateDto {
        data = typeof data === 'object' ? data : {};
        let result = new DateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        return data;
    }
}

/** Model to represent only the date component of a DateTime */
export interface IDateDto {
    /** The DateTime object. */
    dateTime?: Date;
    /** The date's year. */
    year?: number;
    /** The date's month. */
    month?: number;
    /** The date's day. */
    day?: number;
}

export enum RecurrenceRangeType {
    EndDate = 0,
    NoEnd = 1,
    Numbered = 2,
}

export enum Sensitivity {
    Normal = 0,
    Personal = 1,
    Private = 2,
    Confidential = 3,
}

export enum FreeBusyStatus {
    Unknown = 0,
    Free = 1,
    Tentative = 2,
    Busy = 3,
    Oof = 4,
    WorkingElsewhere = 5,
}

export class SingleValueLegacyExtendedProperty extends Entity implements ISingleValueLegacyExtendedProperty {
    /** A property value. */
    value?: string | undefined;

    constructor(data?: ISingleValueLegacyExtendedProperty) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): SingleValueLegacyExtendedProperty {
        data = typeof data === 'object' ? data : {};
        let result = new SingleValueLegacyExtendedProperty();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface ISingleValueLegacyExtendedProperty extends IEntity {
    /** A property value. */
    value?: string | undefined;
}

export enum EventType {
    SingleInstance = 0,
    Occurrence = 1,
    Exception = 2,
    SeriesMaster = 3,
}

export enum CalendarColor {
    Auto = 0,
    LightBlue = 1,
    LightGreen = 2,
    LightOrange = 3,
    LightGray = 4,
    LightYellow = 5,
    LightTeal = 6,
    LightPink = 7,
    LightBrown = 8,
    LightRed = 9,
    MaxColor = 10,
}

export class CalendarGroup extends Entity implements ICalendarGroup {
    /** The calendars in the calendar group. Navigation property. Read-only. Nullable. */
    calendars?: Calendar[] | undefined;
    /** Identifies the version of the calendar group. Every time the calendar group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only. */
    changeKey?: string | undefined;
    /** The class identifier. Read-only. */
    classId?: string | undefined;
    /** The group name. */
    name?: string | undefined;

    constructor(data?: ICalendarGroup) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["calendars"])) {
                this.calendars = [] as any;
                for (let item of _data["calendars"])
                    this.calendars!.push(Calendar.fromJS(item));
            }
            this.changeKey = _data["changeKey"];
            this.classId = _data["classId"];
            this.name = _data["name"];
        }
    }

    static override fromJS(data: any): CalendarGroup {
        data = typeof data === 'object' ? data : {};
        let result = new CalendarGroup();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.calendars)) {
            data["calendars"] = [];
            for (let item of this.calendars)
                data["calendars"].push(item.toJSON());
        }
        data["changeKey"] = this.changeKey;
        data["classId"] = this.classId;
        data["name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export interface ICalendarGroup extends IEntity {
    /** The calendars in the calendar group. Navigation property. Read-only. Nullable. */
    calendars?: Calendar[] | undefined;
    /** Identifies the version of the calendar group. Every time the calendar group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only. */
    changeKey?: string | undefined;
    /** The class identifier. Read-only. */
    classId?: string | undefined;
    /** The group name. */
    name?: string | undefined;
}

export class Chat extends Entity implements IChat {
    /** The chatType property */
    chatType?: ChatType | undefined;
    /** Date and time at which the chat was created. Read-only. */
    createdDateTime?: Date | undefined;
    /** A collection of all the apps in the chat. Nullable. */
    installedApps?: TeamsAppInstallation[] | undefined;
    /** Preview of the last message sent in the chat. Null if no messages were sent in the chat. Currently, only the list chats operation supports this property. */
    lastMessagePreview?: ChatMessageInfo | undefined;
    /** Date and time at which the chat was renamed or the list of members was last changed. Read-only. */
    lastUpdatedDateTime?: Date | undefined;
    /** A collection of all the members in the chat. Nullable. */
    members?: ConversationMember[] | undefined;
    /** A collection of all the messages in the chat. Nullable. */
    messages?: ChatMessage[] | undefined;
    /** Represents details about an online meeting. If the chat isn't associated with an online meeting, the property is empty. Read-only. */
    onlineMeetingInfo?: TeamworkOnlineMeetingInfo | undefined;
    /** A collection of permissions granted to apps for the chat. */
    permissionGrants?: ResourceSpecificPermissionGrant[] | undefined;
    /** A collection of all the pinned messages in the chat. Nullable. */
    pinnedMessages?: PinnedChatMessageInfo[] | undefined;
    /** A collection of all the tabs in the chat. Nullable. */
    tabs?: TeamsTab[] | undefined;
    /** The identifier of the tenant in which the chat was created. Read-only. */
    tenantId?: string | undefined;
    /** (Optional) Subject or topic for the chat. Only available for group chats. */
    topic?: string | undefined;
    /** Represents caller-specific information about the chat, such as the last message read date and time. This property is populated only when the request is made in a delegated context. */
    viewpoint?: ChatViewpoint | undefined;
    /** The URL for the chat in Microsoft Teams. The URL should be treated as an opaque blob, and not parsed. Read-only. */
    webUrl?: string | undefined;

    constructor(data?: IChat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.chatType = _data["chatType"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["installedApps"])) {
                this.installedApps = [] as any;
                for (let item of _data["installedApps"])
                    this.installedApps!.push(TeamsAppInstallation.fromJS(item));
            }
            this.lastMessagePreview = _data["lastMessagePreview"] ? ChatMessageInfo.fromJS(_data["lastMessagePreview"]) : <any>undefined;
            this.lastUpdatedDateTime = _data["lastUpdatedDateTime"] ? new Date(_data["lastUpdatedDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(ConversationMember.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ChatMessage.fromJS(item));
            }
            this.onlineMeetingInfo = _data["onlineMeetingInfo"] ? TeamworkOnlineMeetingInfo.fromJS(_data["onlineMeetingInfo"]) : <any>undefined;
            if (Array.isArray(_data["permissionGrants"])) {
                this.permissionGrants = [] as any;
                for (let item of _data["permissionGrants"])
                    this.permissionGrants!.push(ResourceSpecificPermissionGrant.fromJS(item));
            }
            if (Array.isArray(_data["pinnedMessages"])) {
                this.pinnedMessages = [] as any;
                for (let item of _data["pinnedMessages"])
                    this.pinnedMessages!.push(PinnedChatMessageInfo.fromJS(item));
            }
            if (Array.isArray(_data["tabs"])) {
                this.tabs = [] as any;
                for (let item of _data["tabs"])
                    this.tabs!.push(TeamsTab.fromJS(item));
            }
            this.tenantId = _data["tenantId"];
            this.topic = _data["topic"];
            this.viewpoint = _data["viewpoint"] ? ChatViewpoint.fromJS(_data["viewpoint"]) : <any>undefined;
            this.webUrl = _data["webUrl"];
        }
    }

    static override fromJS(data: any): Chat {
        data = typeof data === 'object' ? data : {};
        let result = new Chat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chatType"] = this.chatType;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.installedApps)) {
            data["installedApps"] = [];
            for (let item of this.installedApps)
                data["installedApps"].push(item.toJSON());
        }
        data["lastMessagePreview"] = this.lastMessagePreview ? this.lastMessagePreview.toJSON() : <any>undefined;
        data["lastUpdatedDateTime"] = this.lastUpdatedDateTime ? this.lastUpdatedDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        data["onlineMeetingInfo"] = this.onlineMeetingInfo ? this.onlineMeetingInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.permissionGrants)) {
            data["permissionGrants"] = [];
            for (let item of this.permissionGrants)
                data["permissionGrants"].push(item.toJSON());
        }
        if (Array.isArray(this.pinnedMessages)) {
            data["pinnedMessages"] = [];
            for (let item of this.pinnedMessages)
                data["pinnedMessages"].push(item.toJSON());
        }
        if (Array.isArray(this.tabs)) {
            data["tabs"] = [];
            for (let item of this.tabs)
                data["tabs"].push(item.toJSON());
        }
        data["tenantId"] = this.tenantId;
        data["topic"] = this.topic;
        data["viewpoint"] = this.viewpoint ? this.viewpoint.toJSON() : <any>undefined;
        data["webUrl"] = this.webUrl;
        super.toJSON(data);
        return data;
    }
}

export interface IChat extends IEntity {
    /** The chatType property */
    chatType?: ChatType | undefined;
    /** Date and time at which the chat was created. Read-only. */
    createdDateTime?: Date | undefined;
    /** A collection of all the apps in the chat. Nullable. */
    installedApps?: TeamsAppInstallation[] | undefined;
    /** Preview of the last message sent in the chat. Null if no messages were sent in the chat. Currently, only the list chats operation supports this property. */
    lastMessagePreview?: ChatMessageInfo | undefined;
    /** Date and time at which the chat was renamed or the list of members was last changed. Read-only. */
    lastUpdatedDateTime?: Date | undefined;
    /** A collection of all the members in the chat. Nullable. */
    members?: ConversationMember[] | undefined;
    /** A collection of all the messages in the chat. Nullable. */
    messages?: ChatMessage[] | undefined;
    /** Represents details about an online meeting. If the chat isn't associated with an online meeting, the property is empty. Read-only. */
    onlineMeetingInfo?: TeamworkOnlineMeetingInfo | undefined;
    /** A collection of permissions granted to apps for the chat. */
    permissionGrants?: ResourceSpecificPermissionGrant[] | undefined;
    /** A collection of all the pinned messages in the chat. Nullable. */
    pinnedMessages?: PinnedChatMessageInfo[] | undefined;
    /** A collection of all the tabs in the chat. Nullable. */
    tabs?: TeamsTab[] | undefined;
    /** The identifier of the tenant in which the chat was created. Read-only. */
    tenantId?: string | undefined;
    /** (Optional) Subject or topic for the chat. Only available for group chats. */
    topic?: string | undefined;
    /** Represents caller-specific information about the chat, such as the last message read date and time. This property is populated only when the request is made in a delegated context. */
    viewpoint?: ChatViewpoint | undefined;
    /** The URL for the chat in Microsoft Teams. The URL should be treated as an opaque blob, and not parsed. Read-only. */
    webUrl?: string | undefined;
}

export enum ChatType {
    OneOnOne = 0,
    Group = 1,
    Meeting = 2,
    UnknownFutureValue = 3,
}

export class TeamsAppInstallation extends Entity implements ITeamsAppInstallation {
    /** The set of resource-specific permissions consented to while installing or upgrading the teamsApp. */
    consentedPermissionSet?: TeamsAppPermissionSet | undefined;
    /** The app that is installed. */
    teamsApp?: TeamsApp | undefined;
    /** The details of this version of the app. */
    teamsAppDefinition?: TeamsAppDefinition | undefined;

    constructor(data?: ITeamsAppInstallation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.consentedPermissionSet = _data["consentedPermissionSet"] ? TeamsAppPermissionSet.fromJS(_data["consentedPermissionSet"]) : <any>undefined;
            this.teamsApp = _data["teamsApp"] ? TeamsApp.fromJS(_data["teamsApp"]) : <any>undefined;
            this.teamsAppDefinition = _data["teamsAppDefinition"] ? TeamsAppDefinition.fromJS(_data["teamsAppDefinition"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): TeamsAppInstallation {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsAppInstallation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["consentedPermissionSet"] = this.consentedPermissionSet ? this.consentedPermissionSet.toJSON() : <any>undefined;
        data["teamsApp"] = this.teamsApp ? this.teamsApp.toJSON() : <any>undefined;
        data["teamsAppDefinition"] = this.teamsAppDefinition ? this.teamsAppDefinition.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamsAppInstallation extends IEntity {
    /** The set of resource-specific permissions consented to while installing or upgrading the teamsApp. */
    consentedPermissionSet?: TeamsAppPermissionSet | undefined;
    /** The app that is installed. */
    teamsApp?: TeamsApp | undefined;
    /** The details of this version of the app. */
    teamsAppDefinition?: TeamsAppDefinition | undefined;
}

export class TeamsAppPermissionSet implements ITeamsAppPermissionSet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A collection of resource-specific permissions. */
    resourceSpecificPermissions?: TeamsAppResourceSpecificPermission[] | undefined;

    constructor(data?: ITeamsAppPermissionSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            if (Array.isArray(_data["resourceSpecificPermissions"])) {
                this.resourceSpecificPermissions = [] as any;
                for (let item of _data["resourceSpecificPermissions"])
                    this.resourceSpecificPermissions!.push(TeamsAppResourceSpecificPermission.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TeamsAppPermissionSet {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsAppPermissionSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        if (Array.isArray(this.resourceSpecificPermissions)) {
            data["resourceSpecificPermissions"] = [];
            for (let item of this.resourceSpecificPermissions)
                data["resourceSpecificPermissions"].push(item.toJSON());
        }
        return data;
    }
}

export interface ITeamsAppPermissionSet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A collection of resource-specific permissions. */
    resourceSpecificPermissions?: TeamsAppResourceSpecificPermission[] | undefined;
}

export class TeamsAppResourceSpecificPermission implements ITeamsAppResourceSpecificPermission {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The type of resource-specific permission. */
    permissionType?: TeamsAppResourceSpecificPermissionType | undefined;
    /** The name of the resource-specific permission. */
    permissionValue?: string | undefined;

    constructor(data?: ITeamsAppResourceSpecificPermission) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.permissionType = _data["permissionType"];
            this.permissionValue = _data["permissionValue"];
        }
    }

    static fromJS(data: any): TeamsAppResourceSpecificPermission {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsAppResourceSpecificPermission();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["permissionType"] = this.permissionType;
        data["permissionValue"] = this.permissionValue;
        return data;
    }
}

export interface ITeamsAppResourceSpecificPermission {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The type of resource-specific permission. */
    permissionType?: TeamsAppResourceSpecificPermissionType | undefined;
    /** The name of the resource-specific permission. */
    permissionValue?: string | undefined;
}

export enum TeamsAppResourceSpecificPermissionType {
    Delegated = 0,
    Application = 1,
    UnknownFutureValue = 2,
}

export class TeamsApp extends Entity implements ITeamsApp {
    /** The details for each version of the app. */
    appDefinitions?: TeamsAppDefinition[] | undefined;
    /** The name of the catalog app provided by the app developer in the Microsoft Teams zip app package. */
    displayName?: string | undefined;
    /** The method of distribution for the app. Read-only. */
    distributionMethod?: TeamsAppDistributionMethod | undefined;
    /** The ID of the catalog provided by the app developer in the Microsoft Teams zip app package. */
    externalId?: string | undefined;

    constructor(data?: ITeamsApp) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["appDefinitions"])) {
                this.appDefinitions = [] as any;
                for (let item of _data["appDefinitions"])
                    this.appDefinitions!.push(TeamsAppDefinition.fromJS(item));
            }
            this.displayName = _data["displayName"];
            this.distributionMethod = _data["distributionMethod"];
            this.externalId = _data["externalId"];
        }
    }

    static override fromJS(data: any): TeamsApp {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsApp();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.appDefinitions)) {
            data["appDefinitions"] = [];
            for (let item of this.appDefinitions)
                data["appDefinitions"].push(item.toJSON());
        }
        data["displayName"] = this.displayName;
        data["distributionMethod"] = this.distributionMethod;
        data["externalId"] = this.externalId;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamsApp extends IEntity {
    /** The details for each version of the app. */
    appDefinitions?: TeamsAppDefinition[] | undefined;
    /** The name of the catalog app provided by the app developer in the Microsoft Teams zip app package. */
    displayName?: string | undefined;
    /** The method of distribution for the app. Read-only. */
    distributionMethod?: TeamsAppDistributionMethod | undefined;
    /** The ID of the catalog provided by the app developer in the Microsoft Teams zip app package. */
    externalId?: string | undefined;
}

export class TeamsAppDefinition extends Entity implements ITeamsAppDefinition {
    /** Authorization requirements specified in the Teams app manifest. */
    authorization?: TeamsAppAuthorization | undefined;
    /** The details of the bot specified in the Teams app manifest. */
    bot?: TeamworkBot | undefined;
    /** The createdBy property */
    createdBy?: IdentitySet | undefined;
    /** Verbose description of the application. */
    description?: string | undefined;
    /** The name of the app provided by the app developer. */
    displayName?: string | undefined;
    /** The lastModifiedDateTime property */
    lastModifiedDateTime?: Date | undefined;
    /** The published status of a specific version of a Teams app. Possible values are:submitted—The specific version of the Teams app was submitted and is under review.published—The request to publish the specific version of the Teams app was approved by the admin and the app is published.rejected—The admin rejected the request to publish the specific version of the Teams app. */
    publishingState?: TeamsAppPublishingState | undefined;
    /** Short description of the application. */
    shortDescription?: string | undefined;
    /** The ID from the Teams app manifest. */
    teamsAppId?: string | undefined;
    /** The version number of the application. */
    version?: string | undefined;

    constructor(data?: ITeamsAppDefinition) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.authorization = _data["authorization"] ? TeamsAppAuthorization.fromJS(_data["authorization"]) : <any>undefined;
            this.bot = _data["bot"] ? TeamworkBot.fromJS(_data["bot"]) : <any>undefined;
            this.createdBy = _data["createdBy"] ? IdentitySet.fromJS(_data["createdBy"]) : <any>undefined;
            this.description = _data["description"];
            this.displayName = _data["displayName"];
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.publishingState = _data["publishingState"];
            this.shortDescription = _data["shortDescription"];
            this.teamsAppId = _data["teamsAppId"];
            this.version = _data["version"];
        }
    }

    static override fromJS(data: any): TeamsAppDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsAppDefinition();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authorization"] = this.authorization ? this.authorization.toJSON() : <any>undefined;
        data["bot"] = this.bot ? this.bot.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["publishingState"] = this.publishingState;
        data["shortDescription"] = this.shortDescription;
        data["teamsAppId"] = this.teamsAppId;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamsAppDefinition extends IEntity {
    /** Authorization requirements specified in the Teams app manifest. */
    authorization?: TeamsAppAuthorization | undefined;
    /** The details of the bot specified in the Teams app manifest. */
    bot?: TeamworkBot | undefined;
    /** The createdBy property */
    createdBy?: IdentitySet | undefined;
    /** Verbose description of the application. */
    description?: string | undefined;
    /** The name of the app provided by the app developer. */
    displayName?: string | undefined;
    /** The lastModifiedDateTime property */
    lastModifiedDateTime?: Date | undefined;
    /** The published status of a specific version of a Teams app. Possible values are:submitted—The specific version of the Teams app was submitted and is under review.published—The request to publish the specific version of the Teams app was approved by the admin and the app is published.rejected—The admin rejected the request to publish the specific version of the Teams app. */
    publishingState?: TeamsAppPublishingState | undefined;
    /** Short description of the application. */
    shortDescription?: string | undefined;
    /** The ID from the Teams app manifest. */
    teamsAppId?: string | undefined;
    /** The version number of the application. */
    version?: string | undefined;
}

export class TeamsAppAuthorization implements ITeamsAppAuthorization {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The registration ID of the Microsoft Entra app ID associated with the teamsApp. */
    clientAppId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Set of permissions required by the teamsApp. */
    requiredPermissionSet?: TeamsAppPermissionSet | undefined;

    constructor(data?: ITeamsAppAuthorization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.clientAppId = _data["clientAppId"];
            this.odataType = _data["odataType"];
            this.requiredPermissionSet = _data["requiredPermissionSet"] ? TeamsAppPermissionSet.fromJS(_data["requiredPermissionSet"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TeamsAppAuthorization {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsAppAuthorization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["clientAppId"] = this.clientAppId;
        data["odataType"] = this.odataType;
        data["requiredPermissionSet"] = this.requiredPermissionSet ? this.requiredPermissionSet.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITeamsAppAuthorization {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The registration ID of the Microsoft Entra app ID associated with the teamsApp. */
    clientAppId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Set of permissions required by the teamsApp. */
    requiredPermissionSet?: TeamsAppPermissionSet | undefined;
}

export class TeamworkBot extends Entity implements ITeamworkBot {

    constructor(data?: ITeamworkBot) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): TeamworkBot {
        data = typeof data === 'object' ? data : {};
        let result = new TeamworkBot();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface ITeamworkBot extends IEntity {
}

export enum TeamsAppPublishingState {
    Submitted = 0,
    Rejected = 1,
    Published = 2,
    UnknownFutureValue = 3,
}

export enum TeamsAppDistributionMethod {
    Store = 0,
    Organization = 1,
    Sideloaded = 2,
    UnknownFutureValue = 3,
}

export class ChatMessageInfo extends Entity implements IChatMessageInfo {
    /** Body of the chatMessage. This will still contain markers for @mentions and attachments even though the object doesn't return @mentions and attachments. */
    body?: ItemBody | undefined;
    /** Date time object representing the time at which message was created. */
    createdDateTime?: Date | undefined;
    /** Read-only.  If present, represents details of an event that happened in a chat, a channel, or a team, for example, members were added, and so on. For event messages, the messageType property is set to systemEventMessage. */
    eventDetail?: EventMessageDetail | undefined;
    /** Information about the sender of the message. */
    from?: ChatMessageFromIdentitySet | undefined;
    /** If set to true, the original message has been deleted. */
    isDeleted?: boolean | undefined;
    /** The messageType property */
    messageType?: ChatMessageType | undefined;

    constructor(data?: IChatMessageInfo) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.body = _data["body"] ? ItemBody.fromJS(_data["body"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.eventDetail = _data["eventDetail"] ? EventMessageDetail.fromJS(_data["eventDetail"]) : <any>undefined;
            this.from = _data["from"] ? ChatMessageFromIdentitySet.fromJS(_data["from"]) : <any>undefined;
            this.isDeleted = _data["isDeleted"];
            this.messageType = _data["messageType"];
        }
    }

    static override fromJS(data: any): ChatMessageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageInfo();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["eventDetail"] = this.eventDetail ? this.eventDetail.toJSON() : <any>undefined;
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        data["isDeleted"] = this.isDeleted;
        data["messageType"] = this.messageType;
        super.toJSON(data);
        return data;
    }
}

export interface IChatMessageInfo extends IEntity {
    /** Body of the chatMessage. This will still contain markers for @mentions and attachments even though the object doesn't return @mentions and attachments. */
    body?: ItemBody | undefined;
    /** Date time object representing the time at which message was created. */
    createdDateTime?: Date | undefined;
    /** Read-only.  If present, represents details of an event that happened in a chat, a channel, or a team, for example, members were added, and so on. For event messages, the messageType property is set to systemEventMessage. */
    eventDetail?: EventMessageDetail | undefined;
    /** Information about the sender of the message. */
    from?: ChatMessageFromIdentitySet | undefined;
    /** If set to true, the original message has been deleted. */
    isDeleted?: boolean | undefined;
    /** The messageType property */
    messageType?: ChatMessageType | undefined;
}

export class EventMessageDetail implements IEventMessageDetail {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IEventMessageDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): EventMessageDetail {
        data = typeof data === 'object' ? data : {};
        let result = new EventMessageDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IEventMessageDetail {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ChatMessageFromIdentitySet extends IdentitySet implements IChatMessageFromIdentitySet {

    constructor(data?: IChatMessageFromIdentitySet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ChatMessageFromIdentitySet {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageFromIdentitySet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IChatMessageFromIdentitySet extends IIdentitySet {
}

export enum ChatMessageType {
    Message = 0,
    ChatEvent = 1,
    Typing = 2,
    UnknownFutureValue = 3,
    SystemEventMessage = 4,
}

export class ConversationMember extends Entity implements IConversationMember {
    /** The display name of the user. */
    displayName?: string | undefined;
    /** The roles for that user. This property contains additional qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member should not have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role. */
    roles?: string[] | undefined;
    /** The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat. */
    visibleHistoryStartDateTime?: Date | undefined;

    constructor(data?: IConversationMember) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.visibleHistoryStartDateTime = _data["visibleHistoryStartDateTime"] ? new Date(_data["visibleHistoryStartDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): ConversationMember {
        data = typeof data === 'object' ? data : {};
        let result = new ConversationMember();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["visibleHistoryStartDateTime"] = this.visibleHistoryStartDateTime ? this.visibleHistoryStartDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IConversationMember extends IEntity {
    /** The display name of the user. */
    displayName?: string | undefined;
    /** The roles for that user. This property contains additional qualifiers only when relevant - for example, if the member has owner privileges, the roles property contains owner as one of the values. Similarly, if the member is an in-tenant guest, the roles property contains guest as one of the values. A basic member should not have any values specified in the roles property. An Out-of-tenant external member is assigned the owner role. */
    roles?: string[] | undefined;
    /** The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat. */
    visibleHistoryStartDateTime?: Date | undefined;
}

export class ChatMessage extends Entity implements IChatMessage {
    /** References to attached objects like files, tabs, meetings etc. */
    attachments?: ChatMessageAttachment[] | undefined;
    /** The body property */
    body?: ItemBody | undefined;
    /** If the message was sent in a channel, represents identity of the channel. */
    channelIdentity?: ChannelIdentity | undefined;
    /** If the message was sent in a chat, represents the identity of the chat. */
    chatId?: string | undefined;
    /** Timestamp of when the chat message was created. */
    createdDateTime?: Date | undefined;
    /** Read only. Timestamp at which the chat message was deleted, or null if not deleted. */
    deletedDateTime?: Date | undefined;
    /** Read-only. Version number of the chat message. */
    etag?: string | undefined;
    /** Read-only. If present, represents details of an event that happened in a chat, a channel, or a team, for example, adding new members. For event messages, the messageType property will be set to systemEventMessage. */
    eventDetail?: EventMessageDetail | undefined;
    /** Details of the sender of the chat message. Can only be set during migration. */
    from?: ChatMessageFromIdentitySet | undefined;
    /** Content in a message hosted by Microsoft Teams - for example, images or code snippets. */
    hostedContents?: ChatMessageHostedContent[] | undefined;
    /** The importance property */
    importance?: ChatMessageImportance | undefined;
    /** Read only. Timestamp when edits to the chat message were made. Triggers an 'Edited' flag in the Teams UI. If no edits are made the value is null. */
    lastEditedDateTime?: Date | undefined;
    /** Read only. Timestamp when the chat message is created (initial setting) or modified, including when a reaction is added or removed. */
    lastModifiedDateTime?: Date | undefined;
    /** Locale of the chat message set by the client. Always set to en-us. */
    locale?: string | undefined;
    /** List of entities mentioned in the chat message. Supported entities are: user, bot, team, and channel. */
    mentions?: ChatMessageMention[] | undefined;
    /** List of activity history of a message item, including modification time and actions, such as reactionAdded, reactionRemoved, or reaction changes, on the message. */
    messageHistory?: ChatMessageHistoryItem[] | undefined;
    /** The messageType property */
    messageType?: ChatMessageType | undefined;
    /** Defines the properties of a policy violation set by a data loss prevention (DLP) application. */
    policyViolation?: ChatMessagePolicyViolation | undefined;
    /** Reactions for this chat message (for example, Like). */
    reactions?: ChatMessageReaction[] | undefined;
    /** Replies for a specified message. Supports $expand for channel messages. */
    replies?: ChatMessage[] | undefined;
    /** Read-only. ID of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels, not chats.) */
    replyToId?: string | undefined;
    /** The subject of the chat message, in plaintext. */
    subject?: string | undefined;
    /** Summary text of the chat message that could be used for push notifications and summary views or fall back views. Only applies to channel chat messages, not chat messages in a chat. */
    summary?: string | undefined;
    /** Read-only. Link to the message in Microsoft Teams. */
    webUrl?: string | undefined;

    constructor(data?: IChatMessage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [] as any;
                for (let item of _data["attachments"])
                    this.attachments!.push(ChatMessageAttachment.fromJS(item));
            }
            this.body = _data["body"] ? ItemBody.fromJS(_data["body"]) : <any>undefined;
            this.channelIdentity = _data["channelIdentity"] ? ChannelIdentity.fromJS(_data["channelIdentity"]) : <any>undefined;
            this.chatId = _data["chatId"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.deletedDateTime = _data["deletedDateTime"] ? new Date(_data["deletedDateTime"].toString()) : <any>undefined;
            this.etag = _data["etag"];
            this.eventDetail = _data["eventDetail"] ? EventMessageDetail.fromJS(_data["eventDetail"]) : <any>undefined;
            this.from = _data["from"] ? ChatMessageFromIdentitySet.fromJS(_data["from"]) : <any>undefined;
            if (Array.isArray(_data["hostedContents"])) {
                this.hostedContents = [] as any;
                for (let item of _data["hostedContents"])
                    this.hostedContents!.push(ChatMessageHostedContent.fromJS(item));
            }
            this.importance = _data["importance"];
            this.lastEditedDateTime = _data["lastEditedDateTime"] ? new Date(_data["lastEditedDateTime"].toString()) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.locale = _data["locale"];
            if (Array.isArray(_data["mentions"])) {
                this.mentions = [] as any;
                for (let item of _data["mentions"])
                    this.mentions!.push(ChatMessageMention.fromJS(item));
            }
            if (Array.isArray(_data["messageHistory"])) {
                this.messageHistory = [] as any;
                for (let item of _data["messageHistory"])
                    this.messageHistory!.push(ChatMessageHistoryItem.fromJS(item));
            }
            this.messageType = _data["messageType"];
            this.policyViolation = _data["policyViolation"] ? ChatMessagePolicyViolation.fromJS(_data["policyViolation"]) : <any>undefined;
            if (Array.isArray(_data["reactions"])) {
                this.reactions = [] as any;
                for (let item of _data["reactions"])
                    this.reactions!.push(ChatMessageReaction.fromJS(item));
            }
            if (Array.isArray(_data["replies"])) {
                this.replies = [] as any;
                for (let item of _data["replies"])
                    this.replies!.push(ChatMessage.fromJS(item));
            }
            this.replyToId = _data["replyToId"];
            this.subject = _data["subject"];
            this.summary = _data["summary"];
            this.webUrl = _data["webUrl"];
        }
    }

    static override fromJS(data: any): ChatMessage {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        data["channelIdentity"] = this.channelIdentity ? this.channelIdentity.toJSON() : <any>undefined;
        data["chatId"] = this.chatId;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["deletedDateTime"] = this.deletedDateTime ? this.deletedDateTime.toISOString() : <any>undefined;
        data["etag"] = this.etag;
        data["eventDetail"] = this.eventDetail ? this.eventDetail.toJSON() : <any>undefined;
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        if (Array.isArray(this.hostedContents)) {
            data["hostedContents"] = [];
            for (let item of this.hostedContents)
                data["hostedContents"].push(item.toJSON());
        }
        data["importance"] = this.importance;
        data["lastEditedDateTime"] = this.lastEditedDateTime ? this.lastEditedDateTime.toISOString() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["locale"] = this.locale;
        if (Array.isArray(this.mentions)) {
            data["mentions"] = [];
            for (let item of this.mentions)
                data["mentions"].push(item.toJSON());
        }
        if (Array.isArray(this.messageHistory)) {
            data["messageHistory"] = [];
            for (let item of this.messageHistory)
                data["messageHistory"].push(item.toJSON());
        }
        data["messageType"] = this.messageType;
        data["policyViolation"] = this.policyViolation ? this.policyViolation.toJSON() : <any>undefined;
        if (Array.isArray(this.reactions)) {
            data["reactions"] = [];
            for (let item of this.reactions)
                data["reactions"].push(item.toJSON());
        }
        if (Array.isArray(this.replies)) {
            data["replies"] = [];
            for (let item of this.replies)
                data["replies"].push(item.toJSON());
        }
        data["replyToId"] = this.replyToId;
        data["subject"] = this.subject;
        data["summary"] = this.summary;
        data["webUrl"] = this.webUrl;
        super.toJSON(data);
        return data;
    }
}

export interface IChatMessage extends IEntity {
    /** References to attached objects like files, tabs, meetings etc. */
    attachments?: ChatMessageAttachment[] | undefined;
    /** The body property */
    body?: ItemBody | undefined;
    /** If the message was sent in a channel, represents identity of the channel. */
    channelIdentity?: ChannelIdentity | undefined;
    /** If the message was sent in a chat, represents the identity of the chat. */
    chatId?: string | undefined;
    /** Timestamp of when the chat message was created. */
    createdDateTime?: Date | undefined;
    /** Read only. Timestamp at which the chat message was deleted, or null if not deleted. */
    deletedDateTime?: Date | undefined;
    /** Read-only. Version number of the chat message. */
    etag?: string | undefined;
    /** Read-only. If present, represents details of an event that happened in a chat, a channel, or a team, for example, adding new members. For event messages, the messageType property will be set to systemEventMessage. */
    eventDetail?: EventMessageDetail | undefined;
    /** Details of the sender of the chat message. Can only be set during migration. */
    from?: ChatMessageFromIdentitySet | undefined;
    /** Content in a message hosted by Microsoft Teams - for example, images or code snippets. */
    hostedContents?: ChatMessageHostedContent[] | undefined;
    /** The importance property */
    importance?: ChatMessageImportance | undefined;
    /** Read only. Timestamp when edits to the chat message were made. Triggers an 'Edited' flag in the Teams UI. If no edits are made the value is null. */
    lastEditedDateTime?: Date | undefined;
    /** Read only. Timestamp when the chat message is created (initial setting) or modified, including when a reaction is added or removed. */
    lastModifiedDateTime?: Date | undefined;
    /** Locale of the chat message set by the client. Always set to en-us. */
    locale?: string | undefined;
    /** List of entities mentioned in the chat message. Supported entities are: user, bot, team, and channel. */
    mentions?: ChatMessageMention[] | undefined;
    /** List of activity history of a message item, including modification time and actions, such as reactionAdded, reactionRemoved, or reaction changes, on the message. */
    messageHistory?: ChatMessageHistoryItem[] | undefined;
    /** The messageType property */
    messageType?: ChatMessageType | undefined;
    /** Defines the properties of a policy violation set by a data loss prevention (DLP) application. */
    policyViolation?: ChatMessagePolicyViolation | undefined;
    /** Reactions for this chat message (for example, Like). */
    reactions?: ChatMessageReaction[] | undefined;
    /** Replies for a specified message. Supports $expand for channel messages. */
    replies?: ChatMessage[] | undefined;
    /** Read-only. ID of the parent chat message or root chat message of the thread. (Only applies to chat messages in channels, not chats.) */
    replyToId?: string | undefined;
    /** The subject of the chat message, in plaintext. */
    subject?: string | undefined;
    /** Summary text of the chat message that could be used for push notifications and summary views or fall back views. Only applies to channel chat messages, not chat messages in a chat. */
    summary?: string | undefined;
    /** Read-only. Link to the message in Microsoft Teams. */
    webUrl?: string | undefined;
}

export class ChatMessageAttachment implements IChatMessageAttachment {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive. */
    content?: string | undefined;
    /** The media type of the content attachment. It can have the following values: reference: Attachment is a link to another file. Populate the contentURL with the link to the object.Any contentType that is supported by the Bot Framework's Attachment objectapplication/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement header. */
    contentType?: string | undefined;
    /** The URL for the content of the attachment. */
    contentUrl?: string | undefined;
    /** Read-only. The unique id of the attachment. */
    id?: string | undefined;
    /** The name of the attachment. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The ID of the Teams app that is associated with the attachment. The property is used to attribute a Teams message card to the specified app. */
    teamsAppId?: string | undefined;
    /** The URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user selects the image, the channel would open the document. */
    thumbnailUrl?: string | undefined;

    constructor(data?: IChatMessageAttachment) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.content = _data["content"];
            this.contentType = _data["contentType"];
            this.contentUrl = _data["contentUrl"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.odataType = _data["odataType"];
            this.teamsAppId = _data["teamsAppId"];
            this.thumbnailUrl = _data["thumbnailUrl"];
        }
    }

    static fromJS(data: any): ChatMessageAttachment {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageAttachment();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["content"] = this.content;
        data["contentType"] = this.contentType;
        data["contentUrl"] = this.contentUrl;
        data["id"] = this.id;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        data["teamsAppId"] = this.teamsAppId;
        data["thumbnailUrl"] = this.thumbnailUrl;
        return data;
    }
}

export interface IChatMessageAttachment {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The content of the attachment. If the attachment is a rich card, set the property to the rich card object. This property and contentUrl are mutually exclusive. */
    content?: string | undefined;
    /** The media type of the content attachment. It can have the following values: reference: Attachment is a link to another file. Populate the contentURL with the link to the object.Any contentType that is supported by the Bot Framework's Attachment objectapplication/vnd.microsoft.card.codesnippet: A code snippet. application/vnd.microsoft.card.announcement: An announcement header. */
    contentType?: string | undefined;
    /** The URL for the content of the attachment. */
    contentUrl?: string | undefined;
    /** Read-only. The unique id of the attachment. */
    id?: string | undefined;
    /** The name of the attachment. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The ID of the Teams app that is associated with the attachment. The property is used to attribute a Teams message card to the specified app. */
    teamsAppId?: string | undefined;
    /** The URL to a thumbnail image that the channel can use if it supports using an alternative, smaller form of content or contentUrl. For example, if you set contentType to application/word and set contentUrl to the location of the Word document, you might include a thumbnail image that represents the document. The channel could display the thumbnail image instead of the document. When the user selects the image, the channel would open the document. */
    thumbnailUrl?: string | undefined;
}

export class ChannelIdentity implements IChannelIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The identity of the channel in which the message was posted. */
    channelId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The identity of the team in which the message was posted. */
    teamId?: string | undefined;

    constructor(data?: IChannelIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.channelId = _data["channelId"];
            this.odataType = _data["odataType"];
            this.teamId = _data["teamId"];
        }
    }

    static fromJS(data: any): ChannelIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["channelId"] = this.channelId;
        data["odataType"] = this.odataType;
        data["teamId"] = this.teamId;
        return data;
    }
}

export interface IChannelIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The identity of the channel in which the message was posted. */
    channelId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The identity of the team in which the message was posted. */
    teamId?: string | undefined;
}

export class TeamworkHostedContent extends Entity implements ITeamworkHostedContent {
    /** Write only. Bytes for the hosted content (such as images). */
    contentBytes?: string | undefined;
    /** Write only. Content type. such as image/png, image/jpg. */
    contentType?: string | undefined;

    constructor(data?: ITeamworkHostedContent) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.contentBytes = _data["contentBytes"];
            this.contentType = _data["contentType"];
        }
    }

    static override fromJS(data: any): TeamworkHostedContent {
        data = typeof data === 'object' ? data : {};
        let result = new TeamworkHostedContent();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentBytes"] = this.contentBytes;
        data["contentType"] = this.contentType;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamworkHostedContent extends IEntity {
    /** Write only. Bytes for the hosted content (such as images). */
    contentBytes?: string | undefined;
    /** Write only. Content type. such as image/png, image/jpg. */
    contentType?: string | undefined;
}

export class ChatMessageHostedContent extends TeamworkHostedContent implements IChatMessageHostedContent {

    constructor(data?: IChatMessageHostedContent) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ChatMessageHostedContent {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageHostedContent();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IChatMessageHostedContent extends ITeamworkHostedContent {
}

export enum ChatMessageImportance {
    Normal = 0,
    High = 1,
    Urgent = 2,
    UnknownFutureValue = 3,
}

export class ChatMessageMention implements IChatMessageMention {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Index of an entity being mentioned in the specified chatMessage. Matches the {index} value in the corresponding <at id='{index}'> tag in the message body. */
    id?: number | undefined;
    /** The entity (user, application, team, or channel) that was @mentioned. */
    mentioned?: ChatMessageMentionedIdentitySet | undefined;
    /** String used to represent the mention. For example, a user's display name, a team name. */
    mentionText?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IChatMessageMention) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.id = _data["id"];
            this.mentioned = _data["mentioned"] ? ChatMessageMentionedIdentitySet.fromJS(_data["mentioned"]) : <any>undefined;
            this.mentionText = _data["mentionText"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ChatMessageMention {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageMention();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["mentioned"] = this.mentioned ? this.mentioned.toJSON() : <any>undefined;
        data["mentionText"] = this.mentionText;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IChatMessageMention {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Index of an entity being mentioned in the specified chatMessage. Matches the {index} value in the corresponding <at id='{index}'> tag in the message body. */
    id?: number | undefined;
    /** The entity (user, application, team, or channel) that was @mentioned. */
    mentioned?: ChatMessageMentionedIdentitySet | undefined;
    /** String used to represent the mention. For example, a user's display name, a team name. */
    mentionText?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ChatMessageMentionedIdentitySet extends IdentitySet implements IChatMessageMentionedIdentitySet {
    /** If present, represents a conversation (for example, team or channel) @mentioned in a message. */
    conversation?: TeamworkConversationIdentity | undefined;

    constructor(data?: IChatMessageMentionedIdentitySet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.conversation = _data["conversation"] ? TeamworkConversationIdentity.fromJS(_data["conversation"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ChatMessageMentionedIdentitySet {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageMentionedIdentitySet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conversation"] = this.conversation ? this.conversation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IChatMessageMentionedIdentitySet extends IIdentitySet {
    /** If present, represents a conversation (for example, team or channel) @mentioned in a message. */
    conversation?: TeamworkConversationIdentity | undefined;
}

export class TeamworkConversationIdentity extends Identity implements ITeamworkConversationIdentity {
    /** Type of conversation. Possible values are: team, channel, chat, and unknownFutureValue. */
    conversationIdentityType?: TeamworkConversationIdentityType | undefined;

    constructor(data?: ITeamworkConversationIdentity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.conversationIdentityType = _data["conversationIdentityType"];
        }
    }

    static override fromJS(data: any): TeamworkConversationIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new TeamworkConversationIdentity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["conversationIdentityType"] = this.conversationIdentityType;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamworkConversationIdentity extends IIdentity {
    /** Type of conversation. Possible values are: team, channel, chat, and unknownFutureValue. */
    conversationIdentityType?: TeamworkConversationIdentityType | undefined;
}

export enum TeamworkConversationIdentityType {
    Team = 0,
    Channel = 1,
    Chat = 2,
    UnknownFutureValue = 3,
}

export class ChatMessageHistoryItem implements IChatMessageHistoryItem {
    /** The actions property */
    actions?: ChatMessageActions | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date and time when the message was modified. */
    modifiedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The reaction in the modified message. */
    reaction?: ChatMessageReaction | undefined;

    constructor(data?: IChatMessageHistoryItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actions = _data["actions"];
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.modifiedDateTime = _data["modifiedDateTime"] ? new Date(_data["modifiedDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
            this.reaction = _data["reaction"] ? ChatMessageReaction.fromJS(_data["reaction"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ChatMessageHistoryItem {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageHistoryItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actions"] = this.actions;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["modifiedDateTime"] = this.modifiedDateTime ? this.modifiedDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        data["reaction"] = this.reaction ? this.reaction.toJSON() : <any>undefined;
        return data;
    }
}

export interface IChatMessageHistoryItem {
    /** The actions property */
    actions?: ChatMessageActions | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date and time when the message was modified. */
    modifiedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The reaction in the modified message. */
    reaction?: ChatMessageReaction | undefined;
}

export enum ChatMessageActions {
    ReactionAdded = 1,
    ReactionRemoved = 2,
    ActionUndefined = 4,
    UnknownFutureValue = 8,
}

export class ChatMessageReaction implements IChatMessageReaction {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    createdDateTime?: Date | undefined;
    /** The name of the reaction. */
    displayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The hosted content URL for the custom reaction type. */
    reactionContentUrl?: string | undefined;
    /** The reaction type. Supported values include Unicode characters, custom, and some backward-compatible reaction types, such as like, angry, sad, laugh, heart, and surprised. */
    reactionType?: string | undefined;
    /** The user property */
    user?: ChatMessageReactionIdentitySet | undefined;

    constructor(data?: IChatMessageReaction) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.displayName = _data["displayName"];
            this.odataType = _data["odataType"];
            this.reactionContentUrl = _data["reactionContentUrl"];
            this.reactionType = _data["reactionType"];
            this.user = _data["user"] ? ChatMessageReactionIdentitySet.fromJS(_data["user"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ChatMessageReaction {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageReaction();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["displayName"] = this.displayName;
        data["odataType"] = this.odataType;
        data["reactionContentUrl"] = this.reactionContentUrl;
        data["reactionType"] = this.reactionType;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        return data;
    }
}

export interface IChatMessageReaction {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    createdDateTime?: Date | undefined;
    /** The name of the reaction. */
    displayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The hosted content URL for the custom reaction type. */
    reactionContentUrl?: string | undefined;
    /** The reaction type. Supported values include Unicode characters, custom, and some backward-compatible reaction types, such as like, angry, sad, laugh, heart, and surprised. */
    reactionType?: string | undefined;
    /** The user property */
    user?: ChatMessageReactionIdentitySet | undefined;
}

export class ChatMessageReactionIdentitySet extends IdentitySet implements IChatMessageReactionIdentitySet {

    constructor(data?: IChatMessageReactionIdentitySet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ChatMessageReactionIdentitySet {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessageReactionIdentitySet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IChatMessageReactionIdentitySet extends IIdentitySet {
}

export class ChatMessagePolicyViolation implements IChatMessagePolicyViolation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The action taken by the DLP provider on the message with sensitive content. Supported values are: NoneNotifySender -- Inform the sender of the violation but allow readers to read the message.BlockAccess -- Block readers from reading the message.BlockAccessExternal -- Block users outside the organization from reading the message, while allowing users within the organization to read the message. */
    dlpAction?: ChatMessagePolicyViolationDlpActionTypes | undefined;
    /** Justification text provided by the sender of the message when overriding a policy violation. */
    justificationText?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Information to display to the message sender about why the message was flagged as a violation. */
    policyTip?: ChatMessagePolicyViolationPolicyTip | undefined;
    /** Indicates the action taken by the user on a message blocked by the DLP provider. Supported values are: NoneOverrideReportFalsePositiveWhen the DLP provider is updating the message for blocking sensitive content, userAction isn't required. */
    userAction?: ChatMessagePolicyViolationUserActionTypes | undefined;
    /** Indicates what actions the sender may take in response to the policy violation. Supported values are: NoneAllowFalsePositiveOverride -- Allows the sender to declare the policyViolation to be an error in the DLP app and its rules, and allow readers to see the message again if the dlpAction hides it.AllowOverrideWithoutJustification -- Allows the sender to override the DLP violation and allow readers to see the message again if the dlpAction hides it, without needing to provide an explanation for doing so. AllowOverrideWithJustification -- Allows the sender to override the DLP violation and allow readers to see the message again if the dlpAction hides it, after providing an explanation for doing so.AllowOverrideWithoutJustification and AllowOverrideWithJustification are mutually exclusive. */
    verdictDetails?: ChatMessagePolicyViolationVerdictDetailsTypes | undefined;

    constructor(data?: IChatMessagePolicyViolation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.dlpAction = _data["dlpAction"];
            this.justificationText = _data["justificationText"];
            this.odataType = _data["odataType"];
            this.policyTip = _data["policyTip"] ? ChatMessagePolicyViolationPolicyTip.fromJS(_data["policyTip"]) : <any>undefined;
            this.userAction = _data["userAction"];
            this.verdictDetails = _data["verdictDetails"];
        }
    }

    static fromJS(data: any): ChatMessagePolicyViolation {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessagePolicyViolation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["dlpAction"] = this.dlpAction;
        data["justificationText"] = this.justificationText;
        data["odataType"] = this.odataType;
        data["policyTip"] = this.policyTip ? this.policyTip.toJSON() : <any>undefined;
        data["userAction"] = this.userAction;
        data["verdictDetails"] = this.verdictDetails;
        return data;
    }
}

export interface IChatMessagePolicyViolation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The action taken by the DLP provider on the message with sensitive content. Supported values are: NoneNotifySender -- Inform the sender of the violation but allow readers to read the message.BlockAccess -- Block readers from reading the message.BlockAccessExternal -- Block users outside the organization from reading the message, while allowing users within the organization to read the message. */
    dlpAction?: ChatMessagePolicyViolationDlpActionTypes | undefined;
    /** Justification text provided by the sender of the message when overriding a policy violation. */
    justificationText?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Information to display to the message sender about why the message was flagged as a violation. */
    policyTip?: ChatMessagePolicyViolationPolicyTip | undefined;
    /** Indicates the action taken by the user on a message blocked by the DLP provider. Supported values are: NoneOverrideReportFalsePositiveWhen the DLP provider is updating the message for blocking sensitive content, userAction isn't required. */
    userAction?: ChatMessagePolicyViolationUserActionTypes | undefined;
    /** Indicates what actions the sender may take in response to the policy violation. Supported values are: NoneAllowFalsePositiveOverride -- Allows the sender to declare the policyViolation to be an error in the DLP app and its rules, and allow readers to see the message again if the dlpAction hides it.AllowOverrideWithoutJustification -- Allows the sender to override the DLP violation and allow readers to see the message again if the dlpAction hides it, without needing to provide an explanation for doing so. AllowOverrideWithJustification -- Allows the sender to override the DLP violation and allow readers to see the message again if the dlpAction hides it, after providing an explanation for doing so.AllowOverrideWithoutJustification and AllowOverrideWithJustification are mutually exclusive. */
    verdictDetails?: ChatMessagePolicyViolationVerdictDetailsTypes | undefined;
}

export enum ChatMessagePolicyViolationDlpActionTypes {
    None = 1,
    NotifySender = 2,
    BlockAccess = 4,
    BlockAccessExternal = 8,
}

export class ChatMessagePolicyViolationPolicyTip implements IChatMessagePolicyViolationPolicyTip {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The URL a user can visit to read about the data loss prevention policies for the organization. (ie, policies about what users shouldn't say in chats) */
    complianceUrl?: string | undefined;
    /** Explanatory text shown to the sender of the message. */
    generalText?: string | undefined;
    /** The list of improper data in the message that was detected by the data loss prevention app. Each DLP app defines its own conditions, examples include 'Credit Card Number' and 'Social Security Number'. */
    matchedConditionDescriptions?: string[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IChatMessagePolicyViolationPolicyTip) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.complianceUrl = _data["complianceUrl"];
            this.generalText = _data["generalText"];
            if (Array.isArray(_data["matchedConditionDescriptions"])) {
                this.matchedConditionDescriptions = [] as any;
                for (let item of _data["matchedConditionDescriptions"])
                    this.matchedConditionDescriptions!.push(item);
            }
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ChatMessagePolicyViolationPolicyTip {
        data = typeof data === 'object' ? data : {};
        let result = new ChatMessagePolicyViolationPolicyTip();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["complianceUrl"] = this.complianceUrl;
        data["generalText"] = this.generalText;
        if (Array.isArray(this.matchedConditionDescriptions)) {
            data["matchedConditionDescriptions"] = [];
            for (let item of this.matchedConditionDescriptions)
                data["matchedConditionDescriptions"].push(item);
        }
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IChatMessagePolicyViolationPolicyTip {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The URL a user can visit to read about the data loss prevention policies for the organization. (ie, policies about what users shouldn't say in chats) */
    complianceUrl?: string | undefined;
    /** Explanatory text shown to the sender of the message. */
    generalText?: string | undefined;
    /** The list of improper data in the message that was detected by the data loss prevention app. Each DLP app defines its own conditions, examples include 'Credit Card Number' and 'Social Security Number'. */
    matchedConditionDescriptions?: string[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum ChatMessagePolicyViolationUserActionTypes {
    None = 1,
    Override = 2,
    ReportFalsePositive = 4,
}

export enum ChatMessagePolicyViolationVerdictDetailsTypes {
    None = 1,
    AllowFalsePositiveOverride = 2,
    AllowOverrideWithoutJustification = 4,
    AllowOverrideWithJustification = 8,
}

export class TeamworkOnlineMeetingInfo implements ITeamworkOnlineMeetingInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The identifier of the calendar event associated with the meeting. */
    calendarEventId?: string | undefined;
    /** The URL that users click to join or uniquely identify the meeting. */
    joinWebUrl?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The organizer of the meeting. */
    organizer?: TeamworkUserIdentity | undefined;

    constructor(data?: ITeamworkOnlineMeetingInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.calendarEventId = _data["calendarEventId"];
            this.joinWebUrl = _data["joinWebUrl"];
            this.odataType = _data["odataType"];
            this.organizer = _data["organizer"] ? TeamworkUserIdentity.fromJS(_data["organizer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TeamworkOnlineMeetingInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TeamworkOnlineMeetingInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["calendarEventId"] = this.calendarEventId;
        data["joinWebUrl"] = this.joinWebUrl;
        data["odataType"] = this.odataType;
        data["organizer"] = this.organizer ? this.organizer.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITeamworkOnlineMeetingInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The identifier of the calendar event associated with the meeting. */
    calendarEventId?: string | undefined;
    /** The URL that users click to join or uniquely identify the meeting. */
    joinWebUrl?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The organizer of the meeting. */
    organizer?: TeamworkUserIdentity | undefined;
}

export class TeamworkUserIdentity extends Identity implements ITeamworkUserIdentity {
    /** Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, unknownFutureValue and emailUser. */
    userIdentityType?: TeamworkUserIdentityType | undefined;

    constructor(data?: ITeamworkUserIdentity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.userIdentityType = _data["userIdentityType"];
        }
    }

    static override fromJS(data: any): TeamworkUserIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new TeamworkUserIdentity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userIdentityType"] = this.userIdentityType;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamworkUserIdentity extends IIdentity {
    /** Type of user. Possible values are: aadUser, onPremiseAadUser, anonymousGuest, federatedUser, personalMicrosoftAccountUser, skypeUser, phoneUser, unknownFutureValue and emailUser. */
    userIdentityType?: TeamworkUserIdentityType | undefined;
}

export enum TeamworkUserIdentityType {
    AadUser = 0,
    OnPremiseAadUser = 1,
    AnonymousGuest = 2,
    FederatedUser = 3,
    PersonalMicrosoftAccountUser = 4,
    SkypeUser = 5,
    PhoneUser = 6,
    UnknownFutureValue = 7,
    EmailUser = 8,
}

export class ResourceSpecificPermissionGrant extends DirectoryObject implements IResourceSpecificPermissionGrant {
    /** ID of the service principal of the Microsoft Entra app that has been granted access. Read-only. */
    clientAppId?: string | undefined;
    /** ID of the Microsoft Entra app that has been granted access. Read-only. */
    clientId?: string | undefined;
    /** The name of the resource-specific permission. Read-only. */
    permission?: string | undefined;
    /** The type of permission. Possible values are: Application, Delegated. Read-only. */
    permissionType?: string | undefined;
    /** ID of the Microsoft Entra app that is hosting the resource. Read-only. */
    resourceAppId?: string | undefined;

    constructor(data?: IResourceSpecificPermissionGrant) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.clientAppId = _data["clientAppId"];
            this.clientId = _data["clientId"];
            this.permission = _data["permission"];
            this.permissionType = _data["permissionType"];
            this.resourceAppId = _data["resourceAppId"];
        }
    }

    static override fromJS(data: any): ResourceSpecificPermissionGrant {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceSpecificPermissionGrant();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientAppId"] = this.clientAppId;
        data["clientId"] = this.clientId;
        data["permission"] = this.permission;
        data["permissionType"] = this.permissionType;
        data["resourceAppId"] = this.resourceAppId;
        super.toJSON(data);
        return data;
    }
}

export interface IResourceSpecificPermissionGrant extends IDirectoryObject {
    /** ID of the service principal of the Microsoft Entra app that has been granted access. Read-only. */
    clientAppId?: string | undefined;
    /** ID of the Microsoft Entra app that has been granted access. Read-only. */
    clientId?: string | undefined;
    /** The name of the resource-specific permission. Read-only. */
    permission?: string | undefined;
    /** The type of permission. Possible values are: Application, Delegated. Read-only. */
    permissionType?: string | undefined;
    /** ID of the Microsoft Entra app that is hosting the resource. Read-only. */
    resourceAppId?: string | undefined;
}

export class PinnedChatMessageInfo extends Entity implements IPinnedChatMessageInfo {
    /** Represents details about the chat message that is pinned. */
    message?: ChatMessage | undefined;

    constructor(data?: IPinnedChatMessageInfo) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.message = _data["message"] ? ChatMessage.fromJS(_data["message"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): PinnedChatMessageInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PinnedChatMessageInfo();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message ? this.message.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPinnedChatMessageInfo extends IEntity {
    /** Represents details about the chat message that is pinned. */
    message?: ChatMessage | undefined;
}

export class TeamsTab extends Entity implements ITeamsTab {
    /** Container for custom settings applied to a tab. The tab is considered configured only once this property is set. */
    configuration?: TeamsTabConfiguration | undefined;
    /** Name of the tab. */
    displayName?: string | undefined;
    /** The application that is linked to the tab. This can't be changed after tab creation. */
    teamsApp?: TeamsApp | undefined;
    /** Deep link URL of the tab instance. Read only. */
    webUrl?: string | undefined;

    constructor(data?: ITeamsTab) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.configuration = _data["configuration"] ? TeamsTabConfiguration.fromJS(_data["configuration"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.teamsApp = _data["teamsApp"] ? TeamsApp.fromJS(_data["teamsApp"]) : <any>undefined;
            this.webUrl = _data["webUrl"];
        }
    }

    static override fromJS(data: any): TeamsTab {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsTab();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configuration"] = this.configuration ? this.configuration.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["teamsApp"] = this.teamsApp ? this.teamsApp.toJSON() : <any>undefined;
        data["webUrl"] = this.webUrl;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamsTab extends IEntity {
    /** Container for custom settings applied to a tab. The tab is considered configured only once this property is set. */
    configuration?: TeamsTabConfiguration | undefined;
    /** Name of the tab. */
    displayName?: string | undefined;
    /** The application that is linked to the tab. This can't be changed after tab creation. */
    teamsApp?: TeamsApp | undefined;
    /** Deep link URL of the tab instance. Read only. */
    webUrl?: string | undefined;
}

export class TeamsTabConfiguration implements ITeamsTabConfiguration {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Url used for rendering tab contents in Teams. Required. */
    contentUrl?: string | undefined;
    /** Identifier for the entity hosted by the tab provider. */
    entityId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Url called by Teams client when a Tab is removed using the Teams Client. */
    removeUrl?: string | undefined;
    /** Url for showing tab contents outside of Teams. */
    websiteUrl?: string | undefined;

    constructor(data?: ITeamsTabConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.contentUrl = _data["contentUrl"];
            this.entityId = _data["entityId"];
            this.odataType = _data["odataType"];
            this.removeUrl = _data["removeUrl"];
            this.websiteUrl = _data["websiteUrl"];
        }
    }

    static fromJS(data: any): TeamsTabConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsTabConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["contentUrl"] = this.contentUrl;
        data["entityId"] = this.entityId;
        data["odataType"] = this.odataType;
        data["removeUrl"] = this.removeUrl;
        data["websiteUrl"] = this.websiteUrl;
        return data;
    }
}

export interface ITeamsTabConfiguration {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Url used for rendering tab contents in Teams. Required. */
    contentUrl?: string | undefined;
    /** Identifier for the entity hosted by the tab provider. */
    entityId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Url called by Teams client when a Tab is removed using the Teams Client. */
    removeUrl?: string | undefined;
    /** Url for showing tab contents outside of Teams. */
    websiteUrl?: string | undefined;
}

export class ChatViewpoint implements IChatViewpoint {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether the chat is hidden for the current user. */
    isHidden?: boolean | undefined;
    /** Represents the dateTime up until which the current user has read chatMessages in a specific chat. */
    lastMessageReadDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IChatViewpoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.isHidden = _data["isHidden"];
            this.lastMessageReadDateTime = _data["lastMessageReadDateTime"] ? new Date(_data["lastMessageReadDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ChatViewpoint {
        data = typeof data === 'object' ? data : {};
        let result = new ChatViewpoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["isHidden"] = this.isHidden;
        data["lastMessageReadDateTime"] = this.lastMessageReadDateTime ? this.lastMessageReadDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IChatViewpoint {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether the chat is hidden for the current user. */
    isHidden?: boolean | undefined;
    /** Represents the dateTime up until which the current user has read chatMessages in a specific chat. */
    lastMessageReadDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class CloudClipboardRoot extends Entity implements ICloudClipboardRoot {
    /** Represents a collection of Cloud Clipboard items. */
    items?: CloudClipboardItem[] | undefined;

    constructor(data?: ICloudClipboardRoot) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(CloudClipboardItem.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): CloudClipboardRoot {
        data = typeof data === 'object' ? data : {};
        let result = new CloudClipboardRoot();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICloudClipboardRoot extends IEntity {
    /** Represents a collection of Cloud Clipboard items. */
    items?: CloudClipboardItem[] | undefined;
}

export class CloudClipboardItem extends Entity implements ICloudClipboardItem {
    /** Set by the server. DateTime in UTC when the object was created on the server. */
    createdDateTime?: Date | undefined;
    /** Set by the server. DateTime in UTC when the object expires and after that the object is no longer available. The default and also maximum TTL is 12 hours after the creation, but it might change for performance optimization. */
    expirationDateTime?: Date | undefined;
    /** Set by the server if not provided in the client's request. DateTime in UTC when the object was modified by the client. */
    lastModifiedDateTime?: Date | undefined;
    /** A cloudClipboardItem can have multiple cloudClipboardItemPayload objects in the payloads. A window can place more than one clipboard object on the clipboard. Each one represents the same information in a different clipboard format. */
    payloads?: CloudClipboardItemPayload[] | undefined;

    constructor(data?: ICloudClipboardItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["payloads"])) {
                this.payloads = [] as any;
                for (let item of _data["payloads"])
                    this.payloads!.push(CloudClipboardItemPayload.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): CloudClipboardItem {
        data = typeof data === 'object' ? data : {};
        let result = new CloudClipboardItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.payloads)) {
            data["payloads"] = [];
            for (let item of this.payloads)
                data["payloads"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ICloudClipboardItem extends IEntity {
    /** Set by the server. DateTime in UTC when the object was created on the server. */
    createdDateTime?: Date | undefined;
    /** Set by the server. DateTime in UTC when the object expires and after that the object is no longer available. The default and also maximum TTL is 12 hours after the creation, but it might change for performance optimization. */
    expirationDateTime?: Date | undefined;
    /** Set by the server if not provided in the client's request. DateTime in UTC when the object was modified by the client. */
    lastModifiedDateTime?: Date | undefined;
    /** A cloudClipboardItem can have multiple cloudClipboardItemPayload objects in the payloads. A window can place more than one clipboard object on the clipboard. Each one represents the same information in a different clipboard format. */
    payloads?: CloudClipboardItemPayload[] | undefined;
}

export class CloudClipboardItemPayload implements ICloudClipboardItemPayload {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The formatName version of the value of a cloud clipboard encoded in base64. */
    content?: string | undefined;
    /** For a list of possible values see formatName values. */
    formatName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ICloudClipboardItemPayload) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.content = _data["content"];
            this.formatName = _data["formatName"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): CloudClipboardItemPayload {
        data = typeof data === 'object' ? data : {};
        let result = new CloudClipboardItemPayload();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["content"] = this.content;
        data["formatName"] = this.formatName;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ICloudClipboardItemPayload {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The formatName version of the value of a cloud clipboard encoded in base64. */
    content?: string | undefined;
    /** For a list of possible values see formatName values. */
    formatName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ContactFolder extends Entity implements IContactFolder {
    /** The collection of child folders in the folder. Navigation property. Read-only. Nullable. */
    childFolders?: ContactFolder[] | undefined;
    /** The contacts in the folder. Navigation property. Read-only. Nullable. */
    contacts?: Contact[] | undefined;
    /** The folder's display name. */
    displayName?: string | undefined;
    /** The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The ID of the folder's parent folder. */
    parentFolderId?: string | undefined;
    /** The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;

    constructor(data?: IContactFolder) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["childFolders"])) {
                this.childFolders = [] as any;
                for (let item of _data["childFolders"])
                    this.childFolders!.push(ContactFolder.fromJS(item));
            }
            if (Array.isArray(_data["contacts"])) {
                this.contacts = [] as any;
                for (let item of _data["contacts"])
                    this.contacts!.push(Contact.fromJS(item));
            }
            this.displayName = _data["displayName"];
            if (Array.isArray(_data["multiValueExtendedProperties"])) {
                this.multiValueExtendedProperties = [] as any;
                for (let item of _data["multiValueExtendedProperties"])
                    this.multiValueExtendedProperties!.push(MultiValueLegacyExtendedProperty.fromJS(item));
            }
            this.parentFolderId = _data["parentFolderId"];
            if (Array.isArray(_data["singleValueExtendedProperties"])) {
                this.singleValueExtendedProperties = [] as any;
                for (let item of _data["singleValueExtendedProperties"])
                    this.singleValueExtendedProperties!.push(SingleValueLegacyExtendedProperty.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ContactFolder {
        data = typeof data === 'object' ? data : {};
        let result = new ContactFolder();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.childFolders)) {
            data["childFolders"] = [];
            for (let item of this.childFolders)
                data["childFolders"].push(item.toJSON());
        }
        if (Array.isArray(this.contacts)) {
            data["contacts"] = [];
            for (let item of this.contacts)
                data["contacts"].push(item.toJSON());
        }
        data["displayName"] = this.displayName;
        if (Array.isArray(this.multiValueExtendedProperties)) {
            data["multiValueExtendedProperties"] = [];
            for (let item of this.multiValueExtendedProperties)
                data["multiValueExtendedProperties"].push(item.toJSON());
        }
        data["parentFolderId"] = this.parentFolderId;
        if (Array.isArray(this.singleValueExtendedProperties)) {
            data["singleValueExtendedProperties"] = [];
            for (let item of this.singleValueExtendedProperties)
                data["singleValueExtendedProperties"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IContactFolder extends IEntity {
    /** The collection of child folders in the folder. Navigation property. Read-only. Nullable. */
    childFolders?: ContactFolder[] | undefined;
    /** The contacts in the folder. Navigation property. Read-only. Nullable. */
    contacts?: Contact[] | undefined;
    /** The folder's display name. */
    displayName?: string | undefined;
    /** The collection of multi-value extended properties defined for the contactFolder. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The ID of the folder's parent folder. */
    parentFolderId?: string | undefined;
    /** The collection of single-value extended properties defined for the contactFolder. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
}

export class Contact extends OutlookItem implements IContact {
    /** The name of the contact's assistant. */
    assistantName?: string | undefined;
    /** The contact's birthday. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    birthday?: Date | undefined;
    /** The contact's business address. */
    businessAddress?: PhysicalAddress | undefined;
    /** The business home page of the contact. */
    businessHomePage?: string | undefined;
    /** The contact's business phone numbers. */
    businessPhones?: string[] | undefined;
    /** The names of the contact's children. */
    children?: string[] | undefined;
    /** The name of the contact's company. */
    companyName?: string | undefined;
    /** The contact's department. */
    department?: string | undefined;
    /** The contact's display name. You can specify the display name in a create or update operation. Note that later updates to other properties may cause an automatically generated value to overwrite the displayName value you have specified. To preserve a pre-existing value, always include it as displayName in an update operation. */
    displayName?: string | undefined;
    /** The contact's email addresses. */
    emailAddresses?: EmailAddress[] | undefined;
    /** The collection of open extensions defined for the contact. Read-only. Nullable. */
    extensions?: Extension[] | undefined;
    /** The name the contact is filed under. */
    fileAs?: string | undefined;
    /** The contact's suffix. */
    generation?: string | undefined;
    /** The contact's given name. */
    givenName?: string | undefined;
    /** The contact's home address. */
    homeAddress?: PhysicalAddress | undefined;
    /** The contact's home phone numbers. */
    homePhones?: string[] | undefined;
    /** The contact's instant messaging (IM) addresses. */
    imAddresses?: string[] | undefined;
    /** The contact's initials. */
    initials?: string | undefined;
    /** The contact’s job title. */
    jobTitle?: string | undefined;
    /** The name of the contact's manager. */
    manager?: string | undefined;
    /** The contact's middle name. */
    middleName?: string | undefined;
    /** The contact's mobile phone number. */
    mobilePhone?: string | undefined;
    /** The collection of multi-value extended properties defined for the contact. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The contact's nickname. */
    nickName?: string | undefined;
    /** The location of the contact's office. */
    officeLocation?: string | undefined;
    /** Other addresses for the contact. */
    otherAddress?: PhysicalAddress | undefined;
    /** The ID of the contact's parent folder. */
    parentFolderId?: string | undefined;
    /** The user's notes about the contact. */
    personalNotes?: string | undefined;
    /** Optional contact picture. You can get or set a photo for a contact. */
    photo?: ProfilePhoto | undefined;
    /** The contact's profession. */
    profession?: string | undefined;
    /** The collection of single-value extended properties defined for the contact. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
    /** The name of the contact's spouse/partner. */
    spouseName?: string | undefined;
    /** The contact's surname. */
    surname?: string | undefined;
    /** The contact's title. */
    title?: string | undefined;
    /** The phonetic Japanese company name of the contact. */
    yomiCompanyName?: string | undefined;
    /** The phonetic Japanese given name (first name) of the contact. */
    yomiGivenName?: string | undefined;
    /** The phonetic Japanese surname (last name)  of the contact. */
    yomiSurname?: string | undefined;

    constructor(data?: IContact) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assistantName = _data["assistantName"];
            this.birthday = _data["birthday"] ? new Date(_data["birthday"].toString()) : <any>undefined;
            this.businessAddress = _data["businessAddress"] ? PhysicalAddress.fromJS(_data["businessAddress"]) : <any>undefined;
            this.businessHomePage = _data["businessHomePage"];
            if (Array.isArray(_data["businessPhones"])) {
                this.businessPhones = [] as any;
                for (let item of _data["businessPhones"])
                    this.businessPhones!.push(item);
            }
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(item);
            }
            this.companyName = _data["companyName"];
            this.department = _data["department"];
            this.displayName = _data["displayName"];
            if (Array.isArray(_data["emailAddresses"])) {
                this.emailAddresses = [] as any;
                for (let item of _data["emailAddresses"])
                    this.emailAddresses!.push(EmailAddress.fromJS(item));
            }
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            this.fileAs = _data["fileAs"];
            this.generation = _data["generation"];
            this.givenName = _data["givenName"];
            this.homeAddress = _data["homeAddress"] ? PhysicalAddress.fromJS(_data["homeAddress"]) : <any>undefined;
            if (Array.isArray(_data["homePhones"])) {
                this.homePhones = [] as any;
                for (let item of _data["homePhones"])
                    this.homePhones!.push(item);
            }
            if (Array.isArray(_data["imAddresses"])) {
                this.imAddresses = [] as any;
                for (let item of _data["imAddresses"])
                    this.imAddresses!.push(item);
            }
            this.initials = _data["initials"];
            this.jobTitle = _data["jobTitle"];
            this.manager = _data["manager"];
            this.middleName = _data["middleName"];
            this.mobilePhone = _data["mobilePhone"];
            if (Array.isArray(_data["multiValueExtendedProperties"])) {
                this.multiValueExtendedProperties = [] as any;
                for (let item of _data["multiValueExtendedProperties"])
                    this.multiValueExtendedProperties!.push(MultiValueLegacyExtendedProperty.fromJS(item));
            }
            this.nickName = _data["nickName"];
            this.officeLocation = _data["officeLocation"];
            this.otherAddress = _data["otherAddress"] ? PhysicalAddress.fromJS(_data["otherAddress"]) : <any>undefined;
            this.parentFolderId = _data["parentFolderId"];
            this.personalNotes = _data["personalNotes"];
            this.photo = _data["photo"] ? ProfilePhoto.fromJS(_data["photo"]) : <any>undefined;
            this.profession = _data["profession"];
            if (Array.isArray(_data["singleValueExtendedProperties"])) {
                this.singleValueExtendedProperties = [] as any;
                for (let item of _data["singleValueExtendedProperties"])
                    this.singleValueExtendedProperties!.push(SingleValueLegacyExtendedProperty.fromJS(item));
            }
            this.spouseName = _data["spouseName"];
            this.surname = _data["surname"];
            this.title = _data["title"];
            this.yomiCompanyName = _data["yomiCompanyName"];
            this.yomiGivenName = _data["yomiGivenName"];
            this.yomiSurname = _data["yomiSurname"];
        }
    }

    static override fromJS(data: any): Contact {
        data = typeof data === 'object' ? data : {};
        let result = new Contact();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assistantName"] = this.assistantName;
        data["birthday"] = this.birthday ? this.birthday.toISOString() : <any>undefined;
        data["businessAddress"] = this.businessAddress ? this.businessAddress.toJSON() : <any>undefined;
        data["businessHomePage"] = this.businessHomePage;
        if (Array.isArray(this.businessPhones)) {
            data["businessPhones"] = [];
            for (let item of this.businessPhones)
                data["businessPhones"].push(item);
        }
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item);
        }
        data["companyName"] = this.companyName;
        data["department"] = this.department;
        data["displayName"] = this.displayName;
        if (Array.isArray(this.emailAddresses)) {
            data["emailAddresses"] = [];
            for (let item of this.emailAddresses)
                data["emailAddresses"].push(item.toJSON());
        }
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        data["fileAs"] = this.fileAs;
        data["generation"] = this.generation;
        data["givenName"] = this.givenName;
        data["homeAddress"] = this.homeAddress ? this.homeAddress.toJSON() : <any>undefined;
        if (Array.isArray(this.homePhones)) {
            data["homePhones"] = [];
            for (let item of this.homePhones)
                data["homePhones"].push(item);
        }
        if (Array.isArray(this.imAddresses)) {
            data["imAddresses"] = [];
            for (let item of this.imAddresses)
                data["imAddresses"].push(item);
        }
        data["initials"] = this.initials;
        data["jobTitle"] = this.jobTitle;
        data["manager"] = this.manager;
        data["middleName"] = this.middleName;
        data["mobilePhone"] = this.mobilePhone;
        if (Array.isArray(this.multiValueExtendedProperties)) {
            data["multiValueExtendedProperties"] = [];
            for (let item of this.multiValueExtendedProperties)
                data["multiValueExtendedProperties"].push(item.toJSON());
        }
        data["nickName"] = this.nickName;
        data["officeLocation"] = this.officeLocation;
        data["otherAddress"] = this.otherAddress ? this.otherAddress.toJSON() : <any>undefined;
        data["parentFolderId"] = this.parentFolderId;
        data["personalNotes"] = this.personalNotes;
        data["photo"] = this.photo ? this.photo.toJSON() : <any>undefined;
        data["profession"] = this.profession;
        if (Array.isArray(this.singleValueExtendedProperties)) {
            data["singleValueExtendedProperties"] = [];
            for (let item of this.singleValueExtendedProperties)
                data["singleValueExtendedProperties"].push(item.toJSON());
        }
        data["spouseName"] = this.spouseName;
        data["surname"] = this.surname;
        data["title"] = this.title;
        data["yomiCompanyName"] = this.yomiCompanyName;
        data["yomiGivenName"] = this.yomiGivenName;
        data["yomiSurname"] = this.yomiSurname;
        super.toJSON(data);
        return data;
    }
}

export interface IContact extends IOutlookItem {
    /** The name of the contact's assistant. */
    assistantName?: string | undefined;
    /** The contact's birthday. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    birthday?: Date | undefined;
    /** The contact's business address. */
    businessAddress?: PhysicalAddress | undefined;
    /** The business home page of the contact. */
    businessHomePage?: string | undefined;
    /** The contact's business phone numbers. */
    businessPhones?: string[] | undefined;
    /** The names of the contact's children. */
    children?: string[] | undefined;
    /** The name of the contact's company. */
    companyName?: string | undefined;
    /** The contact's department. */
    department?: string | undefined;
    /** The contact's display name. You can specify the display name in a create or update operation. Note that later updates to other properties may cause an automatically generated value to overwrite the displayName value you have specified. To preserve a pre-existing value, always include it as displayName in an update operation. */
    displayName?: string | undefined;
    /** The contact's email addresses. */
    emailAddresses?: EmailAddress[] | undefined;
    /** The collection of open extensions defined for the contact. Read-only. Nullable. */
    extensions?: Extension[] | undefined;
    /** The name the contact is filed under. */
    fileAs?: string | undefined;
    /** The contact's suffix. */
    generation?: string | undefined;
    /** The contact's given name. */
    givenName?: string | undefined;
    /** The contact's home address. */
    homeAddress?: PhysicalAddress | undefined;
    /** The contact's home phone numbers. */
    homePhones?: string[] | undefined;
    /** The contact's instant messaging (IM) addresses. */
    imAddresses?: string[] | undefined;
    /** The contact's initials. */
    initials?: string | undefined;
    /** The contact’s job title. */
    jobTitle?: string | undefined;
    /** The name of the contact's manager. */
    manager?: string | undefined;
    /** The contact's middle name. */
    middleName?: string | undefined;
    /** The contact's mobile phone number. */
    mobilePhone?: string | undefined;
    /** The collection of multi-value extended properties defined for the contact. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The contact's nickname. */
    nickName?: string | undefined;
    /** The location of the contact's office. */
    officeLocation?: string | undefined;
    /** Other addresses for the contact. */
    otherAddress?: PhysicalAddress | undefined;
    /** The ID of the contact's parent folder. */
    parentFolderId?: string | undefined;
    /** The user's notes about the contact. */
    personalNotes?: string | undefined;
    /** Optional contact picture. You can get or set a photo for a contact. */
    photo?: ProfilePhoto | undefined;
    /** The contact's profession. */
    profession?: string | undefined;
    /** The collection of single-value extended properties defined for the contact. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
    /** The name of the contact's spouse/partner. */
    spouseName?: string | undefined;
    /** The contact's surname. */
    surname?: string | undefined;
    /** The contact's title. */
    title?: string | undefined;
    /** The phonetic Japanese company name of the contact. */
    yomiCompanyName?: string | undefined;
    /** The phonetic Japanese given name (first name) of the contact. */
    yomiGivenName?: string | undefined;
    /** The phonetic Japanese surname (last name)  of the contact. */
    yomiSurname?: string | undefined;
}

export class ProfilePhoto extends Entity implements IProfilePhoto {
    /** The height of the photo. Read-only. */
    height?: number | undefined;
    /** The width of the photo. Read-only. */
    width?: number | undefined;

    constructor(data?: IProfilePhoto) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.height = _data["height"];
            this.width = _data["width"];
        }
    }

    static override fromJS(data: any): ProfilePhoto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfilePhoto();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["height"] = this.height;
        data["width"] = this.width;
        super.toJSON(data);
        return data;
    }
}

export interface IProfilePhoto extends IEntity {
    /** The height of the photo. Read-only. */
    height?: number | undefined;
    /** The width of the photo. Read-only. */
    width?: number | undefined;
}

export class CustomSecurityAttributeValue implements ICustomSecurityAttributeValue {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ICustomSecurityAttributeValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): CustomSecurityAttributeValue {
        data = typeof data === 'object' ? data : {};
        let result = new CustomSecurityAttributeValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ICustomSecurityAttributeValue {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

/** Event representing an general failure. */
export class DeviceManagementTroubleshootingEvent extends Entity implements IDeviceManagementTroubleshootingEvent {
    /** Id used for tracing the failure in the service. */
    correlationId?: string | undefined;
    /** Time when the event occurred . */
    eventDateTime?: Date | undefined;

    constructor(data?: IDeviceManagementTroubleshootingEvent) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.correlationId = _data["correlationId"];
            this.eventDateTime = _data["eventDateTime"] ? new Date(_data["eventDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): DeviceManagementTroubleshootingEvent {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceManagementTroubleshootingEvent();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["correlationId"] = this.correlationId;
        data["eventDateTime"] = this.eventDateTime ? this.eventDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** Event representing an general failure. */
export interface IDeviceManagementTroubleshootingEvent extends IEntity {
    /** Id used for tracing the failure in the service. */
    correlationId?: string | undefined;
    /** Time when the event occurred . */
    eventDateTime?: Date | undefined;
}

export class Drive extends BaseItem implements IDrive {
    /** Collection of bundles (albums and multi-select-shared sets of items). Only in personal OneDrive. */
    bundles?: DriveItem[] | undefined;
    /** Describes the type of drive represented by this resource. OneDrive personal drives return personal. OneDrive for Business returns business. SharePoint document libraries return documentLibrary. Read-only. */
    driveType?: string | undefined;
    /** The list of items the user is following. Only in OneDrive for Business. */
    following?: DriveItem[] | undefined;
    /** All items contained in the drive. Read-only. Nullable. */
    items?: DriveItem[] | undefined;
    /** For drives in SharePoint, the underlying document library list. Read-only. Nullable. */
    list?: List | undefined;
    /** Optional. The user account that owns the drive. Read-only. */
    owner?: IdentitySet | undefined;
    /** Optional. Information about the drive's storage space quota. Read-only. */
    quota?: Quota | undefined;
    /** The root folder of the drive. Read-only. */
    root?: DriveItem | undefined;
    /** The sharePointIds property */
    sharePointIds?: SharepointIds | undefined;
    /** Collection of common folders available in OneDrive. Read-only. Nullable. */
    special?: DriveItem[] | undefined;
    /** If present, indicates that it's a system-managed drive. Read-only. */
    system?: SystemFacet | undefined;

    constructor(data?: IDrive) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["bundles"])) {
                this.bundles = [] as any;
                for (let item of _data["bundles"])
                    this.bundles!.push(DriveItem.fromJS(item));
            }
            this.driveType = _data["driveType"];
            if (Array.isArray(_data["following"])) {
                this.following = [] as any;
                for (let item of _data["following"])
                    this.following!.push(DriveItem.fromJS(item));
            }
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DriveItem.fromJS(item));
            }
            this.list = _data["list"] ? List.fromJS(_data["list"]) : <any>undefined;
            this.owner = _data["owner"] ? IdentitySet.fromJS(_data["owner"]) : <any>undefined;
            this.quota = _data["quota"] ? Quota.fromJS(_data["quota"]) : <any>undefined;
            this.root = _data["root"] ? DriveItem.fromJS(_data["root"]) : <any>undefined;
            this.sharePointIds = _data["sharePointIds"] ? SharepointIds.fromJS(_data["sharePointIds"]) : <any>undefined;
            if (Array.isArray(_data["special"])) {
                this.special = [] as any;
                for (let item of _data["special"])
                    this.special!.push(DriveItem.fromJS(item));
            }
            this.system = _data["system"] ? SystemFacet.fromJS(_data["system"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Drive {
        data = typeof data === 'object' ? data : {};
        let result = new Drive();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.bundles)) {
            data["bundles"] = [];
            for (let item of this.bundles)
                data["bundles"].push(item.toJSON());
        }
        data["driveType"] = this.driveType;
        if (Array.isArray(this.following)) {
            data["following"] = [];
            for (let item of this.following)
                data["following"].push(item.toJSON());
        }
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["list"] = this.list ? this.list.toJSON() : <any>undefined;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["quota"] = this.quota ? this.quota.toJSON() : <any>undefined;
        data["root"] = this.root ? this.root.toJSON() : <any>undefined;
        data["sharePointIds"] = this.sharePointIds ? this.sharePointIds.toJSON() : <any>undefined;
        if (Array.isArray(this.special)) {
            data["special"] = [];
            for (let item of this.special)
                data["special"].push(item.toJSON());
        }
        data["system"] = this.system ? this.system.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IDrive extends IBaseItem {
    /** Collection of bundles (albums and multi-select-shared sets of items). Only in personal OneDrive. */
    bundles?: DriveItem[] | undefined;
    /** Describes the type of drive represented by this resource. OneDrive personal drives return personal. OneDrive for Business returns business. SharePoint document libraries return documentLibrary. Read-only. */
    driveType?: string | undefined;
    /** The list of items the user is following. Only in OneDrive for Business. */
    following?: DriveItem[] | undefined;
    /** All items contained in the drive. Read-only. Nullable. */
    items?: DriveItem[] | undefined;
    /** For drives in SharePoint, the underlying document library list. Read-only. Nullable. */
    list?: List | undefined;
    /** Optional. The user account that owns the drive. Read-only. */
    owner?: IdentitySet | undefined;
    /** Optional. Information about the drive's storage space quota. Read-only. */
    quota?: Quota | undefined;
    /** The root folder of the drive. Read-only. */
    root?: DriveItem | undefined;
    /** The sharePointIds property */
    sharePointIds?: SharepointIds | undefined;
    /** Collection of common folders available in OneDrive. Read-only. Nullable. */
    special?: DriveItem[] | undefined;
    /** If present, indicates that it's a system-managed drive. Read-only. */
    system?: SystemFacet | undefined;
}

export class List extends BaseItem implements IList {
    /** The collection of field definitions for this list. */
    columns?: ColumnDefinition[] | undefined;
    /** The collection of content types present in this list. */
    contentTypes?: ContentType[] | undefined;
    /** The displayable title of the list. */
    displayName?: string | undefined;
    /** Allows access to the list as a drive resource with driveItems. Only present on document libraries. */
    drive?: Drive | undefined;
    /** All items contained in the list. */
    items?: ListItem[] | undefined;
    /** Contains more details about the list. */
    listProp?: ListInfo | undefined;
    /** The collection of long-running operations on the list. */
    operations?: RichLongRunningOperation[] | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** The set of subscriptions on the list. */
    subscriptions?: Subscription[] | undefined;
    /** If present, indicates that the list is system-managed. Read-only. */
    system?: SystemFacet | undefined;

    constructor(data?: IList) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns!.push(ColumnDefinition.fromJS(item));
            }
            if (Array.isArray(_data["contentTypes"])) {
                this.contentTypes = [] as any;
                for (let item of _data["contentTypes"])
                    this.contentTypes!.push(ContentType.fromJS(item));
            }
            this.displayName = _data["displayName"];
            this.drive = _data["drive"] ? Drive.fromJS(_data["drive"]) : <any>undefined;
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ListItem.fromJS(item));
            }
            this.listProp = _data["listProp"] ? ListInfo.fromJS(_data["listProp"]) : <any>undefined;
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(RichLongRunningOperation.fromJS(item));
            }
            this.sharepointIds = _data["sharepointIds"] ? SharepointIds.fromJS(_data["sharepointIds"]) : <any>undefined;
            if (Array.isArray(_data["subscriptions"])) {
                this.subscriptions = [] as any;
                for (let item of _data["subscriptions"])
                    this.subscriptions!.push(Subscription.fromJS(item));
            }
            this.system = _data["system"] ? SystemFacet.fromJS(_data["system"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): List {
        data = typeof data === 'object' ? data : {};
        let result = new List();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        if (Array.isArray(this.contentTypes)) {
            data["contentTypes"] = [];
            for (let item of this.contentTypes)
                data["contentTypes"].push(item.toJSON());
        }
        data["displayName"] = this.displayName;
        data["drive"] = this.drive ? this.drive.toJSON() : <any>undefined;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        data["listProp"] = this.listProp ? this.listProp.toJSON() : <any>undefined;
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        data["sharepointIds"] = this.sharepointIds ? this.sharepointIds.toJSON() : <any>undefined;
        if (Array.isArray(this.subscriptions)) {
            data["subscriptions"] = [];
            for (let item of this.subscriptions)
                data["subscriptions"].push(item.toJSON());
        }
        data["system"] = this.system ? this.system.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IList extends IBaseItem {
    /** The collection of field definitions for this list. */
    columns?: ColumnDefinition[] | undefined;
    /** The collection of content types present in this list. */
    contentTypes?: ContentType[] | undefined;
    /** The displayable title of the list. */
    displayName?: string | undefined;
    /** Allows access to the list as a drive resource with driveItems. Only present on document libraries. */
    drive?: Drive | undefined;
    /** All items contained in the list. */
    items?: ListItem[] | undefined;
    /** Contains more details about the list. */
    listProp?: ListInfo | undefined;
    /** The collection of long-running operations on the list. */
    operations?: RichLongRunningOperation[] | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** The set of subscriptions on the list. */
    subscriptions?: Subscription[] | undefined;
    /** If present, indicates that the list is system-managed. Read-only. */
    system?: SystemFacet | undefined;
}

export class ColumnDefinition extends Entity implements IColumnDefinition {
    /** This column stores Boolean values. */
    boolean?: BooleanColumn | undefined;
    /** This column's data is calculated based on other columns. */
    calculated?: CalculatedColumn | undefined;
    /** This column stores data from a list of choices. */
    choice?: ChoiceColumn | undefined;
    /** For site columns, the name of the group this column belongs to. Helps organize related columns. */
    columnGroup?: string | undefined;
    /** This column stores content approval status. */
    contentApprovalStatus?: ContentApprovalStatusColumn | undefined;
    /** This column stores currency values. */
    currency?: CurrencyColumn | undefined;
    /** This column stores DateTime values. */
    dateTime?: DateTimeColumn | undefined;
    /** The default value for this column. */
    defaultValue?: DefaultColumnValue | undefined;
    /** The user-facing description of the column. */
    description?: string | undefined;
    /** The user-facing name of the column. */
    displayName?: string | undefined;
    /** If true, no two list items may have the same value for this column. */
    enforceUniqueValues?: boolean | undefined;
    /** This column stores a geolocation. */
    geolocation?: GeolocationColumn | undefined;
    /** Specifies whether the column is displayed in the user interface. */
    hidden?: boolean | undefined;
    /** This column stores hyperlink or picture values. */
    hyperlinkOrPicture?: HyperlinkOrPictureColumn | undefined;
    /** Specifies whether the column values can be used for sorting and searching. */
    indexed?: boolean | undefined;
    /** Indicates whether this column can be deleted. */
    isDeletable?: boolean | undefined;
    /** Indicates whether values in the column can be reordered. Read-only. */
    isReorderable?: boolean | undefined;
    /** Specifies whether the column can be changed. */
    isSealed?: boolean | undefined;
    /** This column's data is looked up from another source in the site. */
    lookup?: LookupColumn | undefined;
    /** The API-facing name of the column as it appears in the fields on a listItem. For the user-facing name, see displayName. */
    name?: string | undefined;
    /** This column stores number values. */
    number?: NumberColumn | undefined;
    /** This column stores Person or Group values. */
    personOrGroup?: PersonOrGroupColumn | undefined;
    /** If 'true', changes to this column will be propagated to lists that implement the column. */
    propagateChanges?: boolean | undefined;
    /** Specifies whether the column values can be modified. */
    readOnly?: boolean | undefined;
    /** Specifies whether the column value isn't optional. */
    required?: boolean | undefined;
    /** The source column for the content type column. */
    sourceColumn?: ColumnDefinition | undefined;
    /** ContentType from which this column is inherited from. Present only in contentTypes columns response. Read-only. */
    sourceContentType?: ContentTypeInfo | undefined;
    /** This column stores taxonomy terms. */
    term?: TermColumn | undefined;
    /** This column stores text values. */
    text?: TextColumn | undefined;
    /** This column stores thumbnail values. */
    thumbnail?: ThumbnailColumn | undefined;
    /** For site columns, the type of column. Read-only. */
    type?: ColumnTypes | undefined;
    /** This column stores validation formula and message for the column. */
    validation?: ColumnValidation | undefined;

    constructor(data?: IColumnDefinition) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.boolean = _data["boolean"] ? BooleanColumn.fromJS(_data["boolean"]) : <any>undefined;
            this.calculated = _data["calculated"] ? CalculatedColumn.fromJS(_data["calculated"]) : <any>undefined;
            this.choice = _data["choice"] ? ChoiceColumn.fromJS(_data["choice"]) : <any>undefined;
            this.columnGroup = _data["columnGroup"];
            this.contentApprovalStatus = _data["contentApprovalStatus"] ? ContentApprovalStatusColumn.fromJS(_data["contentApprovalStatus"]) : <any>undefined;
            this.currency = _data["currency"] ? CurrencyColumn.fromJS(_data["currency"]) : <any>undefined;
            this.dateTime = _data["dateTime"] ? DateTimeColumn.fromJS(_data["dateTime"]) : <any>undefined;
            this.defaultValue = _data["defaultValue"] ? DefaultColumnValue.fromJS(_data["defaultValue"]) : <any>undefined;
            this.description = _data["description"];
            this.displayName = _data["displayName"];
            this.enforceUniqueValues = _data["enforceUniqueValues"];
            this.geolocation = _data["geolocation"] ? GeolocationColumn.fromJS(_data["geolocation"]) : <any>undefined;
            this.hidden = _data["hidden"];
            this.hyperlinkOrPicture = _data["hyperlinkOrPicture"] ? HyperlinkOrPictureColumn.fromJS(_data["hyperlinkOrPicture"]) : <any>undefined;
            this.indexed = _data["indexed"];
            this.isDeletable = _data["isDeletable"];
            this.isReorderable = _data["isReorderable"];
            this.isSealed = _data["isSealed"];
            this.lookup = _data["lookup"] ? LookupColumn.fromJS(_data["lookup"]) : <any>undefined;
            this.name = _data["name"];
            this.number = _data["number"] ? NumberColumn.fromJS(_data["number"]) : <any>undefined;
            this.personOrGroup = _data["personOrGroup"] ? PersonOrGroupColumn.fromJS(_data["personOrGroup"]) : <any>undefined;
            this.propagateChanges = _data["propagateChanges"];
            this.readOnly = _data["readOnly"];
            this.required = _data["required"];
            this.sourceColumn = _data["sourceColumn"] ? ColumnDefinition.fromJS(_data["sourceColumn"]) : <any>undefined;
            this.sourceContentType = _data["sourceContentType"] ? ContentTypeInfo.fromJS(_data["sourceContentType"]) : <any>undefined;
            this.term = _data["term"] ? TermColumn.fromJS(_data["term"]) : <any>undefined;
            this.text = _data["text"] ? TextColumn.fromJS(_data["text"]) : <any>undefined;
            this.thumbnail = _data["thumbnail"] ? ThumbnailColumn.fromJS(_data["thumbnail"]) : <any>undefined;
            this.type = _data["type"];
            this.validation = _data["validation"] ? ColumnValidation.fromJS(_data["validation"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ColumnDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new ColumnDefinition();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["boolean"] = this.boolean ? this.boolean.toJSON() : <any>undefined;
        data["calculated"] = this.calculated ? this.calculated.toJSON() : <any>undefined;
        data["choice"] = this.choice ? this.choice.toJSON() : <any>undefined;
        data["columnGroup"] = this.columnGroup;
        data["contentApprovalStatus"] = this.contentApprovalStatus ? this.contentApprovalStatus.toJSON() : <any>undefined;
        data["currency"] = this.currency ? this.currency.toJSON() : <any>undefined;
        data["dateTime"] = this.dateTime ? this.dateTime.toJSON() : <any>undefined;
        data["defaultValue"] = this.defaultValue ? this.defaultValue.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["enforceUniqueValues"] = this.enforceUniqueValues;
        data["geolocation"] = this.geolocation ? this.geolocation.toJSON() : <any>undefined;
        data["hidden"] = this.hidden;
        data["hyperlinkOrPicture"] = this.hyperlinkOrPicture ? this.hyperlinkOrPicture.toJSON() : <any>undefined;
        data["indexed"] = this.indexed;
        data["isDeletable"] = this.isDeletable;
        data["isReorderable"] = this.isReorderable;
        data["isSealed"] = this.isSealed;
        data["lookup"] = this.lookup ? this.lookup.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["number"] = this.number ? this.number.toJSON() : <any>undefined;
        data["personOrGroup"] = this.personOrGroup ? this.personOrGroup.toJSON() : <any>undefined;
        data["propagateChanges"] = this.propagateChanges;
        data["readOnly"] = this.readOnly;
        data["required"] = this.required;
        data["sourceColumn"] = this.sourceColumn ? this.sourceColumn.toJSON() : <any>undefined;
        data["sourceContentType"] = this.sourceContentType ? this.sourceContentType.toJSON() : <any>undefined;
        data["term"] = this.term ? this.term.toJSON() : <any>undefined;
        data["text"] = this.text ? this.text.toJSON() : <any>undefined;
        data["thumbnail"] = this.thumbnail ? this.thumbnail.toJSON() : <any>undefined;
        data["type"] = this.type;
        data["validation"] = this.validation ? this.validation.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IColumnDefinition extends IEntity {
    /** This column stores Boolean values. */
    boolean?: BooleanColumn | undefined;
    /** This column's data is calculated based on other columns. */
    calculated?: CalculatedColumn | undefined;
    /** This column stores data from a list of choices. */
    choice?: ChoiceColumn | undefined;
    /** For site columns, the name of the group this column belongs to. Helps organize related columns. */
    columnGroup?: string | undefined;
    /** This column stores content approval status. */
    contentApprovalStatus?: ContentApprovalStatusColumn | undefined;
    /** This column stores currency values. */
    currency?: CurrencyColumn | undefined;
    /** This column stores DateTime values. */
    dateTime?: DateTimeColumn | undefined;
    /** The default value for this column. */
    defaultValue?: DefaultColumnValue | undefined;
    /** The user-facing description of the column. */
    description?: string | undefined;
    /** The user-facing name of the column. */
    displayName?: string | undefined;
    /** If true, no two list items may have the same value for this column. */
    enforceUniqueValues?: boolean | undefined;
    /** This column stores a geolocation. */
    geolocation?: GeolocationColumn | undefined;
    /** Specifies whether the column is displayed in the user interface. */
    hidden?: boolean | undefined;
    /** This column stores hyperlink or picture values. */
    hyperlinkOrPicture?: HyperlinkOrPictureColumn | undefined;
    /** Specifies whether the column values can be used for sorting and searching. */
    indexed?: boolean | undefined;
    /** Indicates whether this column can be deleted. */
    isDeletable?: boolean | undefined;
    /** Indicates whether values in the column can be reordered. Read-only. */
    isReorderable?: boolean | undefined;
    /** Specifies whether the column can be changed. */
    isSealed?: boolean | undefined;
    /** This column's data is looked up from another source in the site. */
    lookup?: LookupColumn | undefined;
    /** The API-facing name of the column as it appears in the fields on a listItem. For the user-facing name, see displayName. */
    name?: string | undefined;
    /** This column stores number values. */
    number?: NumberColumn | undefined;
    /** This column stores Person or Group values. */
    personOrGroup?: PersonOrGroupColumn | undefined;
    /** If 'true', changes to this column will be propagated to lists that implement the column. */
    propagateChanges?: boolean | undefined;
    /** Specifies whether the column values can be modified. */
    readOnly?: boolean | undefined;
    /** Specifies whether the column value isn't optional. */
    required?: boolean | undefined;
    /** The source column for the content type column. */
    sourceColumn?: ColumnDefinition | undefined;
    /** ContentType from which this column is inherited from. Present only in contentTypes columns response. Read-only. */
    sourceContentType?: ContentTypeInfo | undefined;
    /** This column stores taxonomy terms. */
    term?: TermColumn | undefined;
    /** This column stores text values. */
    text?: TextColumn | undefined;
    /** This column stores thumbnail values. */
    thumbnail?: ThumbnailColumn | undefined;
    /** For site columns, the type of column. Read-only. */
    type?: ColumnTypes | undefined;
    /** This column stores validation formula and message for the column. */
    validation?: ColumnValidation | undefined;
}

export class BooleanColumn implements IBooleanColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IBooleanColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): BooleanColumn {
        data = typeof data === 'object' ? data : {};
        let result = new BooleanColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IBooleanColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class CalculatedColumn implements ICalculatedColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** For dateTime output types, the format of the value. Possible values are: dateOnly or dateTime. */
    format?: string | undefined;
    /** The formula used to compute the value for this column. */
    formula?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The output type used to format values in this column. Possible values are: boolean, currency, dateTime, number, or text. */
    outputType?: string | undefined;

    constructor(data?: ICalculatedColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.format = _data["format"];
            this.formula = _data["formula"];
            this.odataType = _data["odataType"];
            this.outputType = _data["outputType"];
        }
    }

    static fromJS(data: any): CalculatedColumn {
        data = typeof data === 'object' ? data : {};
        let result = new CalculatedColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["format"] = this.format;
        data["formula"] = this.formula;
        data["odataType"] = this.odataType;
        data["outputType"] = this.outputType;
        return data;
    }
}

export interface ICalculatedColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** For dateTime output types, the format of the value. Possible values are: dateOnly or dateTime. */
    format?: string | undefined;
    /** The formula used to compute the value for this column. */
    formula?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The output type used to format values in this column. Possible values are: boolean, currency, dateTime, number, or text. */
    outputType?: string | undefined;
}

export class ChoiceColumn implements IChoiceColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If true, allows custom values that aren't in the configured choices. */
    allowTextEntry?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The list of values available for this column. */
    choices?: string[] | undefined;
    /** How the choices are to be presented in the UX. Must be one of checkBoxes, dropDownMenu, or radioButtons */
    displayAs?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IChoiceColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowTextEntry = _data["allowTextEntry"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            if (Array.isArray(_data["choices"])) {
                this.choices = [] as any;
                for (let item of _data["choices"])
                    this.choices!.push(item);
            }
            this.displayAs = _data["displayAs"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ChoiceColumn {
        data = typeof data === 'object' ? data : {};
        let result = new ChoiceColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowTextEntry"] = this.allowTextEntry;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        if (Array.isArray(this.choices)) {
            data["choices"] = [];
            for (let item of this.choices)
                data["choices"].push(item);
        }
        data["displayAs"] = this.displayAs;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IChoiceColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If true, allows custom values that aren't in the configured choices. */
    allowTextEntry?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The list of values available for this column. */
    choices?: string[] | undefined;
    /** How the choices are to be presented in the UX. Must be one of checkBoxes, dropDownMenu, or radioButtons */
    displayAs?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ContentApprovalStatusColumn implements IContentApprovalStatusColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IContentApprovalStatusColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ContentApprovalStatusColumn {
        data = typeof data === 'object' ? data : {};
        let result = new ContentApprovalStatusColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IContentApprovalStatusColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class CurrencyColumn implements ICurrencyColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Specifies the locale from which to infer the currency symbol. */
    locale?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ICurrencyColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.locale = _data["locale"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): CurrencyColumn {
        data = typeof data === 'object' ? data : {};
        let result = new CurrencyColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["locale"] = this.locale;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ICurrencyColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Specifies the locale from which to infer the currency symbol. */
    locale?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class DateTimeColumn implements IDateTimeColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** How the value should be presented in the UX. Must be one of default, friendly, or standard. See below for more details. If unspecified, treated as default. */
    displayAs?: string | undefined;
    /** Indicates whether the value should be presented as a date only or a date and time. Must be one of dateOnly or dateTime */
    format?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IDateTimeColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayAs = _data["displayAs"];
            this.format = _data["format"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): DateTimeColumn {
        data = typeof data === 'object' ? data : {};
        let result = new DateTimeColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayAs"] = this.displayAs;
        data["format"] = this.format;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IDateTimeColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** How the value should be presented in the UX. Must be one of default, friendly, or standard. See below for more details. If unspecified, treated as default. */
    displayAs?: string | undefined;
    /** Indicates whether the value should be presented as a date only or a date and time. Must be one of dateOnly or dateTime */
    format?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class DefaultColumnValue implements IDefaultColumnValue {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The formula used to compute the default value for the column. */
    formula?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The direct value to use as the default value for the column. */
    value?: string | undefined;

    constructor(data?: IDefaultColumnValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.formula = _data["formula"];
            this.odataType = _data["odataType"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): DefaultColumnValue {
        data = typeof data === 'object' ? data : {};
        let result = new DefaultColumnValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["formula"] = this.formula;
        data["odataType"] = this.odataType;
        data["value"] = this.value;
        return data;
    }
}

export interface IDefaultColumnValue {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The formula used to compute the default value for the column. */
    formula?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The direct value to use as the default value for the column. */
    value?: string | undefined;
}

export class GeolocationColumn implements IGeolocationColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IGeolocationColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): GeolocationColumn {
        data = typeof data === 'object' ? data : {};
        let result = new GeolocationColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IGeolocationColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class HyperlinkOrPictureColumn implements IHyperlinkOrPictureColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Specifies whether the display format used for URL columns is an image or a hyperlink. */
    isPicture?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IHyperlinkOrPictureColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.isPicture = _data["isPicture"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): HyperlinkOrPictureColumn {
        data = typeof data === 'object' ? data : {};
        let result = new HyperlinkOrPictureColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["isPicture"] = this.isPicture;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IHyperlinkOrPictureColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Specifies whether the display format used for URL columns is an image or a hyperlink. */
    isPicture?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class LookupColumn implements ILookupColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Indicates whether multiple values can be selected from the source. */
    allowMultipleValues?: boolean | undefined;
    /** Indicates whether values in the column should be able to exceed the standard limit of 255 characters. */
    allowUnlimitedLength?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The name of the lookup source column. */
    columnName?: string | undefined;
    /** The unique identifier of the lookup source list. */
    listId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** If specified, this column is a secondary lookup, pulling an additional field from the list item looked up by the primary lookup. Use the list item looked up by the primary as the source for the column named here. */
    primaryLookupColumnId?: string | undefined;

    constructor(data?: ILookupColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowMultipleValues = _data["allowMultipleValues"];
            this.allowUnlimitedLength = _data["allowUnlimitedLength"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.columnName = _data["columnName"];
            this.listId = _data["listId"];
            this.odataType = _data["odataType"];
            this.primaryLookupColumnId = _data["primaryLookupColumnId"];
        }
    }

    static fromJS(data: any): LookupColumn {
        data = typeof data === 'object' ? data : {};
        let result = new LookupColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowMultipleValues"] = this.allowMultipleValues;
        data["allowUnlimitedLength"] = this.allowUnlimitedLength;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["columnName"] = this.columnName;
        data["listId"] = this.listId;
        data["odataType"] = this.odataType;
        data["primaryLookupColumnId"] = this.primaryLookupColumnId;
        return data;
    }
}

export interface ILookupColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Indicates whether multiple values can be selected from the source. */
    allowMultipleValues?: boolean | undefined;
    /** Indicates whether values in the column should be able to exceed the standard limit of 255 characters. */
    allowUnlimitedLength?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The name of the lookup source column. */
    columnName?: string | undefined;
    /** The unique identifier of the lookup source list. */
    listId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** If specified, this column is a secondary lookup, pulling an additional field from the list item looked up by the primary lookup. Use the list item looked up by the primary as the source for the column named here. */
    primaryLookupColumnId?: string | undefined;
}

export class NumberColumn implements INumberColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** How many decimal places to display. See below for information about the possible values. */
    decimalPlaces?: string | undefined;
    /** How the value should be presented in the UX. Must be one of number or percentage. If unspecified, treated as number. */
    displayAs?: string | undefined;
    /** The maximum permitted value. */
    maximum?: number | undefined;
    /** The minimum permitted value. */
    minimum?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: INumberColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.decimalPlaces = _data["decimalPlaces"];
            this.displayAs = _data["displayAs"];
            this.maximum = _data["maximum"];
            this.minimum = _data["minimum"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): NumberColumn {
        data = typeof data === 'object' ? data : {};
        let result = new NumberColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["decimalPlaces"] = this.decimalPlaces;
        data["displayAs"] = this.displayAs;
        data["maximum"] = this.maximum;
        data["minimum"] = this.minimum;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface INumberColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** How many decimal places to display. See below for information about the possible values. */
    decimalPlaces?: string | undefined;
    /** How the value should be presented in the UX. Must be one of number or percentage. If unspecified, treated as number. */
    displayAs?: string | undefined;
    /** The maximum permitted value. */
    maximum?: number | undefined;
    /** The minimum permitted value. */
    minimum?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class PersonOrGroupColumn implements IPersonOrGroupColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Indicates whether multiple values can be selected from the source. */
    allowMultipleSelection?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Whether to allow selection of people only, or people and groups. Must be one of peopleAndGroups or peopleOnly. */
    chooseFromType?: string | undefined;
    /** How to display the information about the person or group chosen. See below. */
    displayAs?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPersonOrGroupColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowMultipleSelection = _data["allowMultipleSelection"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.chooseFromType = _data["chooseFromType"];
            this.displayAs = _data["displayAs"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PersonOrGroupColumn {
        data = typeof data === 'object' ? data : {};
        let result = new PersonOrGroupColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowMultipleSelection"] = this.allowMultipleSelection;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["chooseFromType"] = this.chooseFromType;
        data["displayAs"] = this.displayAs;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPersonOrGroupColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Indicates whether multiple values can be selected from the source. */
    allowMultipleSelection?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Whether to allow selection of people only, or people and groups. Must be one of peopleAndGroups or peopleOnly. */
    chooseFromType?: string | undefined;
    /** How to display the information about the person or group chosen. See below. */
    displayAs?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class TermColumn implements ITermColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Specifies whether the column allows more than one value. */
    allowMultipleValues?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The parentTerm property */
    parentTerm?: Term | undefined;
    /** Specifies whether to display the entire term path or only the term label. */
    showFullyQualifiedName?: boolean | undefined;
    /** The termSet property */
    termSet?: Set | undefined;

    constructor(data?: ITermColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowMultipleValues = _data["allowMultipleValues"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.parentTerm = _data["parentTerm"] ? Term.fromJS(_data["parentTerm"]) : <any>undefined;
            this.showFullyQualifiedName = _data["showFullyQualifiedName"];
            this.termSet = _data["termSet"] ? Set.fromJS(_data["termSet"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TermColumn {
        data = typeof data === 'object' ? data : {};
        let result = new TermColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowMultipleValues"] = this.allowMultipleValues;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["parentTerm"] = this.parentTerm ? this.parentTerm.toJSON() : <any>undefined;
        data["showFullyQualifiedName"] = this.showFullyQualifiedName;
        data["termSet"] = this.termSet ? this.termSet.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITermColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Specifies whether the column allows more than one value. */
    allowMultipleValues?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The parentTerm property */
    parentTerm?: Term | undefined;
    /** Specifies whether to display the entire term path or only the term label. */
    showFullyQualifiedName?: boolean | undefined;
    /** The termSet property */
    termSet?: Set | undefined;
}

export class Term extends Entity implements ITerm {
    /** Children of current term. */
    children?: Term[] | undefined;
    /** Date and time of term creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Description about term that is dependent on the languageTag. */
    descriptions?: LocalizedDescription[] | undefined;
    /** Label metadata for a term. */
    labels?: LocalizedLabel[] | undefined;
    /** Last date and time of term modification. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** Collection of properties on the term. */
    properties?: KeyValue[] | undefined;
    /** To indicate which terms are related to the current term as either pinned or reused. */
    relations?: Relation[] | undefined;
    /** The [set] in which the term is created. */
    set?: Set | undefined;

    constructor(data?: ITerm) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Term.fromJS(item));
            }
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["descriptions"])) {
                this.descriptions = [] as any;
                for (let item of _data["descriptions"])
                    this.descriptions!.push(LocalizedDescription.fromJS(item));
            }
            if (Array.isArray(_data["labels"])) {
                this.labels = [] as any;
                for (let item of _data["labels"])
                    this.labels!.push(LocalizedLabel.fromJS(item));
            }
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(KeyValue.fromJS(item));
            }
            if (Array.isArray(_data["relations"])) {
                this.relations = [] as any;
                for (let item of _data["relations"])
                    this.relations!.push(Relation.fromJS(item));
            }
            this.set = _data["set"] ? Set.fromJS(_data["set"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Term {
        data = typeof data === 'object' ? data : {};
        let result = new Term();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.descriptions)) {
            data["descriptions"] = [];
            for (let item of this.descriptions)
                data["descriptions"].push(item.toJSON());
        }
        if (Array.isArray(this.labels)) {
            data["labels"] = [];
            for (let item of this.labels)
                data["labels"].push(item.toJSON());
        }
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item.toJSON());
        }
        if (Array.isArray(this.relations)) {
            data["relations"] = [];
            for (let item of this.relations)
                data["relations"].push(item.toJSON());
        }
        data["set"] = this.set ? this.set.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ITerm extends IEntity {
    /** Children of current term. */
    children?: Term[] | undefined;
    /** Date and time of term creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Description about term that is dependent on the languageTag. */
    descriptions?: LocalizedDescription[] | undefined;
    /** Label metadata for a term. */
    labels?: LocalizedLabel[] | undefined;
    /** Last date and time of term modification. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** Collection of properties on the term. */
    properties?: KeyValue[] | undefined;
    /** To indicate which terms are related to the current term as either pinned or reused. */
    relations?: Relation[] | undefined;
    /** The [set] in which the term is created. */
    set?: Set | undefined;
}

export class LocalizedDescription implements ILocalizedDescription {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The description in the localized language. */
    description?: string | undefined;
    /** The language tag for the label. */
    languageTag?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ILocalizedDescription) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.description = _data["description"];
            this.languageTag = _data["languageTag"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): LocalizedDescription {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedDescription();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["languageTag"] = this.languageTag;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ILocalizedDescription {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The description in the localized language. */
    description?: string | undefined;
    /** The language tag for the label. */
    languageTag?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class LocalizedLabel implements ILocalizedLabel {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether the label is the default label. */
    isDefault?: boolean | undefined;
    /** The language tag for the label. */
    languageTag?: string | undefined;
    /** The name of the label. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ILocalizedLabel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.isDefault = _data["isDefault"];
            this.languageTag = _data["languageTag"];
            this.name = _data["name"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): LocalizedLabel {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedLabel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["isDefault"] = this.isDefault;
        data["languageTag"] = this.languageTag;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ILocalizedLabel {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether the label is the default label. */
    isDefault?: boolean | undefined;
    /** The language tag for the label. */
    languageTag?: string | undefined;
    /** The name of the label. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class KeyValue implements IKeyValue {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Key for the key-value pair. */
    key?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Value for the key-value pair. */
    value?: string | undefined;

    constructor(data?: IKeyValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.key = _data["key"];
            this.odataType = _data["odataType"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): KeyValue {
        data = typeof data === 'object' ? data : {};
        let result = new KeyValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["key"] = this.key;
        data["odataType"] = this.odataType;
        data["value"] = this.value;
        return data;
    }
}

export interface IKeyValue {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Key for the key-value pair. */
    key?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Value for the key-value pair. */
    value?: string | undefined;
}

export class Relation extends Entity implements IRelation {
    /** The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set]. */
    fromTerm?: Term | undefined;
    /** The type of relation. Possible values are: pin, reuse. */
    relationship?: RelationType | undefined;
    /** The [set] in which the relation is relevant. */
    set?: Set | undefined;
    /** The to [term] of the relation. The term to which the relationship is defined. */
    toTerm?: Term | undefined;

    constructor(data?: IRelation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fromTerm = _data["fromTerm"] ? Term.fromJS(_data["fromTerm"]) : <any>undefined;
            this.relationship = _data["relationship"];
            this.set = _data["set"] ? Set.fromJS(_data["set"]) : <any>undefined;
            this.toTerm = _data["toTerm"] ? Term.fromJS(_data["toTerm"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Relation {
        data = typeof data === 'object' ? data : {};
        let result = new Relation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fromTerm"] = this.fromTerm ? this.fromTerm.toJSON() : <any>undefined;
        data["relationship"] = this.relationship;
        data["set"] = this.set ? this.set.toJSON() : <any>undefined;
        data["toTerm"] = this.toTerm ? this.toTerm.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IRelation extends IEntity {
    /** The from [term] of the relation. The term from which the relationship is defined. A null value would indicate the relation is directly with the [set]. */
    fromTerm?: Term | undefined;
    /** The type of relation. Possible values are: pin, reuse. */
    relationship?: RelationType | undefined;
    /** The [set] in which the relation is relevant. */
    set?: Set | undefined;
    /** The to [term] of the relation. The term to which the relationship is defined. */
    toTerm?: Term | undefined;
}

export enum RelationType {
    Pin = 0,
    Reuse = 1,
    UnknownFutureValue = 2,
}

export class Set extends Entity implements ISet {
    /** Children terms of set in term [store]. */
    children?: Term[] | undefined;
    /** Date and time of set creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Description that gives details on the term usage. */
    description?: string | undefined;
    /** Name of the set for each languageTag. */
    localizedNames?: LocalizedName[] | undefined;
    /** The parentGroup property */
    parentGroup?: Group | undefined;
    /** Custom properties for the set. */
    properties?: KeyValue[] | undefined;
    /** Indicates which terms have been pinned or reused directly under the set. */
    relations?: Relation[] | undefined;
    /** All the terms under the set. */
    terms?: Term[] | undefined;

    constructor(data?: ISet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["children"])) {
                this.children = [] as any;
                for (let item of _data["children"])
                    this.children!.push(Term.fromJS(item));
            }
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.description = _data["description"];
            if (Array.isArray(_data["localizedNames"])) {
                this.localizedNames = [] as any;
                for (let item of _data["localizedNames"])
                    this.localizedNames!.push(LocalizedName.fromJS(item));
            }
            this.parentGroup = _data["parentGroup"] ? Group.fromJS(_data["parentGroup"]) : <any>undefined;
            if (Array.isArray(_data["properties"])) {
                this.properties = [] as any;
                for (let item of _data["properties"])
                    this.properties!.push(KeyValue.fromJS(item));
            }
            if (Array.isArray(_data["relations"])) {
                this.relations = [] as any;
                for (let item of _data["relations"])
                    this.relations!.push(Relation.fromJS(item));
            }
            if (Array.isArray(_data["terms"])) {
                this.terms = [] as any;
                for (let item of _data["terms"])
                    this.terms!.push(Term.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Set {
        data = typeof data === 'object' ? data : {};
        let result = new Set();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        if (Array.isArray(this.localizedNames)) {
            data["localizedNames"] = [];
            for (let item of this.localizedNames)
                data["localizedNames"].push(item.toJSON());
        }
        data["parentGroup"] = this.parentGroup ? this.parentGroup.toJSON() : <any>undefined;
        if (Array.isArray(this.properties)) {
            data["properties"] = [];
            for (let item of this.properties)
                data["properties"].push(item.toJSON());
        }
        if (Array.isArray(this.relations)) {
            data["relations"] = [];
            for (let item of this.relations)
                data["relations"].push(item.toJSON());
        }
        if (Array.isArray(this.terms)) {
            data["terms"] = [];
            for (let item of this.terms)
                data["terms"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISet extends IEntity {
    /** Children terms of set in term [store]. */
    children?: Term[] | undefined;
    /** Date and time of set creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Description that gives details on the term usage. */
    description?: string | undefined;
    /** Name of the set for each languageTag. */
    localizedNames?: LocalizedName[] | undefined;
    /** The parentGroup property */
    parentGroup?: Group | undefined;
    /** Custom properties for the set. */
    properties?: KeyValue[] | undefined;
    /** Indicates which terms have been pinned or reused directly under the set. */
    relations?: Relation[] | undefined;
    /** All the terms under the set. */
    terms?: Term[] | undefined;
}

export class LocalizedName implements ILocalizedName {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The language tag for the label. */
    languageTag?: string | undefined;
    /** The name in the localized language. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ILocalizedName) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.languageTag = _data["languageTag"];
            this.name = _data["name"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): LocalizedName {
        data = typeof data === 'object' ? data : {};
        let result = new LocalizedName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["languageTag"] = this.languageTag;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ILocalizedName {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The language tag for the label. */
    languageTag?: string | undefined;
    /** The name in the localized language. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Group extends Entity implements IGroup {
    /** Date and time of the group creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Description that gives details on the term usage. */
    description?: string | undefined;
    /** Name of the group. */
    displayName?: string | undefined;
    /** ID of the parent site of this group. */
    parentSiteId?: string | undefined;
    /** Returns the type of the group. Possible values are: global, system, and siteCollection. */
    scope?: TermGroupScope | undefined;
    /** All sets under the group in a term [store]. */
    sets?: Set[] | undefined;

    constructor(data?: IGroup) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.displayName = _data["displayName"];
            this.parentSiteId = _data["parentSiteId"];
            this.scope = _data["scope"];
            if (Array.isArray(_data["sets"])) {
                this.sets = [] as any;
                for (let item of _data["sets"])
                    this.sets!.push(Set.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Group {
        data = typeof data === 'object' ? data : {};
        let result = new Group();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["parentSiteId"] = this.parentSiteId;
        data["scope"] = this.scope;
        if (Array.isArray(this.sets)) {
            data["sets"] = [];
            for (let item of this.sets)
                data["sets"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGroup extends IEntity {
    /** Date and time of the group creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Description that gives details on the term usage. */
    description?: string | undefined;
    /** Name of the group. */
    displayName?: string | undefined;
    /** ID of the parent site of this group. */
    parentSiteId?: string | undefined;
    /** Returns the type of the group. Possible values are: global, system, and siteCollection. */
    scope?: TermGroupScope | undefined;
    /** All sets under the group in a term [store]. */
    sets?: Set[] | undefined;
}

export enum TermGroupScope {
    Global = 0,
    System = 1,
    SiteCollection = 2,
    UnknownFutureValue = 3,
}

export class TextColumn implements ITextColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Whether to allow multiple lines of text. */
    allowMultipleLines?: boolean | undefined;
    /** Whether updates to this column should replace existing text, or append to it. */
    appendChangesToExistingText?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The size of the text box. */
    linesForEditing?: number | undefined;
    /** The maximum number of characters for the value. */
    maxLength?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The type of text being stored. Must be one of plain or richText */
    textType?: string | undefined;

    constructor(data?: ITextColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowMultipleLines = _data["allowMultipleLines"];
            this.appendChangesToExistingText = _data["appendChangesToExistingText"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.linesForEditing = _data["linesForEditing"];
            this.maxLength = _data["maxLength"];
            this.odataType = _data["odataType"];
            this.textType = _data["textType"];
        }
    }

    static fromJS(data: any): TextColumn {
        data = typeof data === 'object' ? data : {};
        let result = new TextColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowMultipleLines"] = this.allowMultipleLines;
        data["appendChangesToExistingText"] = this.appendChangesToExistingText;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["linesForEditing"] = this.linesForEditing;
        data["maxLength"] = this.maxLength;
        data["odataType"] = this.odataType;
        data["textType"] = this.textType;
        return data;
    }
}

export interface ITextColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Whether to allow multiple lines of text. */
    allowMultipleLines?: boolean | undefined;
    /** Whether updates to this column should replace existing text, or append to it. */
    appendChangesToExistingText?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The size of the text box. */
    linesForEditing?: number | undefined;
    /** The maximum number of characters for the value. */
    maxLength?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The type of text being stored. Must be one of plain or richText */
    textType?: string | undefined;
}

export class ThumbnailColumn implements IThumbnailColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IThumbnailColumn) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ThumbnailColumn {
        data = typeof data === 'object' ? data : {};
        let result = new ThumbnailColumn();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IThumbnailColumn {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum ColumnTypes {
    Note = 0,
    Text = 1,
    Choice = 2,
    Multichoice = 3,
    Number = 4,
    Currency = 5,
    DateTime = 6,
    Lookup = 7,
    Boolean = 8,
    User = 9,
    Url = 10,
    Calculated = 11,
    Location = 12,
    Geolocation = 13,
    Term = 14,
    Multiterm = 15,
    Thumbnail = 16,
    ApprovalStatus = 17,
    UnknownFutureValue = 18,
}

export class ColumnValidation implements IColumnValidation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Default BCP 47 language tag for the description. */
    defaultLanguage?: string | undefined;
    /** Localized messages that explain what is needed for this column's value to be considered valid. User will be prompted with this message if validation fails. */
    descriptions?: DisplayNameLocalization[] | undefined;
    /** The formula to validate column value. For examples, see Examples of common formulas in lists. */
    formula?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IColumnValidation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.defaultLanguage = _data["defaultLanguage"];
            if (Array.isArray(_data["descriptions"])) {
                this.descriptions = [] as any;
                for (let item of _data["descriptions"])
                    this.descriptions!.push(DisplayNameLocalization.fromJS(item));
            }
            this.formula = _data["formula"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ColumnValidation {
        data = typeof data === 'object' ? data : {};
        let result = new ColumnValidation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["defaultLanguage"] = this.defaultLanguage;
        if (Array.isArray(this.descriptions)) {
            data["descriptions"] = [];
            for (let item of this.descriptions)
                data["descriptions"].push(item.toJSON());
        }
        data["formula"] = this.formula;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IColumnValidation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Default BCP 47 language tag for the description. */
    defaultLanguage?: string | undefined;
    /** Localized messages that explain what is needed for this column's value to be considered valid. User will be prompted with this message if validation fails. */
    descriptions?: DisplayNameLocalization[] | undefined;
    /** The formula to validate column value. For examples, see Examples of common formulas in lists. */
    formula?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class DisplayNameLocalization implements IDisplayNameLocalization {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** If present, the value of this field contains the displayName string that has been set for the language present in the languageTag field. */
    displayName?: string | undefined;
    /** Provides the language culture-code and friendly name of the language that the displayName field has been provided in. */
    languageTag?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IDisplayNameLocalization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.languageTag = _data["languageTag"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): DisplayNameLocalization {
        data = typeof data === 'object' ? data : {};
        let result = new DisplayNameLocalization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["languageTag"] = this.languageTag;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IDisplayNameLocalization {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** If present, the value of this field contains the displayName string that has been set for the language present in the languageTag field. */
    displayName?: string | undefined;
    /** Provides the language culture-code and friendly name of the language that the displayName field has been provided in. */
    languageTag?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ContentType extends Entity implements IContentType {
    /** List of canonical URLs for hub sites with which this content type is associated to. This will contain all hub sites where this content type is queued to be enforced or is already enforced. Enforcing a content type means that the content type is applied to the lists in the enforced sites. */
    associatedHubsUrls?: string[] | undefined;
    /** Parent contentType from which this content type is derived. */
    base?: ContentType | undefined;
    /** The collection of content types that are ancestors of this content type. */
    baseTypes?: ContentType[] | undefined;
    /** The collection of columns that are required by this content type. */
    columnLinks?: ColumnLink[] | undefined;
    /** Column order information in a content type. */
    columnPositions?: ColumnDefinition[] | undefined;
    /** The collection of column definitions for this content type. */
    columns?: ColumnDefinition[] | undefined;
    /** The descriptive text for the item. */
    description?: string | undefined;
    /** Document Set metadata. */
    documentSet?: DocumentSet | undefined;
    /** Document template metadata. To make sure that documents have consistent content across a site and its subsites, you can associate a Word, Excel, or PowerPoint template with a site content type. */
    documentTemplate?: DocumentSetContent | undefined;
    /** The name of the group this content type belongs to. Helps organize related content types. */
    group?: string | undefined;
    /** Indicates whether the content type is hidden in the list's 'New' menu. */
    hidden?: boolean | undefined;
    /** If this content type is inherited from another scope (like a site), provides a reference to the item where the content type is defined. */
    inheritedFrom?: ItemReference | undefined;
    /** Specifies if a content type is a built-in content type. */
    isBuiltIn?: boolean | undefined;
    /** The name of the content type. */
    name?: string | undefined;
    /** Specifies the order in which the content type appears in the selection UI. */
    order?: ContentTypeOrder | undefined;
    /** The unique identifier of the content type. */
    parentId?: string | undefined;
    /** If true, any changes made to the content type are pushed to inherited content types and lists that implement the content type. */
    propagateChanges?: boolean | undefined;
    /** If true, the content type can't be modified unless this value is first set to false. */
    readOnly?: boolean | undefined;
    /** If true, the content type can't be modified by users or through push-down operations. Only site collection administrators can seal or unseal content types. */
    sealed?: boolean | undefined;

    constructor(data?: IContentType) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["associatedHubsUrls"])) {
                this.associatedHubsUrls = [] as any;
                for (let item of _data["associatedHubsUrls"])
                    this.associatedHubsUrls!.push(item);
            }
            this.base = _data["base"] ? ContentType.fromJS(_data["base"]) : <any>undefined;
            if (Array.isArray(_data["baseTypes"])) {
                this.baseTypes = [] as any;
                for (let item of _data["baseTypes"])
                    this.baseTypes!.push(ContentType.fromJS(item));
            }
            if (Array.isArray(_data["columnLinks"])) {
                this.columnLinks = [] as any;
                for (let item of _data["columnLinks"])
                    this.columnLinks!.push(ColumnLink.fromJS(item));
            }
            if (Array.isArray(_data["columnPositions"])) {
                this.columnPositions = [] as any;
                for (let item of _data["columnPositions"])
                    this.columnPositions!.push(ColumnDefinition.fromJS(item));
            }
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns!.push(ColumnDefinition.fromJS(item));
            }
            this.description = _data["description"];
            this.documentSet = _data["documentSet"] ? DocumentSet.fromJS(_data["documentSet"]) : <any>undefined;
            this.documentTemplate = _data["documentTemplate"] ? DocumentSetContent.fromJS(_data["documentTemplate"]) : <any>undefined;
            this.group = _data["group"];
            this.hidden = _data["hidden"];
            this.inheritedFrom = _data["inheritedFrom"] ? ItemReference.fromJS(_data["inheritedFrom"]) : <any>undefined;
            this.isBuiltIn = _data["isBuiltIn"];
            this.name = _data["name"];
            this.order = _data["order"] ? ContentTypeOrder.fromJS(_data["order"]) : <any>undefined;
            this.parentId = _data["parentId"];
            this.propagateChanges = _data["propagateChanges"];
            this.readOnly = _data["readOnly"];
            this.sealed = _data["sealed"];
        }
    }

    static override fromJS(data: any): ContentType {
        data = typeof data === 'object' ? data : {};
        let result = new ContentType();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.associatedHubsUrls)) {
            data["associatedHubsUrls"] = [];
            for (let item of this.associatedHubsUrls)
                data["associatedHubsUrls"].push(item);
        }
        data["base"] = this.base ? this.base.toJSON() : <any>undefined;
        if (Array.isArray(this.baseTypes)) {
            data["baseTypes"] = [];
            for (let item of this.baseTypes)
                data["baseTypes"].push(item.toJSON());
        }
        if (Array.isArray(this.columnLinks)) {
            data["columnLinks"] = [];
            for (let item of this.columnLinks)
                data["columnLinks"].push(item.toJSON());
        }
        if (Array.isArray(this.columnPositions)) {
            data["columnPositions"] = [];
            for (let item of this.columnPositions)
                data["columnPositions"].push(item.toJSON());
        }
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        data["description"] = this.description;
        data["documentSet"] = this.documentSet ? this.documentSet.toJSON() : <any>undefined;
        data["documentTemplate"] = this.documentTemplate ? this.documentTemplate.toJSON() : <any>undefined;
        data["group"] = this.group;
        data["hidden"] = this.hidden;
        data["inheritedFrom"] = this.inheritedFrom ? this.inheritedFrom.toJSON() : <any>undefined;
        data["isBuiltIn"] = this.isBuiltIn;
        data["name"] = this.name;
        data["order"] = this.order ? this.order.toJSON() : <any>undefined;
        data["parentId"] = this.parentId;
        data["propagateChanges"] = this.propagateChanges;
        data["readOnly"] = this.readOnly;
        data["sealed"] = this.sealed;
        super.toJSON(data);
        return data;
    }
}

export interface IContentType extends IEntity {
    /** List of canonical URLs for hub sites with which this content type is associated to. This will contain all hub sites where this content type is queued to be enforced or is already enforced. Enforcing a content type means that the content type is applied to the lists in the enforced sites. */
    associatedHubsUrls?: string[] | undefined;
    /** Parent contentType from which this content type is derived. */
    base?: ContentType | undefined;
    /** The collection of content types that are ancestors of this content type. */
    baseTypes?: ContentType[] | undefined;
    /** The collection of columns that are required by this content type. */
    columnLinks?: ColumnLink[] | undefined;
    /** Column order information in a content type. */
    columnPositions?: ColumnDefinition[] | undefined;
    /** The collection of column definitions for this content type. */
    columns?: ColumnDefinition[] | undefined;
    /** The descriptive text for the item. */
    description?: string | undefined;
    /** Document Set metadata. */
    documentSet?: DocumentSet | undefined;
    /** Document template metadata. To make sure that documents have consistent content across a site and its subsites, you can associate a Word, Excel, or PowerPoint template with a site content type. */
    documentTemplate?: DocumentSetContent | undefined;
    /** The name of the group this content type belongs to. Helps organize related content types. */
    group?: string | undefined;
    /** Indicates whether the content type is hidden in the list's 'New' menu. */
    hidden?: boolean | undefined;
    /** If this content type is inherited from another scope (like a site), provides a reference to the item where the content type is defined. */
    inheritedFrom?: ItemReference | undefined;
    /** Specifies if a content type is a built-in content type. */
    isBuiltIn?: boolean | undefined;
    /** The name of the content type. */
    name?: string | undefined;
    /** Specifies the order in which the content type appears in the selection UI. */
    order?: ContentTypeOrder | undefined;
    /** The unique identifier of the content type. */
    parentId?: string | undefined;
    /** If true, any changes made to the content type are pushed to inherited content types and lists that implement the content type. */
    propagateChanges?: boolean | undefined;
    /** If true, the content type can't be modified unless this value is first set to false. */
    readOnly?: boolean | undefined;
    /** If true, the content type can't be modified by users or through push-down operations. Only site collection administrators can seal or unseal content types. */
    sealed?: boolean | undefined;
}

export class ColumnLink extends Entity implements IColumnLink {
    /** The name of the column  in this content type. */
    name?: string | undefined;

    constructor(data?: IColumnLink) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
        }
    }

    static override fromJS(data: any): ColumnLink {
        data = typeof data === 'object' ? data : {};
        let result = new ColumnLink();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        super.toJSON(data);
        return data;
    }
}

export interface IColumnLink extends IEntity {
    /** The name of the column  in this content type. */
    name?: string | undefined;
}

export class DocumentSet implements IDocumentSet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Content types allowed in document set. */
    allowedContentTypes?: ContentTypeInfo[] | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Default contents of document set. */
    defaultContents?: DocumentSetContent[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies whether to push welcome page changes to inherited content types. */
    propagateWelcomePageChanges?: boolean | undefined;
    /** The sharedColumns property */
    sharedColumns?: ColumnDefinition[] | undefined;
    /** Indicates whether to add the name of the document set to each file name. */
    shouldPrefixNameToFile?: boolean | undefined;
    /** The welcomePageColumns property */
    welcomePageColumns?: ColumnDefinition[] | undefined;
    /** Welcome page absolute URL. */
    welcomePageUrl?: string | undefined;

    constructor(data?: IDocumentSet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            if (Array.isArray(_data["allowedContentTypes"])) {
                this.allowedContentTypes = [] as any;
                for (let item of _data["allowedContentTypes"])
                    this.allowedContentTypes!.push(ContentTypeInfo.fromJS(item));
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            if (Array.isArray(_data["defaultContents"])) {
                this.defaultContents = [] as any;
                for (let item of _data["defaultContents"])
                    this.defaultContents!.push(DocumentSetContent.fromJS(item));
            }
            this.odataType = _data["odataType"];
            this.propagateWelcomePageChanges = _data["propagateWelcomePageChanges"];
            if (Array.isArray(_data["sharedColumns"])) {
                this.sharedColumns = [] as any;
                for (let item of _data["sharedColumns"])
                    this.sharedColumns!.push(ColumnDefinition.fromJS(item));
            }
            this.shouldPrefixNameToFile = _data["shouldPrefixNameToFile"];
            if (Array.isArray(_data["welcomePageColumns"])) {
                this.welcomePageColumns = [] as any;
                for (let item of _data["welcomePageColumns"])
                    this.welcomePageColumns!.push(ColumnDefinition.fromJS(item));
            }
            this.welcomePageUrl = _data["welcomePageUrl"];
        }
    }

    static fromJS(data: any): DocumentSet {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentSet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        if (Array.isArray(this.allowedContentTypes)) {
            data["allowedContentTypes"] = [];
            for (let item of this.allowedContentTypes)
                data["allowedContentTypes"].push(item.toJSON());
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        if (Array.isArray(this.defaultContents)) {
            data["defaultContents"] = [];
            for (let item of this.defaultContents)
                data["defaultContents"].push(item.toJSON());
        }
        data["odataType"] = this.odataType;
        data["propagateWelcomePageChanges"] = this.propagateWelcomePageChanges;
        if (Array.isArray(this.sharedColumns)) {
            data["sharedColumns"] = [];
            for (let item of this.sharedColumns)
                data["sharedColumns"].push(item.toJSON());
        }
        data["shouldPrefixNameToFile"] = this.shouldPrefixNameToFile;
        if (Array.isArray(this.welcomePageColumns)) {
            data["welcomePageColumns"] = [];
            for (let item of this.welcomePageColumns)
                data["welcomePageColumns"].push(item.toJSON());
        }
        data["welcomePageUrl"] = this.welcomePageUrl;
        return data;
    }
}

export interface IDocumentSet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Content types allowed in document set. */
    allowedContentTypes?: ContentTypeInfo[] | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Default contents of document set. */
    defaultContents?: DocumentSetContent[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies whether to push welcome page changes to inherited content types. */
    propagateWelcomePageChanges?: boolean | undefined;
    /** The sharedColumns property */
    sharedColumns?: ColumnDefinition[] | undefined;
    /** Indicates whether to add the name of the document set to each file name. */
    shouldPrefixNameToFile?: boolean | undefined;
    /** The welcomePageColumns property */
    welcomePageColumns?: ColumnDefinition[] | undefined;
    /** Welcome page absolute URL. */
    welcomePageUrl?: string | undefined;
}

export class DocumentSetContent implements IDocumentSetContent {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Content type information of the file. */
    contentType?: ContentTypeInfo | undefined;
    /** Name of the file in resource folder that should be added as a default content or a template in the document set. */
    fileName?: string | undefined;
    /** Folder name in which the file will be placed when a new document set is created in the library. */
    folderName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IDocumentSetContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.contentType = _data["contentType"] ? ContentTypeInfo.fromJS(_data["contentType"]) : <any>undefined;
            this.fileName = _data["fileName"];
            this.folderName = _data["folderName"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): DocumentSetContent {
        data = typeof data === 'object' ? data : {};
        let result = new DocumentSetContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["contentType"] = this.contentType ? this.contentType.toJSON() : <any>undefined;
        data["fileName"] = this.fileName;
        data["folderName"] = this.folderName;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IDocumentSetContent {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Content type information of the file. */
    contentType?: ContentTypeInfo | undefined;
    /** Name of the file in resource folder that should be added as a default content or a template in the document set. */
    fileName?: string | undefined;
    /** Folder name in which the file will be placed when a new document set is created in the library. */
    folderName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ItemReference implements IItemReference {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Unique identifier of the drive instance that contains the driveItem. Only returned if the item is located in a drive. Read-only. */
    driveId?: string | undefined;
    /** Identifies the type of drive. Only returned if the item is located in a drive. See drive resource for values. */
    driveType?: string | undefined;
    /** Unique identifier of the driveItem in the drive or a listItem in a list. Read-only. */
    id?: string | undefined;
    /** The name of the item being referenced. Read-only. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Percent-encoded path that can be used to navigate to the item. Read-only. */
    path?: string | undefined;
    /** A unique identifier for a shared resource that can be accessed via the Shares API. */
    shareId?: string | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** For OneDrive for Business and SharePoint, this property represents the ID of the site that contains the parent document library of the driveItem resource or the parent list of the listItem resource. The value is the same as the id property of that site resource. It is an opaque string that consists of three identifiers of the site. For OneDrive, this property is not populated. */
    siteId?: string | undefined;

    constructor(data?: IItemReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.driveId = _data["driveId"];
            this.driveType = _data["driveType"];
            this.id = _data["id"];
            this.name = _data["name"];
            this.odataType = _data["odataType"];
            this.path = _data["path"];
            this.shareId = _data["shareId"];
            this.sharepointIds = _data["sharepointIds"] ? SharepointIds.fromJS(_data["sharepointIds"]) : <any>undefined;
            this.siteId = _data["siteId"];
        }
    }

    static fromJS(data: any): ItemReference {
        data = typeof data === 'object' ? data : {};
        let result = new ItemReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["driveId"] = this.driveId;
        data["driveType"] = this.driveType;
        data["id"] = this.id;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        data["path"] = this.path;
        data["shareId"] = this.shareId;
        data["sharepointIds"] = this.sharepointIds ? this.sharepointIds.toJSON() : <any>undefined;
        data["siteId"] = this.siteId;
        return data;
    }
}

export interface IItemReference {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Unique identifier of the drive instance that contains the driveItem. Only returned if the item is located in a drive. Read-only. */
    driveId?: string | undefined;
    /** Identifies the type of drive. Only returned if the item is located in a drive. See drive resource for values. */
    driveType?: string | undefined;
    /** Unique identifier of the driveItem in the drive or a listItem in a list. Read-only. */
    id?: string | undefined;
    /** The name of the item being referenced. Read-only. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Percent-encoded path that can be used to navigate to the item. Read-only. */
    path?: string | undefined;
    /** A unique identifier for a shared resource that can be accessed via the Shares API. */
    shareId?: string | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** For OneDrive for Business and SharePoint, this property represents the ID of the site that contains the parent document library of the driveItem resource or the parent list of the listItem resource. The value is the same as the id property of that site resource. It is an opaque string that consists of three identifiers of the site. For OneDrive, this property is not populated. */
    siteId?: string | undefined;
}

export class ContentTypeOrder implements IContentTypeOrder {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether this is the default content type */
    default?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the position in which the content type appears in the selection UI. */
    position?: number | undefined;

    constructor(data?: IContentTypeOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.default = _data["default"];
            this.odataType = _data["odataType"];
            this.position = _data["position"];
        }
    }

    static fromJS(data: any): ContentTypeOrder {
        data = typeof data === 'object' ? data : {};
        let result = new ContentTypeOrder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["default"] = this.default;
        data["odataType"] = this.odataType;
        data["position"] = this.position;
        return data;
    }
}

export interface IContentTypeOrder {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether this is the default content type */
    default?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the position in which the content type appears in the selection UI. */
    position?: number | undefined;
}

export class ListInfo implements IListInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** If true, indicates that content types are enabled for this list. */
    contentTypesEnabled?: boolean | undefined;
    /** If true, indicates that the list isn't normally visible in the SharePoint user experience. */
    hidden?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** An enumerated value that represents the base list template used in creating the list. Possible values include documentLibrary, genericList, task, survey, announcements, contacts, and more. */
    template?: string | undefined;

    constructor(data?: IListInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.contentTypesEnabled = _data["contentTypesEnabled"];
            this.hidden = _data["hidden"];
            this.odataType = _data["odataType"];
            this.template = _data["template"];
        }
    }

    static fromJS(data: any): ListInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ListInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["contentTypesEnabled"] = this.contentTypesEnabled;
        data["hidden"] = this.hidden;
        data["odataType"] = this.odataType;
        data["template"] = this.template;
        return data;
    }
}

export interface IListInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** If true, indicates that content types are enabled for this list. */
    contentTypesEnabled?: boolean | undefined;
    /** If true, indicates that the list isn't normally visible in the SharePoint user experience. */
    hidden?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** An enumerated value that represents the base list template used in creating the list. Possible values include documentLibrary, genericList, task, survey, announcements, contacts, and more. */
    template?: string | undefined;
}

/** The status of a long-running operation. */
export class RichLongRunningOperation extends LongRunningOperation implements IRichLongRunningOperation {
    /** Error that caused the operation to fail. */
    error?: PublicError | undefined;
    /** A value between 0 and 100 that indicates the progress of the operation. */
    percentageComplete?: number | undefined;
    /** The unique identifier for the result. */
    resourceId?: string | undefined;
    /** The type of the operation. */
    type?: string | undefined;

    constructor(data?: IRichLongRunningOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.error = _data["error"] ? PublicError.fromJS(_data["error"]) : <any>undefined;
            this.percentageComplete = _data["percentageComplete"];
            this.resourceId = _data["resourceId"];
            this.type = _data["type"];
        }
    }

    static override fromJS(data: any): RichLongRunningOperation {
        data = typeof data === 'object' ? data : {};
        let result = new RichLongRunningOperation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["percentageComplete"] = this.percentageComplete;
        data["resourceId"] = this.resourceId;
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

/** The status of a long-running operation. */
export interface IRichLongRunningOperation extends ILongRunningOperation {
    /** Error that caused the operation to fail. */
    error?: PublicError | undefined;
    /** A value between 0 and 100 that indicates the progress of the operation. */
    percentageComplete?: number | undefined;
    /** The unique identifier for the result. */
    resourceId?: string | undefined;
    /** The type of the operation. */
    type?: string | undefined;
}

export class PublicError implements IPublicError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Represents the error code. */
    code?: string | undefined;
    /** Details of the error. */
    details?: PublicErrorDetail[] | undefined;
    /** Details of the inner error. */
    innerError?: PublicInnerError | undefined;
    /** A non-localized message for the developer. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The target of the error. */
    target?: string | undefined;

    constructor(data?: IPublicError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.code = _data["code"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(PublicErrorDetail.fromJS(item));
            }
            this.innerError = _data["innerError"] ? PublicInnerError.fromJS(_data["innerError"]) : <any>undefined;
            this.message = _data["message"];
            this.odataType = _data["odataType"];
            this.target = _data["target"];
        }
    }

    static fromJS(data: any): PublicError {
        data = typeof data === 'object' ? data : {};
        let result = new PublicError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["code"] = this.code;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        data["innerError"] = this.innerError ? this.innerError.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["odataType"] = this.odataType;
        data["target"] = this.target;
        return data;
    }
}

export interface IPublicError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Represents the error code. */
    code?: string | undefined;
    /** Details of the error. */
    details?: PublicErrorDetail[] | undefined;
    /** Details of the inner error. */
    innerError?: PublicInnerError | undefined;
    /** A non-localized message for the developer. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The target of the error. */
    target?: string | undefined;
}

export class PublicErrorDetail implements IPublicErrorDetail {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The error code. */
    code?: string | undefined;
    /** The error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The target of the error. */
    target?: string | undefined;

    constructor(data?: IPublicErrorDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.code = _data["code"];
            this.message = _data["message"];
            this.odataType = _data["odataType"];
            this.target = _data["target"];
        }
    }

    static fromJS(data: any): PublicErrorDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PublicErrorDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["code"] = this.code;
        data["message"] = this.message;
        data["odataType"] = this.odataType;
        data["target"] = this.target;
        return data;
    }
}

export interface IPublicErrorDetail {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The error code. */
    code?: string | undefined;
    /** The error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The target of the error. */
    target?: string | undefined;
}

export class PublicInnerError implements IPublicInnerError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The error code. */
    code?: string | undefined;
    /** A collection of error details. */
    details?: PublicErrorDetail[] | undefined;
    /** The error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The target of the error. */
    target?: string | undefined;

    constructor(data?: IPublicInnerError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.code = _data["code"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(PublicErrorDetail.fromJS(item));
            }
            this.message = _data["message"];
            this.odataType = _data["odataType"];
            this.target = _data["target"];
        }
    }

    static fromJS(data: any): PublicInnerError {
        data = typeof data === 'object' ? data : {};
        let result = new PublicInnerError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["code"] = this.code;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        data["message"] = this.message;
        data["odataType"] = this.odataType;
        data["target"] = this.target;
        return data;
    }
}

export interface IPublicInnerError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The error code. */
    code?: string | undefined;
    /** A collection of error details. */
    details?: PublicErrorDetail[] | undefined;
    /** The error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The target of the error. */
    target?: string | undefined;
}

export class Subscription extends Entity implements ISubscription {
    /** Optional. Identifier of the application used to create the subscription. Read-only. */
    applicationId?: string | undefined;
    /** Required. Indicates the type of change in the subscribed resource that raises a change notification. The supported values are: created, updated, deleted. Multiple values can be combined using a comma-separated list. Note:  Drive root item and list change notifications support only the updated changeType. User and group change notifications support updated and deleted changeType. Use updated to receive notifications when user or group is created, updated, or soft deleted. Use deleted to receive notifications when user or group is permanently deleted. */
    changeType?: string | undefined;
    /** Optional. Specifies the value of the clientState property sent by the service in each change notification. The maximum length is 128 characters. The client can check that the change notification came from the service by comparing the value of the clientState property sent with the subscription with the value of the clientState property received with each change notification. */
    clientState?: string | undefined;
    /** Optional. Identifier of the user or service principal that created the subscription. If the app used delegated permissions to create the subscription, this field contains the ID of the signed-in user the app called on behalf of. If the app used application permissions, this field contains the ID of the service principal corresponding to the app. Read-only. */
    creatorId?: string | undefined;
    /** Optional. A base64-encoded representation of a certificate with a public key used to encrypt resource data in change notifications. Optional but required when includeResourceData is true. */
    encryptionCertificate?: string | undefined;
    /** Optional. A custom app-provided identifier to help identify the certificate needed to decrypt resource data. */
    encryptionCertificateId?: string | undefined;
    /** Required. Specifies the date and time when the webhook subscription expires. The time is in UTC, and can be an amount of time from subscription creation that varies for the resource subscribed to. For the maximum supported subscription length of time, see Subscription lifetime. */
    expirationDateTime?: Date | undefined;
    /** Optional. When set to true, change notifications include resource data (such as content of a chat message). */
    includeResourceData?: boolean | undefined;
    /** Optional. Specifies the latest version of Transport Layer Security (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible values are: v10, v11, v12, v13. For subscribers whose notification endpoint supports a version lower than the currently recommended version (TLS 1.2), specifying this property by a set timeline allows them to temporarily use their deprecated version of TLS before completing their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline would result in subscription operations failing. For subscribers whose notification endpoint already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph defaults the property to v1_2. */
    latestSupportedTlsVersion?: string | undefined;
    /** Required for Teams resources if  the expirationDateTime value is more than 1 hour from now; optional otherwise. The URL of the endpoint that receives lifecycle notifications, including subscriptionRemoved, reauthorizationRequired, and missed notifications. This URL must make use of the HTTPS protocol. For more information, see Reduce missing subscriptions and change notifications. */
    lifecycleNotificationUrl?: string | undefined;
    /** Optional. OData query options for specifying value for the targeting resource. Clients receive notifications when resource reaches the state matching the query options provided here. With this new property in the subscription creation payload along with all existing properties, Webhooks deliver notifications whenever a resource reaches the desired state mentioned in the notificationQueryOptions property. For example, when the print job is completed or when a print job resource isFetchable property value becomes true etc.  Supported only for Universal Print Service. For more information, see Subscribe to change notifications from cloud printing APIs using Microsoft Graph. */
    notificationQueryOptions?: string | undefined;
    /** Required. The URL of the endpoint that receives the change notifications. This URL must make use of the HTTPS protocol. Any query string parameter included in the notificationUrl property is included in the HTTP POST request when Microsoft Graph sends the change notifications. */
    notificationUrl?: string | undefined;
    /** Optional. The app ID that the subscription service can use to generate the validation token. The value allows the client to validate the authenticity of the notification received. */
    notificationUrlAppId?: string | undefined;
    /** Required. Specifies the resource that is monitored for changes. Don't include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values for each supported resource. */
    resource?: string | undefined;

    constructor(data?: ISubscription) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.applicationId = _data["applicationId"];
            this.changeType = _data["changeType"];
            this.clientState = _data["clientState"];
            this.creatorId = _data["creatorId"];
            this.encryptionCertificate = _data["encryptionCertificate"];
            this.encryptionCertificateId = _data["encryptionCertificateId"];
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            this.includeResourceData = _data["includeResourceData"];
            this.latestSupportedTlsVersion = _data["latestSupportedTlsVersion"];
            this.lifecycleNotificationUrl = _data["lifecycleNotificationUrl"];
            this.notificationQueryOptions = _data["notificationQueryOptions"];
            this.notificationUrl = _data["notificationUrl"];
            this.notificationUrlAppId = _data["notificationUrlAppId"];
            this.resource = _data["resource"];
        }
    }

    static override fromJS(data: any): Subscription {
        data = typeof data === 'object' ? data : {};
        let result = new Subscription();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationId"] = this.applicationId;
        data["changeType"] = this.changeType;
        data["clientState"] = this.clientState;
        data["creatorId"] = this.creatorId;
        data["encryptionCertificate"] = this.encryptionCertificate;
        data["encryptionCertificateId"] = this.encryptionCertificateId;
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        data["includeResourceData"] = this.includeResourceData;
        data["latestSupportedTlsVersion"] = this.latestSupportedTlsVersion;
        data["lifecycleNotificationUrl"] = this.lifecycleNotificationUrl;
        data["notificationQueryOptions"] = this.notificationQueryOptions;
        data["notificationUrl"] = this.notificationUrl;
        data["notificationUrlAppId"] = this.notificationUrlAppId;
        data["resource"] = this.resource;
        super.toJSON(data);
        return data;
    }
}

export interface ISubscription extends IEntity {
    /** Optional. Identifier of the application used to create the subscription. Read-only. */
    applicationId?: string | undefined;
    /** Required. Indicates the type of change in the subscribed resource that raises a change notification. The supported values are: created, updated, deleted. Multiple values can be combined using a comma-separated list. Note:  Drive root item and list change notifications support only the updated changeType. User and group change notifications support updated and deleted changeType. Use updated to receive notifications when user or group is created, updated, or soft deleted. Use deleted to receive notifications when user or group is permanently deleted. */
    changeType?: string | undefined;
    /** Optional. Specifies the value of the clientState property sent by the service in each change notification. The maximum length is 128 characters. The client can check that the change notification came from the service by comparing the value of the clientState property sent with the subscription with the value of the clientState property received with each change notification. */
    clientState?: string | undefined;
    /** Optional. Identifier of the user or service principal that created the subscription. If the app used delegated permissions to create the subscription, this field contains the ID of the signed-in user the app called on behalf of. If the app used application permissions, this field contains the ID of the service principal corresponding to the app. Read-only. */
    creatorId?: string | undefined;
    /** Optional. A base64-encoded representation of a certificate with a public key used to encrypt resource data in change notifications. Optional but required when includeResourceData is true. */
    encryptionCertificate?: string | undefined;
    /** Optional. A custom app-provided identifier to help identify the certificate needed to decrypt resource data. */
    encryptionCertificateId?: string | undefined;
    /** Required. Specifies the date and time when the webhook subscription expires. The time is in UTC, and can be an amount of time from subscription creation that varies for the resource subscribed to. For the maximum supported subscription length of time, see Subscription lifetime. */
    expirationDateTime?: Date | undefined;
    /** Optional. When set to true, change notifications include resource data (such as content of a chat message). */
    includeResourceData?: boolean | undefined;
    /** Optional. Specifies the latest version of Transport Layer Security (TLS) that the notification endpoint, specified by notificationUrl, supports. The possible values are: v10, v11, v12, v13. For subscribers whose notification endpoint supports a version lower than the currently recommended version (TLS 1.2), specifying this property by a set timeline allows them to temporarily use their deprecated version of TLS before completing their upgrade to TLS 1.2. For these subscribers, not setting this property per the timeline would result in subscription operations failing. For subscribers whose notification endpoint already supports TLS 1.2, setting this property is optional. In such cases, Microsoft Graph defaults the property to v1_2. */
    latestSupportedTlsVersion?: string | undefined;
    /** Required for Teams resources if  the expirationDateTime value is more than 1 hour from now; optional otherwise. The URL of the endpoint that receives lifecycle notifications, including subscriptionRemoved, reauthorizationRequired, and missed notifications. This URL must make use of the HTTPS protocol. For more information, see Reduce missing subscriptions and change notifications. */
    lifecycleNotificationUrl?: string | undefined;
    /** Optional. OData query options for specifying value for the targeting resource. Clients receive notifications when resource reaches the state matching the query options provided here. With this new property in the subscription creation payload along with all existing properties, Webhooks deliver notifications whenever a resource reaches the desired state mentioned in the notificationQueryOptions property. For example, when the print job is completed or when a print job resource isFetchable property value becomes true etc.  Supported only for Universal Print Service. For more information, see Subscribe to change notifications from cloud printing APIs using Microsoft Graph. */
    notificationQueryOptions?: string | undefined;
    /** Required. The URL of the endpoint that receives the change notifications. This URL must make use of the HTTPS protocol. Any query string parameter included in the notificationUrl property is included in the HTTP POST request when Microsoft Graph sends the change notifications. */
    notificationUrl?: string | undefined;
    /** Optional. The app ID that the subscription service can use to generate the validation token. The value allows the client to validate the authenticity of the notification received. */
    notificationUrlAppId?: string | undefined;
    /** Required. Specifies the resource that is monitored for changes. Don't include the base URL (https://graph.microsoft.com/v1.0/). See the possible resource path values for each supported resource. */
    resource?: string | undefined;
}

export class SystemFacet implements ISystemFacet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ISystemFacet) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): SystemFacet {
        data = typeof data === 'object' ? data : {};
        let result = new SystemFacet();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ISystemFacet {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Quota implements IQuota {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Total space consumed by files in the recycle bin, in bytes. Read-only. */
    deleted?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Total space remaining before reaching the quota limit, in bytes. Read-only. */
    remaining?: number | undefined;
    /** Enumeration value that indicates the state of the storage space. Read-only. */
    state?: string | undefined;
    /** Information about the drive's storage quota plans. Only in Personal OneDrive. */
    storagePlanInformation?: StoragePlanInformation | undefined;
    /** Total allowed storage space, in bytes. Read-only. */
    total?: number | undefined;
    /** Total space used, in bytes. Read-only. */
    used?: number | undefined;

    constructor(data?: IQuota) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.deleted = _data["deleted"];
            this.odataType = _data["odataType"];
            this.remaining = _data["remaining"];
            this.state = _data["state"];
            this.storagePlanInformation = _data["storagePlanInformation"] ? StoragePlanInformation.fromJS(_data["storagePlanInformation"]) : <any>undefined;
            this.total = _data["total"];
            this.used = _data["used"];
        }
    }

    static fromJS(data: any): Quota {
        data = typeof data === 'object' ? data : {};
        let result = new Quota();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["deleted"] = this.deleted;
        data["odataType"] = this.odataType;
        data["remaining"] = this.remaining;
        data["state"] = this.state;
        data["storagePlanInformation"] = this.storagePlanInformation ? this.storagePlanInformation.toJSON() : <any>undefined;
        data["total"] = this.total;
        data["used"] = this.used;
        return data;
    }
}

export interface IQuota {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Total space consumed by files in the recycle bin, in bytes. Read-only. */
    deleted?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Total space remaining before reaching the quota limit, in bytes. Read-only. */
    remaining?: number | undefined;
    /** Enumeration value that indicates the state of the storage space. Read-only. */
    state?: string | undefined;
    /** Information about the drive's storage quota plans. Only in Personal OneDrive. */
    storagePlanInformation?: StoragePlanInformation | undefined;
    /** Total allowed storage space, in bytes. Read-only. */
    total?: number | undefined;
    /** Total space used, in bytes. Read-only. */
    used?: number | undefined;
}

export class StoragePlanInformation implements IStoragePlanInformation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Indicates whether there are higher storage quota plans available. Read-only. */
    upgradeAvailable?: boolean | undefined;

    constructor(data?: IStoragePlanInformation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.upgradeAvailable = _data["upgradeAvailable"];
        }
    }

    static fromJS(data: any): StoragePlanInformation {
        data = typeof data === 'object' ? data : {};
        let result = new StoragePlanInformation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["upgradeAvailable"] = this.upgradeAvailable;
        return data;
    }
}

export interface IStoragePlanInformation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Indicates whether there are higher storage quota plans available. Read-only. */
    upgradeAvailable?: boolean | undefined;
}

export class EmployeeExperienceUser extends Entity implements IEmployeeExperienceUser {
    /** The learningCourseActivities property */
    learningCourseActivities?: LearningCourseActivity[] | undefined;

    constructor(data?: IEmployeeExperienceUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["learningCourseActivities"])) {
                this.learningCourseActivities = [] as any;
                for (let item of _data["learningCourseActivities"])
                    this.learningCourseActivities!.push(LearningCourseActivity.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): EmployeeExperienceUser {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeExperienceUser();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.learningCourseActivities)) {
            data["learningCourseActivities"] = [];
            for (let item of this.learningCourseActivities)
                data["learningCourseActivities"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IEmployeeExperienceUser extends IEntity {
    /** The learningCourseActivities property */
    learningCourseActivities?: LearningCourseActivity[] | undefined;
}

export class LearningCourseActivity extends Entity implements ILearningCourseActivity {
    /** Date and time when the assignment was completed. Optional. */
    completedDateTime?: Date | undefined;
    /** The percentage completion value of the course activity. Optional. */
    completionPercentage?: number | undefined;
    /** The externalcourseActivityId property */
    externalcourseActivityId?: string | undefined;
    /** The user ID of the learner to whom the activity is assigned. Required. */
    learnerUserId?: string | undefined;
    /** The ID of the learning content created in Viva Learning. Required. */
    learningContentId?: string | undefined;
    /** The registration ID of the provider. Required. */
    learningProviderId?: string | undefined;
    /** The status of the course activity. Possible values are: notStarted, inProgress, completed. Required. */
    status?: CourseStatus | undefined;

    constructor(data?: ILearningCourseActivity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.completedDateTime = _data["completedDateTime"] ? new Date(_data["completedDateTime"].toString()) : <any>undefined;
            this.completionPercentage = _data["completionPercentage"];
            this.externalcourseActivityId = _data["externalcourseActivityId"];
            this.learnerUserId = _data["learnerUserId"];
            this.learningContentId = _data["learningContentId"];
            this.learningProviderId = _data["learningProviderId"];
            this.status = _data["status"];
        }
    }

    static override fromJS(data: any): LearningCourseActivity {
        data = typeof data === 'object' ? data : {};
        let result = new LearningCourseActivity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["completedDateTime"] = this.completedDateTime ? this.completedDateTime.toISOString() : <any>undefined;
        data["completionPercentage"] = this.completionPercentage;
        data["externalcourseActivityId"] = this.externalcourseActivityId;
        data["learnerUserId"] = this.learnerUserId;
        data["learningContentId"] = this.learningContentId;
        data["learningProviderId"] = this.learningProviderId;
        data["status"] = this.status;
        super.toJSON(data);
        return data;
    }
}

export interface ILearningCourseActivity extends IEntity {
    /** Date and time when the assignment was completed. Optional. */
    completedDateTime?: Date | undefined;
    /** The percentage completion value of the course activity. Optional. */
    completionPercentage?: number | undefined;
    /** The externalcourseActivityId property */
    externalcourseActivityId?: string | undefined;
    /** The user ID of the learner to whom the activity is assigned. Required. */
    learnerUserId?: string | undefined;
    /** The ID of the learning content created in Viva Learning. Required. */
    learningContentId?: string | undefined;
    /** The registration ID of the provider. Required. */
    learningProviderId?: string | undefined;
    /** The status of the course activity. Possible values are: notStarted, inProgress, completed. Required. */
    status?: CourseStatus | undefined;
}

export enum CourseStatus {
    NotStarted = 0,
    InProgress = 1,
    Completed = 2,
    UnknownFutureValue = 3,
}

export class EmployeeOrgData implements IEmployeeOrgData {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The cost center associated with the user. Returned only on $select. Supports $filter. */
    costCenter?: string | undefined;
    /** The name of the division in which the user works. Returned only on $select. Supports $filter. */
    division?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IEmployeeOrgData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.costCenter = _data["costCenter"];
            this.division = _data["division"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): EmployeeOrgData {
        data = typeof data === 'object' ? data : {};
        let result = new EmployeeOrgData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["costCenter"] = this.costCenter;
        data["division"] = this.division;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IEmployeeOrgData {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The cost center associated with the user. Returned only on $select. Supports $filter. */
    costCenter?: string | undefined;
    /** The name of the division in which the user works. Returned only on $select. Supports $filter. */
    division?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Site extends BaseItem implements ISite {
    /** Analytics about the view activities that took place on this site. */
    analytics?: ItemAnalytics | undefined;
    /** The collection of column definitions reusable across lists under this site. */
    columns?: ColumnDefinition[] | undefined;
    /** The collection of content types defined for this site. */
    contentTypes?: ContentType[] | undefined;
    /** The full title for the site. Read-only. */
    displayName?: string | undefined;
    /** The default drive (document library) for this site. */
    drive?: Drive | undefined;
    /** The collection of drives (document libraries) under this site. */
    drives?: Drive[] | undefined;
    /** The error property */
    error?: PublicError | undefined;
    /** The externalColumns property */
    externalColumns?: ColumnDefinition[] | undefined;
    /** Identifies whether the site is personal or not. Read-only. */
    isPersonalSite?: boolean | undefined;
    /** Used to address any item contained in this site. This collection can't be enumerated. */
    items?: BaseItem[] | undefined;
    /** The collection of lists under this site. */
    lists?: List[] | undefined;
    /** Calls the OneNote service for notebook related operations. */
    onenote?: Onenote | undefined;
    /** The collection of long-running operations on the site. */
    operations?: RichLongRunningOperation[] | undefined;
    /** The collection of pages in the baseSitePages list in this site. */
    pages?: BaseSitePage[] | undefined;
    /** The permissions associated with the site. Nullable. */
    permissions?: Permission[] | undefined;
    /** If present, provides the root site in the site collection. Read-only. */
    root?: Root | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** Provides details about the site's site collection. Available only on the root site. Read-only. */
    siteCollection?: SiteCollection | undefined;
    /** The collection of the sub-sites under this site. */
    sites?: Site[] | undefined;
    /** The default termStore under this site. */
    termStore?: Store | undefined;
    /** The collection of termStores under this site. */
    termStores?: Store[] | undefined;

    constructor(data?: ISite) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.analytics = _data["analytics"] ? ItemAnalytics.fromJS(_data["analytics"]) : <any>undefined;
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns!.push(ColumnDefinition.fromJS(item));
            }
            if (Array.isArray(_data["contentTypes"])) {
                this.contentTypes = [] as any;
                for (let item of _data["contentTypes"])
                    this.contentTypes!.push(ContentType.fromJS(item));
            }
            this.displayName = _data["displayName"];
            this.drive = _data["drive"] ? Drive.fromJS(_data["drive"]) : <any>undefined;
            if (Array.isArray(_data["drives"])) {
                this.drives = [] as any;
                for (let item of _data["drives"])
                    this.drives!.push(Drive.fromJS(item));
            }
            this.error = _data["error"] ? PublicError.fromJS(_data["error"]) : <any>undefined;
            if (Array.isArray(_data["externalColumns"])) {
                this.externalColumns = [] as any;
                for (let item of _data["externalColumns"])
                    this.externalColumns!.push(ColumnDefinition.fromJS(item));
            }
            this.isPersonalSite = _data["isPersonalSite"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(BaseItem.fromJS(item));
            }
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(List.fromJS(item));
            }
            this.onenote = _data["onenote"] ? Onenote.fromJS(_data["onenote"]) : <any>undefined;
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(RichLongRunningOperation.fromJS(item));
            }
            if (Array.isArray(_data["pages"])) {
                this.pages = [] as any;
                for (let item of _data["pages"])
                    this.pages!.push(BaseSitePage.fromJS(item));
            }
            if (Array.isArray(_data["permissions"])) {
                this.permissions = [] as any;
                for (let item of _data["permissions"])
                    this.permissions!.push(Permission.fromJS(item));
            }
            this.root = _data["root"] ? Root.fromJS(_data["root"]) : <any>undefined;
            this.sharepointIds = _data["sharepointIds"] ? SharepointIds.fromJS(_data["sharepointIds"]) : <any>undefined;
            this.siteCollection = _data["siteCollection"] ? SiteCollection.fromJS(_data["siteCollection"]) : <any>undefined;
            if (Array.isArray(_data["sites"])) {
                this.sites = [] as any;
                for (let item of _data["sites"])
                    this.sites!.push(Site.fromJS(item));
            }
            this.termStore = _data["termStore"] ? Store.fromJS(_data["termStore"]) : <any>undefined;
            if (Array.isArray(_data["termStores"])) {
                this.termStores = [] as any;
                for (let item of _data["termStores"])
                    this.termStores!.push(Store.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Site {
        data = typeof data === 'object' ? data : {};
        let result = new Site();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["analytics"] = this.analytics ? this.analytics.toJSON() : <any>undefined;
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        if (Array.isArray(this.contentTypes)) {
            data["contentTypes"] = [];
            for (let item of this.contentTypes)
                data["contentTypes"].push(item.toJSON());
        }
        data["displayName"] = this.displayName;
        data["drive"] = this.drive ? this.drive.toJSON() : <any>undefined;
        if (Array.isArray(this.drives)) {
            data["drives"] = [];
            for (let item of this.drives)
                data["drives"].push(item.toJSON());
        }
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        if (Array.isArray(this.externalColumns)) {
            data["externalColumns"] = [];
            for (let item of this.externalColumns)
                data["externalColumns"].push(item.toJSON());
        }
        data["isPersonalSite"] = this.isPersonalSite;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        data["onenote"] = this.onenote ? this.onenote.toJSON() : <any>undefined;
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        if (Array.isArray(this.pages)) {
            data["pages"] = [];
            for (let item of this.pages)
                data["pages"].push(item.toJSON());
        }
        if (Array.isArray(this.permissions)) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        data["root"] = this.root ? this.root.toJSON() : <any>undefined;
        data["sharepointIds"] = this.sharepointIds ? this.sharepointIds.toJSON() : <any>undefined;
        data["siteCollection"] = this.siteCollection ? this.siteCollection.toJSON() : <any>undefined;
        if (Array.isArray(this.sites)) {
            data["sites"] = [];
            for (let item of this.sites)
                data["sites"].push(item.toJSON());
        }
        data["termStore"] = this.termStore ? this.termStore.toJSON() : <any>undefined;
        if (Array.isArray(this.termStores)) {
            data["termStores"] = [];
            for (let item of this.termStores)
                data["termStores"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISite extends IBaseItem {
    /** Analytics about the view activities that took place on this site. */
    analytics?: ItemAnalytics | undefined;
    /** The collection of column definitions reusable across lists under this site. */
    columns?: ColumnDefinition[] | undefined;
    /** The collection of content types defined for this site. */
    contentTypes?: ContentType[] | undefined;
    /** The full title for the site. Read-only. */
    displayName?: string | undefined;
    /** The default drive (document library) for this site. */
    drive?: Drive | undefined;
    /** The collection of drives (document libraries) under this site. */
    drives?: Drive[] | undefined;
    /** The error property */
    error?: PublicError | undefined;
    /** The externalColumns property */
    externalColumns?: ColumnDefinition[] | undefined;
    /** Identifies whether the site is personal or not. Read-only. */
    isPersonalSite?: boolean | undefined;
    /** Used to address any item contained in this site. This collection can't be enumerated. */
    items?: BaseItem[] | undefined;
    /** The collection of lists under this site. */
    lists?: List[] | undefined;
    /** Calls the OneNote service for notebook related operations. */
    onenote?: Onenote | undefined;
    /** The collection of long-running operations on the site. */
    operations?: RichLongRunningOperation[] | undefined;
    /** The collection of pages in the baseSitePages list in this site. */
    pages?: BaseSitePage[] | undefined;
    /** The permissions associated with the site. Nullable. */
    permissions?: Permission[] | undefined;
    /** If present, provides the root site in the site collection. Read-only. */
    root?: Root | undefined;
    /** Returns identifiers useful for SharePoint REST compatibility. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** Provides details about the site's site collection. Available only on the root site. Read-only. */
    siteCollection?: SiteCollection | undefined;
    /** The collection of the sub-sites under this site. */
    sites?: Site[] | undefined;
    /** The default termStore under this site. */
    termStore?: Store | undefined;
    /** The collection of termStores under this site. */
    termStores?: Store[] | undefined;
}

export class Onenote extends Entity implements IOnenote {
    /** The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable. */
    notebooks?: Notebook[] | undefined;
    /** The status of OneNote operations. Getting an operations collection isn't supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable. */
    operations?: OnenoteOperation[] | undefined;
    /** The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable. */
    pages?: OnenotePage[] | undefined;
    /** The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable. */
    resources?: OnenoteResource[] | undefined;
    /** The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable. */
    sectionGroups?: SectionGroup[] | undefined;
    /** The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable. */
    sections?: OnenoteSection[] | undefined;

    constructor(data?: IOnenote) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["notebooks"])) {
                this.notebooks = [] as any;
                for (let item of _data["notebooks"])
                    this.notebooks!.push(Notebook.fromJS(item));
            }
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(OnenoteOperation.fromJS(item));
            }
            if (Array.isArray(_data["pages"])) {
                this.pages = [] as any;
                for (let item of _data["pages"])
                    this.pages!.push(OnenotePage.fromJS(item));
            }
            if (Array.isArray(_data["resources"])) {
                this.resources = [] as any;
                for (let item of _data["resources"])
                    this.resources!.push(OnenoteResource.fromJS(item));
            }
            if (Array.isArray(_data["sectionGroups"])) {
                this.sectionGroups = [] as any;
                for (let item of _data["sectionGroups"])
                    this.sectionGroups!.push(SectionGroup.fromJS(item));
            }
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(OnenoteSection.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Onenote {
        data = typeof data === 'object' ? data : {};
        let result = new Onenote();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.notebooks)) {
            data["notebooks"] = [];
            for (let item of this.notebooks)
                data["notebooks"].push(item.toJSON());
        }
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        if (Array.isArray(this.pages)) {
            data["pages"] = [];
            for (let item of this.pages)
                data["pages"].push(item.toJSON());
        }
        if (Array.isArray(this.resources)) {
            data["resources"] = [];
            for (let item of this.resources)
                data["resources"].push(item.toJSON());
        }
        if (Array.isArray(this.sectionGroups)) {
            data["sectionGroups"] = [];
            for (let item of this.sectionGroups)
                data["sectionGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IOnenote extends IEntity {
    /** The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable. */
    notebooks?: Notebook[] | undefined;
    /** The status of OneNote operations. Getting an operations collection isn't supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable. */
    operations?: OnenoteOperation[] | undefined;
    /** The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable. */
    pages?: OnenotePage[] | undefined;
    /** The image and other file resources in OneNote pages. Getting a resources collection isn't supported, but you can get the binary content of a specific resource. Read-only. Nullable. */
    resources?: OnenoteResource[] | undefined;
    /** The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable. */
    sectionGroups?: SectionGroup[] | undefined;
    /** The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable. */
    sections?: OnenoteSection[] | undefined;
}

export class OnenoteEntityBaseModel extends Entity implements IOnenoteEntityBaseModel {
    /** The endpoint where you can get details about the page. Read-only. */
    self?: string | undefined;

    constructor(data?: IOnenoteEntityBaseModel) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.self = _data["self"];
        }
    }

    static override fromJS(data: any): OnenoteEntityBaseModel {
        data = typeof data === 'object' ? data : {};
        let result = new OnenoteEntityBaseModel();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["self"] = this.self;
        super.toJSON(data);
        return data;
    }
}

export interface IOnenoteEntityBaseModel extends IEntity {
    /** The endpoint where you can get details about the page. Read-only. */
    self?: string | undefined;
}

export class OnenoteEntitySchemaObjectModel extends OnenoteEntityBaseModel implements IOnenoteEntitySchemaObjectModel {
    /** The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    createdDateTime?: Date | undefined;

    constructor(data?: IOnenoteEntitySchemaObjectModel) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): OnenoteEntitySchemaObjectModel {
        data = typeof data === 'object' ? data : {};
        let result = new OnenoteEntitySchemaObjectModel();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IOnenoteEntitySchemaObjectModel extends IOnenoteEntityBaseModel {
    /** The date and time when the page was created. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    createdDateTime?: Date | undefined;
}

export class OnenoteEntityHierarchyModel extends OnenoteEntitySchemaObjectModel implements IOnenoteEntityHierarchyModel {
    /** Identity of the user, device, and application that created the item. Read-only. */
    createdBy?: IdentitySet | undefined;
    /** The name of the notebook. */
    displayName?: string | undefined;
    /** Identity of the user, device, and application that created the item. Read-only. */
    lastModifiedBy?: IdentitySet | undefined;
    /** The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    lastModifiedDateTime?: Date | undefined;

    constructor(data?: IOnenoteEntityHierarchyModel) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdBy = _data["createdBy"] ? IdentitySet.fromJS(_data["createdBy"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.lastModifiedBy = _data["lastModifiedBy"] ? IdentitySet.fromJS(_data["lastModifiedBy"]) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): OnenoteEntityHierarchyModel {
        data = typeof data === 'object' ? data : {};
        let result = new OnenoteEntityHierarchyModel();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["lastModifiedBy"] = this.lastModifiedBy ? this.lastModifiedBy.toJSON() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IOnenoteEntityHierarchyModel extends IOnenoteEntitySchemaObjectModel {
    /** Identity of the user, device, and application that created the item. Read-only. */
    createdBy?: IdentitySet | undefined;
    /** The name of the notebook. */
    displayName?: string | undefined;
    /** Identity of the user, device, and application that created the item. Read-only. */
    lastModifiedBy?: IdentitySet | undefined;
    /** The date and time when the notebook was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    lastModifiedDateTime?: Date | undefined;
}

export class Notebook extends OnenoteEntityHierarchyModel implements INotebook {
    /** Indicates whether this is the user's default notebook. Read-only. */
    isDefault?: boolean | undefined;
    /** Indicates whether the notebook is shared. If true, the contents of the notebook can be seen by people other than the owner. Read-only. */
    isShared?: boolean | undefined;
    /** Links for opening the notebook. The oneNoteClientURL link opens the notebook in the OneNote native client if it's installed. The oneNoteWebURL link opens the notebook in OneNote on the web. */
    links?: NotebookLinks | undefined;
    /** The section groups in the notebook. Read-only. Nullable. */
    sectionGroups?: SectionGroup[] | undefined;
    /** The URL for the sectionGroups navigation property, which returns all the section groups in the notebook. Read-only. */
    sectionGroupsUrl?: string | undefined;
    /** The sections in the notebook. Read-only. Nullable. */
    sections?: OnenoteSection[] | undefined;
    /** The URL for the sections navigation property, which returns all the sections in the notebook. Read-only. */
    sectionsUrl?: string | undefined;
    /** Possible values are: Owner, Contributor, Reader, None. Owner represents owner-level access to the notebook. Contributor represents read/write access to the notebook. Reader represents read-only access to the notebook. Read-only. */
    userRole?: OnenoteUserRole | undefined;

    constructor(data?: INotebook) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isDefault = _data["isDefault"];
            this.isShared = _data["isShared"];
            this.links = _data["links"] ? NotebookLinks.fromJS(_data["links"]) : <any>undefined;
            if (Array.isArray(_data["sectionGroups"])) {
                this.sectionGroups = [] as any;
                for (let item of _data["sectionGroups"])
                    this.sectionGroups!.push(SectionGroup.fromJS(item));
            }
            this.sectionGroupsUrl = _data["sectionGroupsUrl"];
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(OnenoteSection.fromJS(item));
            }
            this.sectionsUrl = _data["sectionsUrl"];
            this.userRole = _data["userRole"];
        }
    }

    static override fromJS(data: any): Notebook {
        data = typeof data === 'object' ? data : {};
        let result = new Notebook();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDefault"] = this.isDefault;
        data["isShared"] = this.isShared;
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionGroups)) {
            data["sectionGroups"] = [];
            for (let item of this.sectionGroups)
                data["sectionGroups"].push(item.toJSON());
        }
        data["sectionGroupsUrl"] = this.sectionGroupsUrl;
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item.toJSON());
        }
        data["sectionsUrl"] = this.sectionsUrl;
        data["userRole"] = this.userRole;
        super.toJSON(data);
        return data;
    }
}

export interface INotebook extends IOnenoteEntityHierarchyModel {
    /** Indicates whether this is the user's default notebook. Read-only. */
    isDefault?: boolean | undefined;
    /** Indicates whether the notebook is shared. If true, the contents of the notebook can be seen by people other than the owner. Read-only. */
    isShared?: boolean | undefined;
    /** Links for opening the notebook. The oneNoteClientURL link opens the notebook in the OneNote native client if it's installed. The oneNoteWebURL link opens the notebook in OneNote on the web. */
    links?: NotebookLinks | undefined;
    /** The section groups in the notebook. Read-only. Nullable. */
    sectionGroups?: SectionGroup[] | undefined;
    /** The URL for the sectionGroups navigation property, which returns all the section groups in the notebook. Read-only. */
    sectionGroupsUrl?: string | undefined;
    /** The sections in the notebook. Read-only. Nullable. */
    sections?: OnenoteSection[] | undefined;
    /** The URL for the sections navigation property, which returns all the sections in the notebook. Read-only. */
    sectionsUrl?: string | undefined;
    /** Possible values are: Owner, Contributor, Reader, None. Owner represents owner-level access to the notebook. Contributor represents read/write access to the notebook. Reader represents read-only access to the notebook. Read-only. */
    userRole?: OnenoteUserRole | undefined;
}

export class NotebookLinks implements INotebookLinks {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Opens the notebook in the OneNote native client if it's installed. */
    oneNoteClientUrl?: ExternalLink | undefined;
    /** Opens the notebook in OneNote on the web. */
    oneNoteWebUrl?: ExternalLink | undefined;

    constructor(data?: INotebookLinks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.oneNoteClientUrl = _data["oneNoteClientUrl"] ? ExternalLink.fromJS(_data["oneNoteClientUrl"]) : <any>undefined;
            this.oneNoteWebUrl = _data["oneNoteWebUrl"] ? ExternalLink.fromJS(_data["oneNoteWebUrl"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NotebookLinks {
        data = typeof data === 'object' ? data : {};
        let result = new NotebookLinks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["oneNoteClientUrl"] = this.oneNoteClientUrl ? this.oneNoteClientUrl.toJSON() : <any>undefined;
        data["oneNoteWebUrl"] = this.oneNoteWebUrl ? this.oneNoteWebUrl.toJSON() : <any>undefined;
        return data;
    }
}

export interface INotebookLinks {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Opens the notebook in the OneNote native client if it's installed. */
    oneNoteClientUrl?: ExternalLink | undefined;
    /** Opens the notebook in OneNote on the web. */
    oneNoteWebUrl?: ExternalLink | undefined;
}

export class ExternalLink implements IExternalLink {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The URL of the link. */
    href?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IExternalLink) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.href = _data["href"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): ExternalLink {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalLink();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["href"] = this.href;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IExternalLink {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The URL of the link. */
    href?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class SectionGroup extends OnenoteEntityHierarchyModel implements ISectionGroup {
    /** The notebook that contains the section group. Read-only. */
    parentNotebook?: Notebook | undefined;
    /** The section group that contains the section group. Read-only. */
    parentSectionGroup?: SectionGroup | undefined;
    /** The section groups in the section. Read-only. Nullable. */
    sectionGroups?: SectionGroup[] | undefined;
    /** The URL for the sectionGroups navigation property, which returns all the section groups in the section group. Read-only. */
    sectionGroupsUrl?: string | undefined;
    /** The sections in the section group. Read-only. Nullable. */
    sections?: OnenoteSection[] | undefined;
    /** The URL for the sections navigation property, which returns all the sections in the section group. Read-only. */
    sectionsUrl?: string | undefined;

    constructor(data?: ISectionGroup) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.parentNotebook = _data["parentNotebook"] ? Notebook.fromJS(_data["parentNotebook"]) : <any>undefined;
            this.parentSectionGroup = _data["parentSectionGroup"] ? SectionGroup.fromJS(_data["parentSectionGroup"]) : <any>undefined;
            if (Array.isArray(_data["sectionGroups"])) {
                this.sectionGroups = [] as any;
                for (let item of _data["sectionGroups"])
                    this.sectionGroups!.push(SectionGroup.fromJS(item));
            }
            this.sectionGroupsUrl = _data["sectionGroupsUrl"];
            if (Array.isArray(_data["sections"])) {
                this.sections = [] as any;
                for (let item of _data["sections"])
                    this.sections!.push(OnenoteSection.fromJS(item));
            }
            this.sectionsUrl = _data["sectionsUrl"];
        }
    }

    static override fromJS(data: any): SectionGroup {
        data = typeof data === 'object' ? data : {};
        let result = new SectionGroup();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentNotebook"] = this.parentNotebook ? this.parentNotebook.toJSON() : <any>undefined;
        data["parentSectionGroup"] = this.parentSectionGroup ? this.parentSectionGroup.toJSON() : <any>undefined;
        if (Array.isArray(this.sectionGroups)) {
            data["sectionGroups"] = [];
            for (let item of this.sectionGroups)
                data["sectionGroups"].push(item.toJSON());
        }
        data["sectionGroupsUrl"] = this.sectionGroupsUrl;
        if (Array.isArray(this.sections)) {
            data["sections"] = [];
            for (let item of this.sections)
                data["sections"].push(item.toJSON());
        }
        data["sectionsUrl"] = this.sectionsUrl;
        super.toJSON(data);
        return data;
    }
}

export interface ISectionGroup extends IOnenoteEntityHierarchyModel {
    /** The notebook that contains the section group. Read-only. */
    parentNotebook?: Notebook | undefined;
    /** The section group that contains the section group. Read-only. */
    parentSectionGroup?: SectionGroup | undefined;
    /** The section groups in the section. Read-only. Nullable. */
    sectionGroups?: SectionGroup[] | undefined;
    /** The URL for the sectionGroups navigation property, which returns all the section groups in the section group. Read-only. */
    sectionGroupsUrl?: string | undefined;
    /** The sections in the section group. Read-only. Nullable. */
    sections?: OnenoteSection[] | undefined;
    /** The URL for the sections navigation property, which returns all the sections in the section group. Read-only. */
    sectionsUrl?: string | undefined;
}

export class OnenoteSection extends OnenoteEntityHierarchyModel implements IOnenoteSection {
    /** Indicates whether this is the user's default section. Read-only. */
    isDefault?: boolean | undefined;
    /** Links for opening the section. The oneNoteClientURL link opens the section in the OneNote native client if it's installed. The oneNoteWebURL link opens the section in OneNote on the web. */
    links?: SectionLinks | undefined;
    /** The collection of pages in the section.  Read-only. Nullable. */
    pages?: OnenotePage[] | undefined;
    /** The pages endpoint where you can get details for all the pages in the section. Read-only. */
    pagesUrl?: string | undefined;
    /** The notebook that contains the section.  Read-only. */
    parentNotebook?: Notebook | undefined;
    /** The section group that contains the section.  Read-only. */
    parentSectionGroup?: SectionGroup | undefined;

    constructor(data?: IOnenoteSection) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isDefault = _data["isDefault"];
            this.links = _data["links"] ? SectionLinks.fromJS(_data["links"]) : <any>undefined;
            if (Array.isArray(_data["pages"])) {
                this.pages = [] as any;
                for (let item of _data["pages"])
                    this.pages!.push(OnenotePage.fromJS(item));
            }
            this.pagesUrl = _data["pagesUrl"];
            this.parentNotebook = _data["parentNotebook"] ? Notebook.fromJS(_data["parentNotebook"]) : <any>undefined;
            this.parentSectionGroup = _data["parentSectionGroup"] ? SectionGroup.fromJS(_data["parentSectionGroup"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): OnenoteSection {
        data = typeof data === 'object' ? data : {};
        let result = new OnenoteSection();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isDefault"] = this.isDefault;
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        if (Array.isArray(this.pages)) {
            data["pages"] = [];
            for (let item of this.pages)
                data["pages"].push(item.toJSON());
        }
        data["pagesUrl"] = this.pagesUrl;
        data["parentNotebook"] = this.parentNotebook ? this.parentNotebook.toJSON() : <any>undefined;
        data["parentSectionGroup"] = this.parentSectionGroup ? this.parentSectionGroup.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IOnenoteSection extends IOnenoteEntityHierarchyModel {
    /** Indicates whether this is the user's default section. Read-only. */
    isDefault?: boolean | undefined;
    /** Links for opening the section. The oneNoteClientURL link opens the section in the OneNote native client if it's installed. The oneNoteWebURL link opens the section in OneNote on the web. */
    links?: SectionLinks | undefined;
    /** The collection of pages in the section.  Read-only. Nullable. */
    pages?: OnenotePage[] | undefined;
    /** The pages endpoint where you can get details for all the pages in the section. Read-only. */
    pagesUrl?: string | undefined;
    /** The notebook that contains the section.  Read-only. */
    parentNotebook?: Notebook | undefined;
    /** The section group that contains the section.  Read-only. */
    parentSectionGroup?: SectionGroup | undefined;
}

export class SectionLinks implements ISectionLinks {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Opens the section in the OneNote native client if it's installed. */
    oneNoteClientUrl?: ExternalLink | undefined;
    /** Opens the section in OneNote on the web. */
    oneNoteWebUrl?: ExternalLink | undefined;

    constructor(data?: ISectionLinks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.oneNoteClientUrl = _data["oneNoteClientUrl"] ? ExternalLink.fromJS(_data["oneNoteClientUrl"]) : <any>undefined;
            this.oneNoteWebUrl = _data["oneNoteWebUrl"] ? ExternalLink.fromJS(_data["oneNoteWebUrl"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SectionLinks {
        data = typeof data === 'object' ? data : {};
        let result = new SectionLinks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["oneNoteClientUrl"] = this.oneNoteClientUrl ? this.oneNoteClientUrl.toJSON() : <any>undefined;
        data["oneNoteWebUrl"] = this.oneNoteWebUrl ? this.oneNoteWebUrl.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISectionLinks {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Opens the section in the OneNote native client if it's installed. */
    oneNoteClientUrl?: ExternalLink | undefined;
    /** Opens the section in OneNote on the web. */
    oneNoteWebUrl?: ExternalLink | undefined;
}

export class OnenotePage extends OnenoteEntitySchemaObjectModel implements IOnenotePage {
    /** The page's HTML content. */
    content?: string | undefined;
    /** The URL for the page's HTML content.  Read-only. */
    contentUrl?: string | undefined;
    /** The unique identifier of the application that created the page. Read-only. */
    createdByAppId?: string | undefined;
    /** The date and time when the page was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** The indentation level of the page. Read-only. */
    level?: number | undefined;
    /** Links for opening the page. The oneNoteClientURL link opens the page in the OneNote native client if it 's installed. The oneNoteWebUrl link opens the page in OneNote on the web. Read-only. */
    links?: PageLinks | undefined;
    /** The order of the page within its parent section. Read-only. */
    order?: number | undefined;
    /** The notebook that contains the page.  Read-only. */
    parentNotebook?: Notebook | undefined;
    /** The section that contains the page. Read-only. */
    parentSection?: OnenoteSection | undefined;
    /** The title of the page. */
    title?: string | undefined;
    /** The userTags property */
    userTags?: string[] | undefined;

    constructor(data?: IOnenotePage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["content"];
            this.contentUrl = _data["contentUrl"];
            this.createdByAppId = _data["createdByAppId"];
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.level = _data["level"];
            this.links = _data["links"] ? PageLinks.fromJS(_data["links"]) : <any>undefined;
            this.order = _data["order"];
            this.parentNotebook = _data["parentNotebook"] ? Notebook.fromJS(_data["parentNotebook"]) : <any>undefined;
            this.parentSection = _data["parentSection"] ? OnenoteSection.fromJS(_data["parentSection"]) : <any>undefined;
            this.title = _data["title"];
            if (Array.isArray(_data["userTags"])) {
                this.userTags = [] as any;
                for (let item of _data["userTags"])
                    this.userTags!.push(item);
            }
        }
    }

    static override fromJS(data: any): OnenotePage {
        data = typeof data === 'object' ? data : {};
        let result = new OnenotePage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["contentUrl"] = this.contentUrl;
        data["createdByAppId"] = this.createdByAppId;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["level"] = this.level;
        data["links"] = this.links ? this.links.toJSON() : <any>undefined;
        data["order"] = this.order;
        data["parentNotebook"] = this.parentNotebook ? this.parentNotebook.toJSON() : <any>undefined;
        data["parentSection"] = this.parentSection ? this.parentSection.toJSON() : <any>undefined;
        data["title"] = this.title;
        if (Array.isArray(this.userTags)) {
            data["userTags"] = [];
            for (let item of this.userTags)
                data["userTags"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IOnenotePage extends IOnenoteEntitySchemaObjectModel {
    /** The page's HTML content. */
    content?: string | undefined;
    /** The URL for the page's HTML content.  Read-only. */
    contentUrl?: string | undefined;
    /** The unique identifier of the application that created the page. Read-only. */
    createdByAppId?: string | undefined;
    /** The date and time when the page was last modified. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** The indentation level of the page. Read-only. */
    level?: number | undefined;
    /** Links for opening the page. The oneNoteClientURL link opens the page in the OneNote native client if it 's installed. The oneNoteWebUrl link opens the page in OneNote on the web. Read-only. */
    links?: PageLinks | undefined;
    /** The order of the page within its parent section. Read-only. */
    order?: number | undefined;
    /** The notebook that contains the page.  Read-only. */
    parentNotebook?: Notebook | undefined;
    /** The section that contains the page. Read-only. */
    parentSection?: OnenoteSection | undefined;
    /** The title of the page. */
    title?: string | undefined;
    /** The userTags property */
    userTags?: string[] | undefined;
}

export class PageLinks implements IPageLinks {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Opens the page in the OneNote native client if it's installed. */
    oneNoteClientUrl?: ExternalLink | undefined;
    /** Opens the page in OneNote on the web. */
    oneNoteWebUrl?: ExternalLink | undefined;

    constructor(data?: IPageLinks) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.oneNoteClientUrl = _data["oneNoteClientUrl"] ? ExternalLink.fromJS(_data["oneNoteClientUrl"]) : <any>undefined;
            this.oneNoteWebUrl = _data["oneNoteWebUrl"] ? ExternalLink.fromJS(_data["oneNoteWebUrl"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PageLinks {
        data = typeof data === 'object' ? data : {};
        let result = new PageLinks();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["oneNoteClientUrl"] = this.oneNoteClientUrl ? this.oneNoteClientUrl.toJSON() : <any>undefined;
        data["oneNoteWebUrl"] = this.oneNoteWebUrl ? this.oneNoteWebUrl.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPageLinks {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Opens the page in the OneNote native client if it's installed. */
    oneNoteClientUrl?: ExternalLink | undefined;
    /** Opens the page in OneNote on the web. */
    oneNoteWebUrl?: ExternalLink | undefined;
}

export enum OnenoteUserRole {
    None = 0,
    Owner = 1,
    Contributor = 2,
    Reader = 3,
}

export class Operation extends Entity implements IOperation {
    /** The start time of the operation. */
    createdDateTime?: Date | undefined;
    /** The time of the last action of the operation. */
    lastActionDateTime?: Date | undefined;
    /** The current status of the operation: notStarted, running, completed, failed */
    status?: OperationStatus | undefined;

    constructor(data?: IOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.lastActionDateTime = _data["lastActionDateTime"] ? new Date(_data["lastActionDateTime"].toString()) : <any>undefined;
            this.status = _data["status"];
        }
    }

    static override fromJS(data: any): Operation {
        data = typeof data === 'object' ? data : {};
        let result = new Operation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["lastActionDateTime"] = this.lastActionDateTime ? this.lastActionDateTime.toISOString() : <any>undefined;
        data["status"] = this.status;
        super.toJSON(data);
        return data;
    }
}

export interface IOperation extends IEntity {
    /** The start time of the operation. */
    createdDateTime?: Date | undefined;
    /** The time of the last action of the operation. */
    lastActionDateTime?: Date | undefined;
    /** The current status of the operation: notStarted, running, completed, failed */
    status?: OperationStatus | undefined;
}

export class OnenoteOperation extends Operation implements IOnenoteOperation {
    /** The error returned by the operation. */
    error?: OnenoteOperationError | undefined;
    /** The operation percent complete if the operation is still in running status. */
    percentComplete?: string | undefined;
    /** The resource id. */
    resourceId?: string | undefined;
    /** The resource URI for the object. For example, the resource URI for a copied page or section. */
    resourceLocation?: string | undefined;

    constructor(data?: IOnenoteOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.error = _data["error"] ? OnenoteOperationError.fromJS(_data["error"]) : <any>undefined;
            this.percentComplete = _data["percentComplete"];
            this.resourceId = _data["resourceId"];
            this.resourceLocation = _data["resourceLocation"];
        }
    }

    static override fromJS(data: any): OnenoteOperation {
        data = typeof data === 'object' ? data : {};
        let result = new OnenoteOperation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["percentComplete"] = this.percentComplete;
        data["resourceId"] = this.resourceId;
        data["resourceLocation"] = this.resourceLocation;
        super.toJSON(data);
        return data;
    }
}

export interface IOnenoteOperation extends IOperation {
    /** The error returned by the operation. */
    error?: OnenoteOperationError | undefined;
    /** The operation percent complete if the operation is still in running status. */
    percentComplete?: string | undefined;
    /** The resource id. */
    resourceId?: string | undefined;
    /** The resource URI for the object. For example, the resource URI for a copied page or section. */
    resourceLocation?: string | undefined;
}

export class OnenoteOperationError implements IOnenoteOperationError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The error code. */
    code?: string | undefined;
    /** The error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IOnenoteOperationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.code = _data["code"];
            this.message = _data["message"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): OnenoteOperationError {
        data = typeof data === 'object' ? data : {};
        let result = new OnenoteOperationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["code"] = this.code;
        data["message"] = this.message;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IOnenoteOperationError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The error code. */
    code?: string | undefined;
    /** The error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum OperationStatus {
    NotStarted = 0,
    Running = 1,
    Completed = 2,
    Failed = 3,
}

export class OnenoteResource extends OnenoteEntityBaseModel implements IOnenoteResource {
    /** The content stream */
    content?: string | undefined;
    /** The URL for downloading the content */
    contentUrl?: string | undefined;

    constructor(data?: IOnenoteResource) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["content"];
            this.contentUrl = _data["contentUrl"];
        }
    }

    static override fromJS(data: any): OnenoteResource {
        data = typeof data === 'object' ? data : {};
        let result = new OnenoteResource();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["contentUrl"] = this.contentUrl;
        super.toJSON(data);
        return data;
    }
}

export interface IOnenoteResource extends IOnenoteEntityBaseModel {
    /** The content stream */
    content?: string | undefined;
    /** The URL for downloading the content */
    contentUrl?: string | undefined;
}

export class BaseSitePage extends BaseItem implements IBaseSitePage {
    /** The name of the page layout of the page. The possible values are: microsoftReserved, article, home, unknownFutureValue. */
    pageLayout?: PageLayoutType | undefined;
    /** The publishing status and the MM.mm version of the page. */
    publishingState?: PublicationFacet | undefined;
    /** Title of the sitePage. */
    title?: string | undefined;

    constructor(data?: IBaseSitePage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.pageLayout = _data["pageLayout"];
            this.publishingState = _data["publishingState"] ? PublicationFacet.fromJS(_data["publishingState"]) : <any>undefined;
            this.title = _data["title"];
        }
    }

    static override fromJS(data: any): BaseSitePage {
        data = typeof data === 'object' ? data : {};
        let result = new BaseSitePage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageLayout"] = this.pageLayout;
        data["publishingState"] = this.publishingState ? this.publishingState.toJSON() : <any>undefined;
        data["title"] = this.title;
        super.toJSON(data);
        return data;
    }
}

export interface IBaseSitePage extends IBaseItem {
    /** The name of the page layout of the page. The possible values are: microsoftReserved, article, home, unknownFutureValue. */
    pageLayout?: PageLayoutType | undefined;
    /** The publishing status and the MM.mm version of the page. */
    publishingState?: PublicationFacet | undefined;
    /** Title of the sitePage. */
    title?: string | undefined;
}

export enum PageLayoutType {
    MicrosoftReserved = 0,
    Article = 1,
    Home = 2,
    UnknownFutureValue = 3,
}

export class Permission extends Entity implements IPermission {
    /** A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the expiration time of the permission. DateTime.MinValue indicates there's no expiration set for this permission. Optional. */
    expirationDateTime?: Date | undefined;
    /** For user type permissions, the details of the users and applications for this permission. Read-only. */
    grantedTo?: IdentitySet | undefined;
    /** For type permissions, the details of the users to whom permission was granted. Read-only. */
    grantedToIdentities?: IdentitySet[] | undefined;
    /** For link type permissions, the details of the users to whom permission was granted. Read-only. */
    grantedToIdentitiesV2?: SharePointIdentitySet[] | undefined;
    /** For user type permissions, the details of the users and applications for this permission. Read-only. */
    grantedToV2?: SharePointIdentitySet | undefined;
    /** Indicates whether the password is set for this permission. This property only appears in the response. Optional. Read-only. For OneDrive Personal only.. */
    hasPassword?: boolean | undefined;
    /** Provides a reference to the ancestor of the current permission, if it's inherited from an ancestor. Read-only. */
    inheritedFrom?: ItemReference | undefined;
    /** Details of any associated sharing invitation for this permission. Read-only. */
    invitation?: SharingInvitation | undefined;
    /** Provides the link details of the current permission, if it's a link type permission. Read-only. */
    link?: SharingLink | undefined;
    /** The type of permission, for example, read. See below for the full list of roles. Read-only. */
    roles?: string[] | undefined;
    /** A unique token that can be used to access this shared item via the shares API. Read-only. */
    shareId?: string | undefined;

    constructor(data?: IPermission) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            this.grantedTo = _data["grantedTo"] ? IdentitySet.fromJS(_data["grantedTo"]) : <any>undefined;
            if (Array.isArray(_data["grantedToIdentities"])) {
                this.grantedToIdentities = [] as any;
                for (let item of _data["grantedToIdentities"])
                    this.grantedToIdentities!.push(IdentitySet.fromJS(item));
            }
            if (Array.isArray(_data["grantedToIdentitiesV2"])) {
                this.grantedToIdentitiesV2 = [] as any;
                for (let item of _data["grantedToIdentitiesV2"])
                    this.grantedToIdentitiesV2!.push(SharePointIdentitySet.fromJS(item));
            }
            this.grantedToV2 = _data["grantedToV2"] ? SharePointIdentitySet.fromJS(_data["grantedToV2"]) : <any>undefined;
            this.hasPassword = _data["hasPassword"];
            this.inheritedFrom = _data["inheritedFrom"] ? ItemReference.fromJS(_data["inheritedFrom"]) : <any>undefined;
            this.invitation = _data["invitation"] ? SharingInvitation.fromJS(_data["invitation"]) : <any>undefined;
            this.link = _data["link"] ? SharingLink.fromJS(_data["link"]) : <any>undefined;
            if (Array.isArray(_data["roles"])) {
                this.roles = [] as any;
                for (let item of _data["roles"])
                    this.roles!.push(item);
            }
            this.shareId = _data["shareId"];
        }
    }

    static override fromJS(data: any): Permission {
        data = typeof data === 'object' ? data : {};
        let result = new Permission();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        data["grantedTo"] = this.grantedTo ? this.grantedTo.toJSON() : <any>undefined;
        if (Array.isArray(this.grantedToIdentities)) {
            data["grantedToIdentities"] = [];
            for (let item of this.grantedToIdentities)
                data["grantedToIdentities"].push(item.toJSON());
        }
        if (Array.isArray(this.grantedToIdentitiesV2)) {
            data["grantedToIdentitiesV2"] = [];
            for (let item of this.grantedToIdentitiesV2)
                data["grantedToIdentitiesV2"].push(item.toJSON());
        }
        data["grantedToV2"] = this.grantedToV2 ? this.grantedToV2.toJSON() : <any>undefined;
        data["hasPassword"] = this.hasPassword;
        data["inheritedFrom"] = this.inheritedFrom ? this.inheritedFrom.toJSON() : <any>undefined;
        data["invitation"] = this.invitation ? this.invitation.toJSON() : <any>undefined;
        data["link"] = this.link ? this.link.toJSON() : <any>undefined;
        if (Array.isArray(this.roles)) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item);
        }
        data["shareId"] = this.shareId;
        super.toJSON(data);
        return data;
    }
}

export interface IPermission extends IEntity {
    /** A format of yyyy-MM-ddTHH:mm:ssZ of DateTimeOffset indicates the expiration time of the permission. DateTime.MinValue indicates there's no expiration set for this permission. Optional. */
    expirationDateTime?: Date | undefined;
    /** For user type permissions, the details of the users and applications for this permission. Read-only. */
    grantedTo?: IdentitySet | undefined;
    /** For type permissions, the details of the users to whom permission was granted. Read-only. */
    grantedToIdentities?: IdentitySet[] | undefined;
    /** For link type permissions, the details of the users to whom permission was granted. Read-only. */
    grantedToIdentitiesV2?: SharePointIdentitySet[] | undefined;
    /** For user type permissions, the details of the users and applications for this permission. Read-only. */
    grantedToV2?: SharePointIdentitySet | undefined;
    /** Indicates whether the password is set for this permission. This property only appears in the response. Optional. Read-only. For OneDrive Personal only.. */
    hasPassword?: boolean | undefined;
    /** Provides a reference to the ancestor of the current permission, if it's inherited from an ancestor. Read-only. */
    inheritedFrom?: ItemReference | undefined;
    /** Details of any associated sharing invitation for this permission. Read-only. */
    invitation?: SharingInvitation | undefined;
    /** Provides the link details of the current permission, if it's a link type permission. Read-only. */
    link?: SharingLink | undefined;
    /** The type of permission, for example, read. See below for the full list of roles. Read-only. */
    roles?: string[] | undefined;
    /** A unique token that can be used to access this shared item via the shares API. Read-only. */
    shareId?: string | undefined;
}

export class SharePointIdentitySet extends IdentitySet implements ISharePointIdentitySet {
    /** The group associated with this action. Optional. */
    group?: Identity | undefined;
    /** The SharePoint group associated with this action. Optional. */
    siteGroup?: SharePointIdentity | undefined;
    /** The SharePoint user associated with this action. Optional. */
    siteUser?: SharePointIdentity | undefined;

    constructor(data?: ISharePointIdentitySet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.group = _data["group"] ? Identity.fromJS(_data["group"]) : <any>undefined;
            this.siteGroup = _data["siteGroup"] ? SharePointIdentity.fromJS(_data["siteGroup"]) : <any>undefined;
            this.siteUser = _data["siteUser"] ? SharePointIdentity.fromJS(_data["siteUser"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): SharePointIdentitySet {
        data = typeof data === 'object' ? data : {};
        let result = new SharePointIdentitySet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        data["siteGroup"] = this.siteGroup ? this.siteGroup.toJSON() : <any>undefined;
        data["siteUser"] = this.siteUser ? this.siteUser.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ISharePointIdentitySet extends IIdentitySet {
    /** The group associated with this action. Optional. */
    group?: Identity | undefined;
    /** The SharePoint group associated with this action. Optional. */
    siteGroup?: SharePointIdentity | undefined;
    /** The SharePoint user associated with this action. Optional. */
    siteUser?: SharePointIdentity | undefined;
}

export class SharePointIdentity extends Identity implements ISharePointIdentity {
    /** The sign in name of the SharePoint identity. */
    loginName?: string | undefined;

    constructor(data?: ISharePointIdentity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.loginName = _data["loginName"];
        }
    }

    static override fromJS(data: any): SharePointIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new SharePointIdentity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["loginName"] = this.loginName;
        super.toJSON(data);
        return data;
    }
}

export interface ISharePointIdentity extends IIdentity {
    /** The sign in name of the SharePoint identity. */
    loginName?: string | undefined;
}

export class SharingInvitation implements ISharingInvitation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The email address provided for the recipient of the sharing invitation. Read-only. */
    email?: string | undefined;
    /** Provides information about who sent the invitation that created this permission, if that information is available. Read-only. */
    invitedBy?: IdentitySet | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The redeemedBy property */
    redeemedBy?: string | undefined;
    /** If true the recipient of the invitation needs to sign in in order to access the shared item. Read-only. */
    signInRequired?: boolean | undefined;

    constructor(data?: ISharingInvitation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.email = _data["email"];
            this.invitedBy = _data["invitedBy"] ? IdentitySet.fromJS(_data["invitedBy"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.redeemedBy = _data["redeemedBy"];
            this.signInRequired = _data["signInRequired"];
        }
    }

    static fromJS(data: any): SharingInvitation {
        data = typeof data === 'object' ? data : {};
        let result = new SharingInvitation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["email"] = this.email;
        data["invitedBy"] = this.invitedBy ? this.invitedBy.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["redeemedBy"] = this.redeemedBy;
        data["signInRequired"] = this.signInRequired;
        return data;
    }
}

export interface ISharingInvitation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The email address provided for the recipient of the sharing invitation. Read-only. */
    email?: string | undefined;
    /** Provides information about who sent the invitation that created this permission, if that information is available. Read-only. */
    invitedBy?: IdentitySet | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The redeemedBy property */
    redeemedBy?: string | undefined;
    /** If true the recipient of the invitation needs to sign in in order to access the shared item. Read-only. */
    signInRequired?: boolean | undefined;
}

export class SharingLink implements ISharingLink {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The app the link is associated with. */
    application?: Identity | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** If true then the user can only use this link to view the item on the web, and cannot use it to download the contents of the item. Only for OneDrive for Business and SharePoint. */
    preventsDownload?: boolean | undefined;
    /** The scope of the link represented by this permission. Value anonymous indicates the link is usable by anyone, organization indicates the link is only usable for users signed into the same tenant. */
    scope?: string | undefined;
    /** The type of the link created. */
    type?: string | undefined;
    /** For embed links, this property contains the HTML code for an <iframe> element that will embed the item in a webpage. */
    webHtml?: string | undefined;
    /** A URL that opens the item in the browser on the OneDrive website. */
    webUrl?: string | undefined;

    constructor(data?: ISharingLink) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.application = _data["application"] ? Identity.fromJS(_data["application"]) : <any>undefined;
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.preventsDownload = _data["preventsDownload"];
            this.scope = _data["scope"];
            this.type = _data["type"];
            this.webHtml = _data["webHtml"];
            this.webUrl = _data["webUrl"];
        }
    }

    static fromJS(data: any): SharingLink {
        data = typeof data === 'object' ? data : {};
        let result = new SharingLink();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["preventsDownload"] = this.preventsDownload;
        data["scope"] = this.scope;
        data["type"] = this.type;
        data["webHtml"] = this.webHtml;
        data["webUrl"] = this.webUrl;
        return data;
    }
}

export interface ISharingLink {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The app the link is associated with. */
    application?: Identity | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** If true then the user can only use this link to view the item on the web, and cannot use it to download the contents of the item. Only for OneDrive for Business and SharePoint. */
    preventsDownload?: boolean | undefined;
    /** The scope of the link represented by this permission. Value anonymous indicates the link is usable by anyone, organization indicates the link is only usable for users signed into the same tenant. */
    scope?: string | undefined;
    /** The type of the link created. */
    type?: string | undefined;
    /** For embed links, this property contains the HTML code for an <iframe> element that will embed the item in a webpage. */
    webHtml?: string | undefined;
    /** A URL that opens the item in the browser on the OneDrive website. */
    webUrl?: string | undefined;
}

export class Root implements IRoot {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IRoot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): Root {
        data = typeof data === 'object' ? data : {};
        let result = new Root();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IRoot {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class SiteCollection implements ISiteCollection {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Represents whether the site collection is recently archived, fully archived, or reactivating. Possible values are: recentlyArchived, fullyArchived, reactivating, unknownFutureValue. */
    archivalDetails?: SiteArchivalDetails | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The geographic region code for where this site collection resides. Only present for multi-geo tenants. Read-only. */
    dataLocationCode?: string | undefined;
    /** The hostname for the site collection. Read-only. */
    hostname?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** If present, indicates that this is a root site collection in SharePoint. Read-only. */
    root?: Root | undefined;

    constructor(data?: ISiteCollection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.archivalDetails = _data["archivalDetails"] ? SiteArchivalDetails.fromJS(_data["archivalDetails"]) : <any>undefined;
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.dataLocationCode = _data["dataLocationCode"];
            this.hostname = _data["hostname"];
            this.odataType = _data["odataType"];
            this.root = _data["root"] ? Root.fromJS(_data["root"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SiteCollection {
        data = typeof data === 'object' ? data : {};
        let result = new SiteCollection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["archivalDetails"] = this.archivalDetails ? this.archivalDetails.toJSON() : <any>undefined;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["dataLocationCode"] = this.dataLocationCode;
        data["hostname"] = this.hostname;
        data["odataType"] = this.odataType;
        data["root"] = this.root ? this.root.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISiteCollection {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Represents whether the site collection is recently archived, fully archived, or reactivating. Possible values are: recentlyArchived, fullyArchived, reactivating, unknownFutureValue. */
    archivalDetails?: SiteArchivalDetails | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The geographic region code for where this site collection resides. Only present for multi-geo tenants. Read-only. */
    dataLocationCode?: string | undefined;
    /** The hostname for the site collection. Read-only. */
    hostname?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** If present, indicates that this is a root site collection in SharePoint. Read-only. */
    root?: Root | undefined;
}

export class SiteArchivalDetails implements ISiteArchivalDetails {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Represents the current archive status of the site collection. Returned only on $select. The possible values are: recentlyArchived, fullyArchived, reactivating, unknownFutureValue. */
    archiveStatus?: SiteArchiveStatus | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ISiteArchivalDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.archiveStatus = _data["archiveStatus"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): SiteArchivalDetails {
        data = typeof data === 'object' ? data : {};
        let result = new SiteArchivalDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["archiveStatus"] = this.archiveStatus;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ISiteArchivalDetails {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Represents the current archive status of the site collection. Returned only on $select. The possible values are: recentlyArchived, fullyArchived, reactivating, unknownFutureValue. */
    archiveStatus?: SiteArchiveStatus | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum SiteArchiveStatus {
    RecentlyArchived = 0,
    FullyArchived = 1,
    Reactivating = 2,
    UnknownFutureValue = 3,
}

export class Store extends Entity implements IStore {
    /** Default language of the term store. */
    defaultLanguageTag?: string | undefined;
    /** Collection of all groups available in the term store. */
    groups?: Group[] | undefined;
    /** List of languages for the term store. */
    languageTags?: string[] | undefined;
    /** Collection of all sets available in the term store. This relationship can only be used to load a specific term set. */
    sets?: Set[] | undefined;

    constructor(data?: IStore) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.defaultLanguageTag = _data["defaultLanguageTag"];
            if (Array.isArray(_data["groups"])) {
                this.groups = [] as any;
                for (let item of _data["groups"])
                    this.groups!.push(Group.fromJS(item));
            }
            if (Array.isArray(_data["languageTags"])) {
                this.languageTags = [] as any;
                for (let item of _data["languageTags"])
                    this.languageTags!.push(item);
            }
            if (Array.isArray(_data["sets"])) {
                this.sets = [] as any;
                for (let item of _data["sets"])
                    this.sets!.push(Set.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Store {
        data = typeof data === 'object' ? data : {};
        let result = new Store();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["defaultLanguageTag"] = this.defaultLanguageTag;
        if (Array.isArray(this.groups)) {
            data["groups"] = [];
            for (let item of this.groups)
                data["groups"].push(item.toJSON());
        }
        if (Array.isArray(this.languageTags)) {
            data["languageTags"] = [];
            for (let item of this.languageTags)
                data["languageTags"].push(item);
        }
        if (Array.isArray(this.sets)) {
            data["sets"] = [];
            for (let item of this.sets)
                data["sets"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IStore extends IEntity {
    /** Default language of the term store. */
    defaultLanguageTag?: string | undefined;
    /** Collection of all groups available in the term store. */
    groups?: Group[] | undefined;
    /** List of languages for the term store. */
    languageTags?: string[] | undefined;
    /** Collection of all sets available in the term store. This relationship can only be used to load a specific term set. */
    sets?: Set[] | undefined;
}

export class ObjectIdentity implements IObjectIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Specifies the issuer of the identity, for example facebook.com. 512 character limit. For local accounts (where signInType isn't federated), this property is the local default domain name for the tenant, for example contoso.com.  For guests from other Microsoft Entra organizations, this is the domain of the federated organization, for example contoso.com. For more information about filtering behavior for this property, see Filtering on the identities property of a user. */
    issuer?: string | undefined;
    /** Specifies the unique identifier assigned to the user by the issuer. 64 character limit. The combination of issuer and issuerAssignedId must be unique within the organization. Represents the sign-in name for the user, when signInType is set to emailAddress or userName (also known as local accounts).When signInType is set to: emailAddress (or a custom string that starts with emailAddress like emailAddress1), issuerAssignedId must be a valid email addressuserName, issuerAssignedId must begin with an alphabetical character or number, and can only contain alphanumeric characters and the following symbols: - or _  For more information about filtering behavior for this property, see Filtering on the identities property of a user. */
    issuerAssignedId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the user sign-in types in your directory, such as emailAddress, userName, federated, or userPrincipalName. federated represents a unique identifier for a user from an issuer that can be in any format chosen by the issuer. Setting or updating a userPrincipalName identity updates the value of the userPrincipalName property on the user object. The validations performed on the userPrincipalName property on the user object, for example, verified domains and acceptable characters, are performed when setting or updating a userPrincipalName identity. Extra validation is enforced on issuerAssignedId when the sign-in type is set to emailAddress or userName. This property can also be set to any custom string.  For more information about filtering behavior for this property, see Filtering on the identities property of a user. */
    signInType?: string | undefined;

    constructor(data?: IObjectIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.issuer = _data["issuer"];
            this.issuerAssignedId = _data["issuerAssignedId"];
            this.odataType = _data["odataType"];
            this.signInType = _data["signInType"];
        }
    }

    static fromJS(data: any): ObjectIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["issuer"] = this.issuer;
        data["issuerAssignedId"] = this.issuerAssignedId;
        data["odataType"] = this.odataType;
        data["signInType"] = this.signInType;
        return data;
    }
}

export interface IObjectIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Specifies the issuer of the identity, for example facebook.com. 512 character limit. For local accounts (where signInType isn't federated), this property is the local default domain name for the tenant, for example contoso.com.  For guests from other Microsoft Entra organizations, this is the domain of the federated organization, for example contoso.com. For more information about filtering behavior for this property, see Filtering on the identities property of a user. */
    issuer?: string | undefined;
    /** Specifies the unique identifier assigned to the user by the issuer. 64 character limit. The combination of issuer and issuerAssignedId must be unique within the organization. Represents the sign-in name for the user, when signInType is set to emailAddress or userName (also known as local accounts).When signInType is set to: emailAddress (or a custom string that starts with emailAddress like emailAddress1), issuerAssignedId must be a valid email addressuserName, issuerAssignedId must begin with an alphabetical character or number, and can only contain alphanumeric characters and the following symbols: - or _  For more information about filtering behavior for this property, see Filtering on the identities property of a user. */
    issuerAssignedId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the user sign-in types in your directory, such as emailAddress, userName, federated, or userPrincipalName. federated represents a unique identifier for a user from an issuer that can be in any format chosen by the issuer. Setting or updating a userPrincipalName identity updates the value of the userPrincipalName property on the user object. The validations performed on the userPrincipalName property on the user object, for example, verified domains and acceptable characters, are performed when setting or updating a userPrincipalName identity. Extra validation is enforced on issuerAssignedId when the sign-in type is set to emailAddress or userName. This property can also be set to any custom string.  For more information about filtering behavior for this property, see Filtering on the identities property of a user. */
    signInType?: string | undefined;
}

export class InferenceClassification extends Entity implements IInferenceClassification {
    /** A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable. */
    overrides?: InferenceClassificationOverride[] | undefined;

    constructor(data?: IInferenceClassification) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["overrides"])) {
                this.overrides = [] as any;
                for (let item of _data["overrides"])
                    this.overrides!.push(InferenceClassificationOverride.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): InferenceClassification {
        data = typeof data === 'object' ? data : {};
        let result = new InferenceClassification();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.overrides)) {
            data["overrides"] = [];
            for (let item of this.overrides)
                data["overrides"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IInferenceClassification extends IEntity {
    /** A set of overrides for a user to always classify messages from specific senders in certain ways: focused, or other. Read-only. Nullable. */
    overrides?: InferenceClassificationOverride[] | undefined;
}

export class InferenceClassificationOverride extends Entity implements IInferenceClassificationOverride {
    /** Specifies how incoming messages from a specific sender should always be classified as. The possible values are: focused, other. */
    classifyAs?: InferenceClassificationType | undefined;
    /** The email address information of the sender for whom the override is created. */
    senderEmailAddress?: EmailAddress | undefined;

    constructor(data?: IInferenceClassificationOverride) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.classifyAs = _data["classifyAs"];
            this.senderEmailAddress = _data["senderEmailAddress"] ? EmailAddress.fromJS(_data["senderEmailAddress"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): InferenceClassificationOverride {
        data = typeof data === 'object' ? data : {};
        let result = new InferenceClassificationOverride();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["classifyAs"] = this.classifyAs;
        data["senderEmailAddress"] = this.senderEmailAddress ? this.senderEmailAddress.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IInferenceClassificationOverride extends IEntity {
    /** Specifies how incoming messages from a specific sender should always be classified as. The possible values are: focused, other. */
    classifyAs?: InferenceClassificationType | undefined;
    /** The email address information of the sender for whom the override is created. */
    senderEmailAddress?: EmailAddress | undefined;
}

export enum InferenceClassificationType {
    Focused = 0,
    Other = 1,
}

export class OfficeGraphInsights extends Entity implements IOfficeGraphInsights {
    /** Calculated relationship that identifies documents shared with or by the user. This includes URLs, file attachments, and reference attachments to OneDrive for work or school and SharePoint files found in Outlook messages and meetings. This also includes URLs and reference attachments to Teams conversations. Ordered by recency of share. */
    shared?: SharedInsight[] | undefined;
    /** Calculated relationship that identifies documents trending around a user. Trending documents are calculated based on activity of the user's closest network of people and include files stored in OneDrive for work or school and SharePoint. Trending insights help the user to discover potentially useful content that the user has access to, but has never viewed before. */
    trending?: Trending[] | undefined;
    /** Calculated relationship that identifies the latest documents viewed or modified by a user, including OneDrive for work or school and SharePoint documents, ranked by recency of use. */
    used?: UsedInsight[] | undefined;

    constructor(data?: IOfficeGraphInsights) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["shared"])) {
                this.shared = [] as any;
                for (let item of _data["shared"])
                    this.shared!.push(SharedInsight.fromJS(item));
            }
            if (Array.isArray(_data["trending"])) {
                this.trending = [] as any;
                for (let item of _data["trending"])
                    this.trending!.push(Trending.fromJS(item));
            }
            if (Array.isArray(_data["used"])) {
                this.used = [] as any;
                for (let item of _data["used"])
                    this.used!.push(UsedInsight.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): OfficeGraphInsights {
        data = typeof data === 'object' ? data : {};
        let result = new OfficeGraphInsights();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.shared)) {
            data["shared"] = [];
            for (let item of this.shared)
                data["shared"].push(item.toJSON());
        }
        if (Array.isArray(this.trending)) {
            data["trending"] = [];
            for (let item of this.trending)
                data["trending"].push(item.toJSON());
        }
        if (Array.isArray(this.used)) {
            data["used"] = [];
            for (let item of this.used)
                data["used"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IOfficeGraphInsights extends IEntity {
    /** Calculated relationship that identifies documents shared with or by the user. This includes URLs, file attachments, and reference attachments to OneDrive for work or school and SharePoint files found in Outlook messages and meetings. This also includes URLs and reference attachments to Teams conversations. Ordered by recency of share. */
    shared?: SharedInsight[] | undefined;
    /** Calculated relationship that identifies documents trending around a user. Trending documents are calculated based on activity of the user's closest network of people and include files stored in OneDrive for work or school and SharePoint. Trending insights help the user to discover potentially useful content that the user has access to, but has never viewed before. */
    trending?: Trending[] | undefined;
    /** Calculated relationship that identifies the latest documents viewed or modified by a user, including OneDrive for work or school and SharePoint documents, ranked by recency of use. */
    used?: UsedInsight[] | undefined;
}

export class ItemInsights extends OfficeGraphInsights implements IItemInsights {

    constructor(data?: IItemInsights) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ItemInsights {
        data = typeof data === 'object' ? data : {};
        let result = new ItemInsights();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IItemInsights extends IOfficeGraphInsights {
}

export class SharedInsight extends Entity implements ISharedInsight {
    /** Details about the shared item. Read only. */
    lastShared?: SharingDetail | undefined;
    /** The lastSharedMethod property */
    lastSharedMethod?: Entity | undefined;
    /** Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem. */
    resource?: Entity | undefined;
    /** Reference properties of the shared document, such as the url and type of the document. Read-only */
    resourceReference?: ResourceReference | undefined;
    /** Properties that you can use to visualize the document in your experience. Read-only */
    resourceVisualization?: ResourceVisualization | undefined;
    /** The sharingHistory property */
    sharingHistory?: SharingDetail[] | undefined;

    constructor(data?: ISharedInsight) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.lastShared = _data["lastShared"] ? SharingDetail.fromJS(_data["lastShared"]) : <any>undefined;
            this.lastSharedMethod = _data["lastSharedMethod"] ? Entity.fromJS(_data["lastSharedMethod"]) : <any>undefined;
            this.resource = _data["resource"] ? Entity.fromJS(_data["resource"]) : <any>undefined;
            this.resourceReference = _data["resourceReference"] ? ResourceReference.fromJS(_data["resourceReference"]) : <any>undefined;
            this.resourceVisualization = _data["resourceVisualization"] ? ResourceVisualization.fromJS(_data["resourceVisualization"]) : <any>undefined;
            if (Array.isArray(_data["sharingHistory"])) {
                this.sharingHistory = [] as any;
                for (let item of _data["sharingHistory"])
                    this.sharingHistory!.push(SharingDetail.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): SharedInsight {
        data = typeof data === 'object' ? data : {};
        let result = new SharedInsight();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastShared"] = this.lastShared ? this.lastShared.toJSON() : <any>undefined;
        data["lastSharedMethod"] = this.lastSharedMethod ? this.lastSharedMethod.toJSON() : <any>undefined;
        data["resource"] = this.resource ? this.resource.toJSON() : <any>undefined;
        data["resourceReference"] = this.resourceReference ? this.resourceReference.toJSON() : <any>undefined;
        data["resourceVisualization"] = this.resourceVisualization ? this.resourceVisualization.toJSON() : <any>undefined;
        if (Array.isArray(this.sharingHistory)) {
            data["sharingHistory"] = [];
            for (let item of this.sharingHistory)
                data["sharingHistory"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISharedInsight extends IEntity {
    /** Details about the shared item. Read only. */
    lastShared?: SharingDetail | undefined;
    /** The lastSharedMethod property */
    lastSharedMethod?: Entity | undefined;
    /** Used for navigating to the item that was shared. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem. */
    resource?: Entity | undefined;
    /** Reference properties of the shared document, such as the url and type of the document. Read-only */
    resourceReference?: ResourceReference | undefined;
    /** Properties that you can use to visualize the document in your experience. Read-only */
    resourceVisualization?: ResourceVisualization | undefined;
    /** The sharingHistory property */
    sharingHistory?: SharingDetail[] | undefined;
}

export class SharingDetail implements ISharingDetail {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The user who shared the document. */
    sharedBy?: InsightIdentity | undefined;
    /** The date and time the file was last shared. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    sharedDateTime?: Date | undefined;
    /** Reference properties of the document, such as the URL and type of the document. Read-only */
    sharingReference?: ResourceReference | undefined;
    /** The subject with which the document was shared. */
    sharingSubject?: string | undefined;
    /** Determines the way the document was shared. Can be by a 1Link1, 1Attachment1, 1Group1, 1Site1. */
    sharingType?: string | undefined;

    constructor(data?: ISharingDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.sharedBy = _data["sharedBy"] ? InsightIdentity.fromJS(_data["sharedBy"]) : <any>undefined;
            this.sharedDateTime = _data["sharedDateTime"] ? new Date(_data["sharedDateTime"].toString()) : <any>undefined;
            this.sharingReference = _data["sharingReference"] ? ResourceReference.fromJS(_data["sharingReference"]) : <any>undefined;
            this.sharingSubject = _data["sharingSubject"];
            this.sharingType = _data["sharingType"];
        }
    }

    static fromJS(data: any): SharingDetail {
        data = typeof data === 'object' ? data : {};
        let result = new SharingDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["sharedBy"] = this.sharedBy ? this.sharedBy.toJSON() : <any>undefined;
        data["sharedDateTime"] = this.sharedDateTime ? this.sharedDateTime.toISOString() : <any>undefined;
        data["sharingReference"] = this.sharingReference ? this.sharingReference.toJSON() : <any>undefined;
        data["sharingSubject"] = this.sharingSubject;
        data["sharingType"] = this.sharingType;
        return data;
    }
}

export interface ISharingDetail {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The user who shared the document. */
    sharedBy?: InsightIdentity | undefined;
    /** The date and time the file was last shared. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    sharedDateTime?: Date | undefined;
    /** Reference properties of the document, such as the URL and type of the document. Read-only */
    sharingReference?: ResourceReference | undefined;
    /** The subject with which the document was shared. */
    sharingSubject?: string | undefined;
    /** Determines the way the document was shared. Can be by a 1Link1, 1Attachment1, 1Group1, 1Site1. */
    sharingType?: string | undefined;
}

export class InsightIdentity implements IInsightIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The email address of the user who shared the item. */
    address?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the user who shared the item. */
    displayName?: string | undefined;
    /** The ID of the user who shared the item. */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IInsightIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.address = _data["address"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.id = _data["id"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): InsightIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new InsightIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["address"] = this.address;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["id"] = this.id;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IInsightIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The email address of the user who shared the item. */
    address?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the user who shared the item. */
    displayName?: string | undefined;
    /** The ID of the user who shared the item. */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ResourceReference implements IResourceReference {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The item's unique identifier. */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A string value that can be used to classify the item, such as 'microsoft.graph.driveItem' */
    type?: string | undefined;
    /** A URL leading to the referenced item. */
    webUrl?: string | undefined;

    constructor(data?: IResourceReference) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.id = _data["id"];
            this.odataType = _data["odataType"];
            this.type = _data["type"];
            this.webUrl = _data["webUrl"];
        }
    }

    static fromJS(data: any): ResourceReference {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceReference();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["odataType"] = this.odataType;
        data["type"] = this.type;
        data["webUrl"] = this.webUrl;
        return data;
    }
}

export interface IResourceReference {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The item's unique identifier. */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A string value that can be used to classify the item, such as 'microsoft.graph.driveItem' */
    type?: string | undefined;
    /** A URL leading to the referenced item. */
    webUrl?: string | undefined;
}

export class ResourceVisualization implements IResourceVisualization {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A string describing where the item is stored. For example, the name of a SharePoint site or the user name identifying the owner of the OneDrive storing the item. */
    containerDisplayName?: string | undefined;
    /** Can be used for filtering by the type of container in which the file is stored. Such as Site or OneDriveBusiness. */
    containerType?: string | undefined;
    /** A path leading to the folder in which the item is stored. */
    containerWebUrl?: string | undefined;
    /** The item's media type. Can be used for filtering for a specific type of file based on supported IANA Media Mime Types. Not all Media Mime Types are supported. */
    mediaType?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A URL leading to the preview image for the item. */
    previewImageUrl?: string | undefined;
    /** A preview text for the item. */
    previewText?: string | undefined;
    /** The item's title text. */
    title?: string | undefined;
    /** The item's media type. Can be used for filtering for a specific file based on a specific type. See the section Type property values for supported types. */
    type?: string | undefined;

    constructor(data?: IResourceVisualization) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.containerDisplayName = _data["containerDisplayName"];
            this.containerType = _data["containerType"];
            this.containerWebUrl = _data["containerWebUrl"];
            this.mediaType = _data["mediaType"];
            this.odataType = _data["odataType"];
            this.previewImageUrl = _data["previewImageUrl"];
            this.previewText = _data["previewText"];
            this.title = _data["title"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): ResourceVisualization {
        data = typeof data === 'object' ? data : {};
        let result = new ResourceVisualization();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["containerDisplayName"] = this.containerDisplayName;
        data["containerType"] = this.containerType;
        data["containerWebUrl"] = this.containerWebUrl;
        data["mediaType"] = this.mediaType;
        data["odataType"] = this.odataType;
        data["previewImageUrl"] = this.previewImageUrl;
        data["previewText"] = this.previewText;
        data["title"] = this.title;
        data["type"] = this.type;
        return data;
    }
}

export interface IResourceVisualization {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A string describing where the item is stored. For example, the name of a SharePoint site or the user name identifying the owner of the OneDrive storing the item. */
    containerDisplayName?: string | undefined;
    /** Can be used for filtering by the type of container in which the file is stored. Such as Site or OneDriveBusiness. */
    containerType?: string | undefined;
    /** A path leading to the folder in which the item is stored. */
    containerWebUrl?: string | undefined;
    /** The item's media type. Can be used for filtering for a specific type of file based on supported IANA Media Mime Types. Not all Media Mime Types are supported. */
    mediaType?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A URL leading to the preview image for the item. */
    previewImageUrl?: string | undefined;
    /** A preview text for the item. */
    previewText?: string | undefined;
    /** The item's title text. */
    title?: string | undefined;
    /** The item's media type. Can be used for filtering for a specific file based on a specific type. See the section Type property values for supported types. */
    type?: string | undefined;
}

export class Trending extends Entity implements ITrending {
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastModifiedDateTime?: Date | undefined;
    /** Used for navigating to the trending document. */
    resource?: Entity | undefined;
    /** Reference properties of the trending document, such as the url and type of the document. */
    resourceReference?: ResourceReference | undefined;
    /** Properties that you can use to visualize the document in your experience. */
    resourceVisualization?: ResourceVisualization | undefined;
    /** Value indicating how much the document is currently trending. The larger the number, the more the document is currently trending around the user (the more relevant it is). Returned documents are sorted by this value. */
    weight?: number | undefined;

    constructor(data?: ITrending) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.resource = _data["resource"] ? Entity.fromJS(_data["resource"]) : <any>undefined;
            this.resourceReference = _data["resourceReference"] ? ResourceReference.fromJS(_data["resourceReference"]) : <any>undefined;
            this.resourceVisualization = _data["resourceVisualization"] ? ResourceVisualization.fromJS(_data["resourceVisualization"]) : <any>undefined;
            this.weight = _data["weight"];
        }
    }

    static override fromJS(data: any): Trending {
        data = typeof data === 'object' ? data : {};
        let result = new Trending();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["resource"] = this.resource ? this.resource.toJSON() : <any>undefined;
        data["resourceReference"] = this.resourceReference ? this.resourceReference.toJSON() : <any>undefined;
        data["resourceVisualization"] = this.resourceVisualization ? this.resourceVisualization.toJSON() : <any>undefined;
        data["weight"] = this.weight;
        super.toJSON(data);
        return data;
    }
}

export interface ITrending extends IEntity {
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastModifiedDateTime?: Date | undefined;
    /** Used for navigating to the trending document. */
    resource?: Entity | undefined;
    /** Reference properties of the trending document, such as the url and type of the document. */
    resourceReference?: ResourceReference | undefined;
    /** Properties that you can use to visualize the document in your experience. */
    resourceVisualization?: ResourceVisualization | undefined;
    /** Value indicating how much the document is currently trending. The larger the number, the more the document is currently trending around the user (the more relevant it is). Returned documents are sorted by this value. */
    weight?: number | undefined;
}

export class UsedInsight extends Entity implements IUsedInsight {
    /** Information about when the item was last viewed or modified by the user. Read only. */
    lastUsed?: UsageDetails | undefined;
    /** Used for navigating to the item that was used. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem. */
    resource?: Entity | undefined;
    /** Reference properties of the used document, such as the url and type of the document. Read-only */
    resourceReference?: ResourceReference | undefined;
    /** Properties that you can use to visualize the document in your experience. Read-only */
    resourceVisualization?: ResourceVisualization | undefined;

    constructor(data?: IUsedInsight) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.lastUsed = _data["lastUsed"] ? UsageDetails.fromJS(_data["lastUsed"]) : <any>undefined;
            this.resource = _data["resource"] ? Entity.fromJS(_data["resource"]) : <any>undefined;
            this.resourceReference = _data["resourceReference"] ? ResourceReference.fromJS(_data["resourceReference"]) : <any>undefined;
            this.resourceVisualization = _data["resourceVisualization"] ? ResourceVisualization.fromJS(_data["resourceVisualization"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UsedInsight {
        data = typeof data === 'object' ? data : {};
        let result = new UsedInsight();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["lastUsed"] = this.lastUsed ? this.lastUsed.toJSON() : <any>undefined;
        data["resource"] = this.resource ? this.resource.toJSON() : <any>undefined;
        data["resourceReference"] = this.resourceReference ? this.resourceReference.toJSON() : <any>undefined;
        data["resourceVisualization"] = this.resourceVisualization ? this.resourceVisualization.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUsedInsight extends IEntity {
    /** Information about when the item was last viewed or modified by the user. Read only. */
    lastUsed?: UsageDetails | undefined;
    /** Used for navigating to the item that was used. For file attachments, the type is fileAttachment. For linked attachments, the type is driveItem. */
    resource?: Entity | undefined;
    /** Reference properties of the used document, such as the url and type of the document. Read-only */
    resourceReference?: ResourceReference | undefined;
    /** Properties that you can use to visualize the document in your experience. Read-only */
    resourceVisualization?: ResourceVisualization | undefined;
}

export class UsageDetails implements IUsageDetails {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date and time the resource was last accessed by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    lastAccessedDateTime?: Date | undefined;
    /** The date and time the resource was last modified by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IUsageDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.lastAccessedDateTime = _data["lastAccessedDateTime"] ? new Date(_data["lastAccessedDateTime"].toString()) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): UsageDetails {
        data = typeof data === 'object' ? data : {};
        let result = new UsageDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["lastAccessedDateTime"] = this.lastAccessedDateTime ? this.lastAccessedDateTime.toISOString() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IUsageDetails {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date and time the resource was last accessed by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    lastAccessedDateTime?: Date | undefined;
    /** The date and time the resource was last modified by the user. The timestamp represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Team extends Entity implements ITeam {
    /** List of channels either hosted in or shared with the team (incoming channels). */
    allChannels?: Channel2[] | undefined;
    /** The collection of channels and messages associated with the team. */
    channels?: Channel2[] | undefined;
    /** An optional label. Typically describes the data or business sensitivity of the team. Must match one of a pre-configured set in the tenant's directory. */
    classification?: string | undefined;
    /** Timestamp at which the team was created. */
    createdDateTime?: Date | undefined;
    /** An optional description for the team. Maximum length: 1024 characters. */
    description?: string | undefined;
    /** The name of the team. */
    displayName?: string | undefined;
    /** Settings to configure use of Giphy, memes, and stickers in the team. */
    funSettings?: TeamFunSettings | undefined;
    /** The group property */
    group?: Group2 | undefined;
    /** Settings to configure whether guests can create, update, or delete channels in the team. */
    guestSettings?: TeamGuestSettings | undefined;
    /** List of channels shared with the team. */
    incomingChannels?: Channel2[] | undefined;
    /** The apps installed in this team. */
    installedApps?: TeamsAppInstallation[] | undefined;
    /** A unique ID for the team that has been used in a few places such as the audit log/Office 365 Management Activity API. */
    internalId?: string | undefined;
    /** Whether this team is in read-only mode. */
    isArchived?: boolean | undefined;
    /** Members and owners of the team. */
    members?: ConversationMember[] | undefined;
    /** Settings to configure whether members can perform certain actions, for example, create channels and add bots, in the team. */
    memberSettings?: TeamMemberSettings | undefined;
    /** Settings to configure messaging and mentions in the team. */
    messagingSettings?: TeamMessagingSettings | undefined;
    /** The async operations that ran or are running on this team. */
    operations?: TeamsAsyncOperation[] | undefined;
    /** A collection of permissions granted to apps to access the team. */
    permissionGrants?: ResourceSpecificPermissionGrant[] | undefined;
    /** The profile photo for the team. */
    photo?: ProfilePhoto | undefined;
    /** The general channel for the team. */
    primaryChannel?: Channel2 | undefined;
    /** The schedule of shifts for this team. */
    schedule?: Schedule | undefined;
    /** Optional. Indicates whether the team is intended for a particular use case.  Each team specialization has access to unique behaviors and experiences targeted to its use case. */
    specialization?: TeamSpecialization | undefined;
    /** Contains summary information about the team, including number of owners, members, and guests. */
    summary?: TeamSummary | undefined;
    /** The tags associated with the team. */
    tags?: TeamworkTag[] | undefined;
    /** The template this team was created from. See available templates. */
    template?: TeamsTemplate | undefined;
    /** The ID of the Microsoft Entra tenant. */
    tenantId?: string | undefined;
    /** The visibility of the group and team. Defaults to Public. */
    visibility?: TeamVisibilityType | undefined;
    /** A hyperlink that will go to the team in the Microsoft Teams client. This is the URL that you get when you right-click a team in the Microsoft Teams client and select Get link to team. This URL should be treated as an opaque blob, and not parsed. */
    webUrl?: string | undefined;

    constructor(data?: ITeam) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["allChannels"])) {
                this.allChannels = [] as any;
                for (let item of _data["allChannels"])
                    this.allChannels!.push(Channel2.fromJS(item));
            }
            if (Array.isArray(_data["channels"])) {
                this.channels = [] as any;
                for (let item of _data["channels"])
                    this.channels!.push(Channel2.fromJS(item));
            }
            this.classification = _data["classification"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.displayName = _data["displayName"];
            this.funSettings = _data["funSettings"] ? TeamFunSettings.fromJS(_data["funSettings"]) : <any>undefined;
            this.group = _data["group"] ? Group2.fromJS(_data["group"]) : <any>undefined;
            this.guestSettings = _data["guestSettings"] ? TeamGuestSettings.fromJS(_data["guestSettings"]) : <any>undefined;
            if (Array.isArray(_data["incomingChannels"])) {
                this.incomingChannels = [] as any;
                for (let item of _data["incomingChannels"])
                    this.incomingChannels!.push(Channel2.fromJS(item));
            }
            if (Array.isArray(_data["installedApps"])) {
                this.installedApps = [] as any;
                for (let item of _data["installedApps"])
                    this.installedApps!.push(TeamsAppInstallation.fromJS(item));
            }
            this.internalId = _data["internalId"];
            this.isArchived = _data["isArchived"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(ConversationMember.fromJS(item));
            }
            this.memberSettings = _data["memberSettings"] ? TeamMemberSettings.fromJS(_data["memberSettings"]) : <any>undefined;
            this.messagingSettings = _data["messagingSettings"] ? TeamMessagingSettings.fromJS(_data["messagingSettings"]) : <any>undefined;
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(TeamsAsyncOperation.fromJS(item));
            }
            if (Array.isArray(_data["permissionGrants"])) {
                this.permissionGrants = [] as any;
                for (let item of _data["permissionGrants"])
                    this.permissionGrants!.push(ResourceSpecificPermissionGrant.fromJS(item));
            }
            this.photo = _data["photo"] ? ProfilePhoto.fromJS(_data["photo"]) : <any>undefined;
            this.primaryChannel = _data["primaryChannel"] ? Channel2.fromJS(_data["primaryChannel"]) : <any>undefined;
            this.schedule = _data["schedule"] ? Schedule.fromJS(_data["schedule"]) : <any>undefined;
            this.specialization = _data["specialization"];
            this.summary = _data["summary"] ? TeamSummary.fromJS(_data["summary"]) : <any>undefined;
            if (Array.isArray(_data["tags"])) {
                this.tags = [] as any;
                for (let item of _data["tags"])
                    this.tags!.push(TeamworkTag.fromJS(item));
            }
            this.template = _data["template"] ? TeamsTemplate.fromJS(_data["template"]) : <any>undefined;
            this.tenantId = _data["tenantId"];
            this.visibility = _data["visibility"];
            this.webUrl = _data["webUrl"];
        }
    }

    static override fromJS(data: any): Team {
        data = typeof data === 'object' ? data : {};
        let result = new Team();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allChannels)) {
            data["allChannels"] = [];
            for (let item of this.allChannels)
                data["allChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.channels)) {
            data["channels"] = [];
            for (let item of this.channels)
                data["channels"].push(item.toJSON());
        }
        data["classification"] = this.classification;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["funSettings"] = this.funSettings ? this.funSettings.toJSON() : <any>undefined;
        data["group"] = this.group ? this.group.toJSON() : <any>undefined;
        data["guestSettings"] = this.guestSettings ? this.guestSettings.toJSON() : <any>undefined;
        if (Array.isArray(this.incomingChannels)) {
            data["incomingChannels"] = [];
            for (let item of this.incomingChannels)
                data["incomingChannels"].push(item.toJSON());
        }
        if (Array.isArray(this.installedApps)) {
            data["installedApps"] = [];
            for (let item of this.installedApps)
                data["installedApps"].push(item.toJSON());
        }
        data["internalId"] = this.internalId;
        data["isArchived"] = this.isArchived;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        data["memberSettings"] = this.memberSettings ? this.memberSettings.toJSON() : <any>undefined;
        data["messagingSettings"] = this.messagingSettings ? this.messagingSettings.toJSON() : <any>undefined;
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        if (Array.isArray(this.permissionGrants)) {
            data["permissionGrants"] = [];
            for (let item of this.permissionGrants)
                data["permissionGrants"].push(item.toJSON());
        }
        data["photo"] = this.photo ? this.photo.toJSON() : <any>undefined;
        data["primaryChannel"] = this.primaryChannel ? this.primaryChannel.toJSON() : <any>undefined;
        data["schedule"] = this.schedule ? this.schedule.toJSON() : <any>undefined;
        data["specialization"] = this.specialization;
        data["summary"] = this.summary ? this.summary.toJSON() : <any>undefined;
        if (Array.isArray(this.tags)) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item.toJSON());
        }
        data["template"] = this.template ? this.template.toJSON() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["visibility"] = this.visibility;
        data["webUrl"] = this.webUrl;
        super.toJSON(data);
        return data;
    }
}

export interface ITeam extends IEntity {
    /** List of channels either hosted in or shared with the team (incoming channels). */
    allChannels?: Channel2[] | undefined;
    /** The collection of channels and messages associated with the team. */
    channels?: Channel2[] | undefined;
    /** An optional label. Typically describes the data or business sensitivity of the team. Must match one of a pre-configured set in the tenant's directory. */
    classification?: string | undefined;
    /** Timestamp at which the team was created. */
    createdDateTime?: Date | undefined;
    /** An optional description for the team. Maximum length: 1024 characters. */
    description?: string | undefined;
    /** The name of the team. */
    displayName?: string | undefined;
    /** Settings to configure use of Giphy, memes, and stickers in the team. */
    funSettings?: TeamFunSettings | undefined;
    /** The group property */
    group?: Group2 | undefined;
    /** Settings to configure whether guests can create, update, or delete channels in the team. */
    guestSettings?: TeamGuestSettings | undefined;
    /** List of channels shared with the team. */
    incomingChannels?: Channel2[] | undefined;
    /** The apps installed in this team. */
    installedApps?: TeamsAppInstallation[] | undefined;
    /** A unique ID for the team that has been used in a few places such as the audit log/Office 365 Management Activity API. */
    internalId?: string | undefined;
    /** Whether this team is in read-only mode. */
    isArchived?: boolean | undefined;
    /** Members and owners of the team. */
    members?: ConversationMember[] | undefined;
    /** Settings to configure whether members can perform certain actions, for example, create channels and add bots, in the team. */
    memberSettings?: TeamMemberSettings | undefined;
    /** Settings to configure messaging and mentions in the team. */
    messagingSettings?: TeamMessagingSettings | undefined;
    /** The async operations that ran or are running on this team. */
    operations?: TeamsAsyncOperation[] | undefined;
    /** A collection of permissions granted to apps to access the team. */
    permissionGrants?: ResourceSpecificPermissionGrant[] | undefined;
    /** The profile photo for the team. */
    photo?: ProfilePhoto | undefined;
    /** The general channel for the team. */
    primaryChannel?: Channel2 | undefined;
    /** The schedule of shifts for this team. */
    schedule?: Schedule | undefined;
    /** Optional. Indicates whether the team is intended for a particular use case.  Each team specialization has access to unique behaviors and experiences targeted to its use case. */
    specialization?: TeamSpecialization | undefined;
    /** Contains summary information about the team, including number of owners, members, and guests. */
    summary?: TeamSummary | undefined;
    /** The tags associated with the team. */
    tags?: TeamworkTag[] | undefined;
    /** The template this team was created from. See available templates. */
    template?: TeamsTemplate | undefined;
    /** The ID of the Microsoft Entra tenant. */
    tenantId?: string | undefined;
    /** The visibility of the group and team. Defaults to Public. */
    visibility?: TeamVisibilityType | undefined;
    /** A hyperlink that will go to the team in the Microsoft Teams client. This is the URL that you get when you right-click a team in the Microsoft Teams client and select Get link to team. This URL should be treated as an opaque blob, and not parsed. */
    webUrl?: string | undefined;
}

export class Channel2 extends Entity implements IChannel2 {
    /** Read only. Timestamp at which the channel was created. */
    createdDateTime?: Date | undefined;
    /** Optional textual description for the channel. */
    description?: string | undefined;
    /** Channel name as it will appear to the user in Microsoft Teams. The maximum length is 50 characters. */
    displayName?: string | undefined;
    /** The email address for sending messages to the channel. Read-only. */
    email?: string | undefined;
    /** Metadata for the location where the channel's files are stored. */
    filesFolder?: DriveItem | undefined;
    /** Indicates whether the channel is archived. Read-only. */
    isArchived?: boolean | undefined;
    /** Indicates whether the channel should be marked as recommended for all members of the team to show in their channel list. Note: All recommended channels automatically show in the channels list for education and frontline worker users. The property can only be set programmatically via the Create team method. The default value is false. */
    isFavoriteByDefault?: boolean | undefined;
    /** A collection of membership records associated with the channel. */
    members?: ConversationMember[] | undefined;
    /** The type of the channel. Can be set during creation and can't be changed. The possible values are: standard, private, unknownFutureValue, shared. The default value is standard. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: shared. */
    membershipType?: ChannelMembershipType | undefined;
    /** A collection of all the messages in the channel. A navigation property. Nullable. */
    messages?: ChatMessage[] | undefined;
    /** A collection of teams with which a channel is shared. */
    sharedWithTeams?: SharedWithChannelTeamInfo[] | undefined;
    /** Contains summary information about the channel, including number of owners, members, guests, and an indicator for members from other tenants. The summary property will only be returned if it is specified in the $select clause of the Get channel method. */
    summary?: ChannelSummary | undefined;
    /** A collection of all the tabs in the channel. A navigation property. */
    tabs?: TeamsTab[] | undefined;
    /** The ID of the Microsoft Entra tenant. */
    tenantId?: string | undefined;
    /** A hyperlink that will go to the channel in Microsoft Teams. This is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. This URL should be treated as an opaque blob, and not parsed. Read-only. */
    webUrl?: string | undefined;

    constructor(data?: IChannel2) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.displayName = _data["displayName"];
            this.email = _data["email"];
            this.filesFolder = _data["filesFolder"] ? DriveItem.fromJS(_data["filesFolder"]) : <any>undefined;
            this.isArchived = _data["isArchived"];
            this.isFavoriteByDefault = _data["isFavoriteByDefault"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(ConversationMember.fromJS(item));
            }
            this.membershipType = _data["membershipType"];
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(ChatMessage.fromJS(item));
            }
            if (Array.isArray(_data["sharedWithTeams"])) {
                this.sharedWithTeams = [] as any;
                for (let item of _data["sharedWithTeams"])
                    this.sharedWithTeams!.push(SharedWithChannelTeamInfo.fromJS(item));
            }
            this.summary = _data["summary"] ? ChannelSummary.fromJS(_data["summary"]) : <any>undefined;
            if (Array.isArray(_data["tabs"])) {
                this.tabs = [] as any;
                for (let item of _data["tabs"])
                    this.tabs!.push(TeamsTab.fromJS(item));
            }
            this.tenantId = _data["tenantId"];
            this.webUrl = _data["webUrl"];
        }
    }

    static override fromJS(data: any): Channel2 {
        data = typeof data === 'object' ? data : {};
        let result = new Channel2();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["email"] = this.email;
        data["filesFolder"] = this.filesFolder ? this.filesFolder.toJSON() : <any>undefined;
        data["isArchived"] = this.isArchived;
        data["isFavoriteByDefault"] = this.isFavoriteByDefault;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        data["membershipType"] = this.membershipType;
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        if (Array.isArray(this.sharedWithTeams)) {
            data["sharedWithTeams"] = [];
            for (let item of this.sharedWithTeams)
                data["sharedWithTeams"].push(item.toJSON());
        }
        data["summary"] = this.summary ? this.summary.toJSON() : <any>undefined;
        if (Array.isArray(this.tabs)) {
            data["tabs"] = [];
            for (let item of this.tabs)
                data["tabs"].push(item.toJSON());
        }
        data["tenantId"] = this.tenantId;
        data["webUrl"] = this.webUrl;
        super.toJSON(data);
        return data;
    }
}

export interface IChannel2 extends IEntity {
    /** Read only. Timestamp at which the channel was created. */
    createdDateTime?: Date | undefined;
    /** Optional textual description for the channel. */
    description?: string | undefined;
    /** Channel name as it will appear to the user in Microsoft Teams. The maximum length is 50 characters. */
    displayName?: string | undefined;
    /** The email address for sending messages to the channel. Read-only. */
    email?: string | undefined;
    /** Metadata for the location where the channel's files are stored. */
    filesFolder?: DriveItem | undefined;
    /** Indicates whether the channel is archived. Read-only. */
    isArchived?: boolean | undefined;
    /** Indicates whether the channel should be marked as recommended for all members of the team to show in their channel list. Note: All recommended channels automatically show in the channels list for education and frontline worker users. The property can only be set programmatically via the Create team method. The default value is false. */
    isFavoriteByDefault?: boolean | undefined;
    /** A collection of membership records associated with the channel. */
    members?: ConversationMember[] | undefined;
    /** The type of the channel. Can be set during creation and can't be changed. The possible values are: standard, private, unknownFutureValue, shared. The default value is standard. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: shared. */
    membershipType?: ChannelMembershipType | undefined;
    /** A collection of all the messages in the channel. A navigation property. Nullable. */
    messages?: ChatMessage[] | undefined;
    /** A collection of teams with which a channel is shared. */
    sharedWithTeams?: SharedWithChannelTeamInfo[] | undefined;
    /** Contains summary information about the channel, including number of owners, members, guests, and an indicator for members from other tenants. The summary property will only be returned if it is specified in the $select clause of the Get channel method. */
    summary?: ChannelSummary | undefined;
    /** A collection of all the tabs in the channel. A navigation property. */
    tabs?: TeamsTab[] | undefined;
    /** The ID of the Microsoft Entra tenant. */
    tenantId?: string | undefined;
    /** A hyperlink that will go to the channel in Microsoft Teams. This is the URL that you get when you right-click a channel in Microsoft Teams and select Get link to channel. This URL should be treated as an opaque blob, and not parsed. Read-only. */
    webUrl?: string | undefined;
}

export enum ChannelMembershipType {
    Standard = 0,
    Private = 1,
    UnknownFutureValue = 2,
    Shared = 3,
}

export class TeamInfo extends Entity implements ITeamInfo {
    /** The name of the team. */
    displayName?: string | undefined;
    /** The team property */
    team?: Team | undefined;
    /** The ID of the Microsoft Entra tenant. */
    tenantId?: string | undefined;

    constructor(data?: ITeamInfo) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.team = _data["team"] ? Team.fromJS(_data["team"]) : <any>undefined;
            this.tenantId = _data["tenantId"];
        }
    }

    static override fromJS(data: any): TeamInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TeamInfo();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["team"] = this.team ? this.team.toJSON() : <any>undefined;
        data["tenantId"] = this.tenantId;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamInfo extends IEntity {
    /** The name of the team. */
    displayName?: string | undefined;
    /** The team property */
    team?: Team | undefined;
    /** The ID of the Microsoft Entra tenant. */
    tenantId?: string | undefined;
}

export class SharedWithChannelTeamInfo extends TeamInfo implements ISharedWithChannelTeamInfo {
    /** A collection of team members who have access to the shared channel. */
    allowedMembers?: ConversationMember[] | undefined;
    /** Indicates whether the team is the host of the channel. */
    isHostTeam?: boolean | undefined;

    constructor(data?: ISharedWithChannelTeamInfo) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["allowedMembers"])) {
                this.allowedMembers = [] as any;
                for (let item of _data["allowedMembers"])
                    this.allowedMembers!.push(ConversationMember.fromJS(item));
            }
            this.isHostTeam = _data["isHostTeam"];
        }
    }

    static override fromJS(data: any): SharedWithChannelTeamInfo {
        data = typeof data === 'object' ? data : {};
        let result = new SharedWithChannelTeamInfo();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.allowedMembers)) {
            data["allowedMembers"] = [];
            for (let item of this.allowedMembers)
                data["allowedMembers"].push(item.toJSON());
        }
        data["isHostTeam"] = this.isHostTeam;
        super.toJSON(data);
        return data;
    }
}

export interface ISharedWithChannelTeamInfo extends ITeamInfo {
    /** A collection of team members who have access to the shared channel. */
    allowedMembers?: ConversationMember[] | undefined;
    /** Indicates whether the team is the host of the channel. */
    isHostTeam?: boolean | undefined;
}

export class ChannelSummary implements IChannelSummary {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Count of guests in a channel. */
    guestsCount?: number | undefined;
    /** Indicates whether external members are included on the channel. */
    hasMembersFromOtherTenants?: boolean | undefined;
    /** Count of members in a channel. */
    membersCount?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Count of owners in a channel. */
    ownersCount?: number | undefined;

    constructor(data?: IChannelSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.guestsCount = _data["guestsCount"];
            this.hasMembersFromOtherTenants = _data["hasMembersFromOtherTenants"];
            this.membersCount = _data["membersCount"];
            this.odataType = _data["odataType"];
            this.ownersCount = _data["ownersCount"];
        }
    }

    static fromJS(data: any): ChannelSummary {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["guestsCount"] = this.guestsCount;
        data["hasMembersFromOtherTenants"] = this.hasMembersFromOtherTenants;
        data["membersCount"] = this.membersCount;
        data["odataType"] = this.odataType;
        data["ownersCount"] = this.ownersCount;
        return data;
    }
}

export interface IChannelSummary {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Count of guests in a channel. */
    guestsCount?: number | undefined;
    /** Indicates whether external members are included on the channel. */
    hasMembersFromOtherTenants?: boolean | undefined;
    /** Count of members in a channel. */
    membersCount?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Count of owners in a channel. */
    ownersCount?: number | undefined;
}

export class TeamFunSettings implements ITeamFunSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If set to true, enables users to include custom memes. */
    allowCustomMemes?: boolean | undefined;
    /** If set to true, enables Giphy use. */
    allowGiphy?: boolean | undefined;
    /** If set to true, enables users to include stickers and memes. */
    allowStickersAndMemes?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Giphy content rating. Possible values are: moderate, strict. */
    giphyContentRating?: GiphyRatingType | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ITeamFunSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowCustomMemes = _data["allowCustomMemes"];
            this.allowGiphy = _data["allowGiphy"];
            this.allowStickersAndMemes = _data["allowStickersAndMemes"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.giphyContentRating = _data["giphyContentRating"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): TeamFunSettings {
        data = typeof data === 'object' ? data : {};
        let result = new TeamFunSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowCustomMemes"] = this.allowCustomMemes;
        data["allowGiphy"] = this.allowGiphy;
        data["allowStickersAndMemes"] = this.allowStickersAndMemes;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["giphyContentRating"] = this.giphyContentRating;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ITeamFunSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If set to true, enables users to include custom memes. */
    allowCustomMemes?: boolean | undefined;
    /** If set to true, enables Giphy use. */
    allowGiphy?: boolean | undefined;
    /** If set to true, enables users to include stickers and memes. */
    allowStickersAndMemes?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Giphy content rating. Possible values are: moderate, strict. */
    giphyContentRating?: GiphyRatingType | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum GiphyRatingType {
    Strict = 0,
    Moderate = 1,
    UnknownFutureValue = 2,
}

/** Represents a Microsoft Entra group. */
export class Group2 extends DirectoryObject implements IGroup2 {
    /** The list of users or groups allowed to create posts or calendar events in this group. If this list is nonempty, then only users or groups listed here are allowed to post. */
    acceptedSenders?: DirectoryObject[] | undefined;
    /** Indicates if people external to the organization can send messages to the group. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    allowExternalSenders?: boolean | undefined;
    /** Represents the app roles granted to a group for an application. Supports $expand. */
    appRoleAssignments?: AppRoleAssignment[] | undefined;
    /** The list of sensitivity label pairs (label ID, label name) associated with a Microsoft 365 group. Returned only on $select. This property can be updated only in delegated scenarios where the caller requires both the Microsoft Graph permission and a supported administrator role. */
    assignedLabels?: AssignedLabel[] | undefined;
    /** The licenses that are assigned to the group. Returned only on $select. Supports $filter (eq).Read-only. */
    assignedLicenses?: AssignedLicense[] | undefined;
    /** Indicates if new members added to the group are autosubscribed to receive email notifications. You can set this property in a PATCH request for the group; don't set it in the initial POST request that creates the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    autoSubscribeNewMembers?: boolean | undefined;
    /** The group's calendar. Read-only. */
    calendar?: Calendar | undefined;
    /** The calendar view for the calendar. Read-only. */
    calendarView?: Event[] | undefined;
    /** Describes a classification for the group (such as low, medium, or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith). */
    classification?: string | undefined;
    /** The group's conversations. */
    conversations?: Conversation[] | undefined;
    /** Timestamp of when the group was created. The value can't be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. */
    createdDateTime?: Date | undefined;
    /** The user (or application) that created the group. NOTE: This property isn't set if the user is an administrator. Read-only. */
    createdOnBehalfOf?: DirectoryObject | undefined;
    /** An optional description for the group. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search. */
    description?: string | undefined;
    /** The display name for the group. This property is required when a group is created and can't be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby. */
    displayName?: string | undefined;
    /** The group's default drive. Read-only. */
    drive?: Drive | undefined;
    /** The group's drives. Read-only. */
    drives?: Drive[] | undefined;
    /** The group's calendar events. */
    events?: Event[] | undefined;
    /** Timestamp of when the group is set to expire. It's null for security groups, but for Microsoft 365 groups, it represents when the group is set to expire as defined in the groupLifecyclePolicy. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only. */
    expirationDateTime?: Date | undefined;
    /** The collection of open extensions defined for the group. Read-only. Nullable. */
    extensions?: Extension[] | undefined;
    /** The collection of lifecycle policies for this group. Read-only. Nullable. */
    groupLifecyclePolicies?: GroupLifecyclePolicy[] | undefined;
    /** Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or a distribution group. For details, see groups overview.If the collection includes DynamicMembership, the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, not). */
    groupTypes?: string[] | undefined;
    /** Indicates whether there are members in this group that have license errors from its group-based license assignment. This property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with license errors (that is, filter for this property being true). See an example. Supports $filter (eq). */
    hasMembersWithLicenseErrors?: boolean | undefined;
    /** True if the group isn't displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse Groups dialog for searching groups; otherwise, false. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    hideFromAddressLists?: boolean | undefined;
    /** True if the group isn't displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, false. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    hideFromOutlookClients?: boolean | undefined;
    /** When a group is associated with a team, this property determines whether the team is in read-only mode.To read this property, use the /group/{groupId}/team endpoint or the Get team API. To update this property, use the archiveTeam and unarchiveTeam APIs. */
    isArchived?: boolean | undefined;
    /** Indicates whether this group can be assigned to a Microsoft Entra role. Optional. This property can only be set while creating the group and is immutable. If set to true, the securityEnabled property must also be set to true, visibility must be Hidden, and the group can't be a dynamic group (that is, groupTypes can't contain DynamicMembership). Only callers with at least the Privileged Role Administrator role can set this property. The caller must also be assigned the RoleManagement.ReadWrite.Directory permission to set this property or update the membership of such groups. For more, see Using a group to manage Microsoft Entra role assignmentsUsing this feature requires a Microsoft Entra ID P1 license. Returned by default. Supports $filter (eq, ne, not). */
    isAssignableToRole?: boolean | undefined;
    /** The isManagementRestricted property */
    isManagementRestricted?: boolean | undefined;
    /** Indicates whether the signed-in user is subscribed to receive email conversations. The default value is true. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    isSubscribedByMail?: boolean | undefined;
    /** Indicates the status of the group license assignment to all group members. The default value is false. Read-only. Possible values: QueuedForProcessing, ProcessingInProgress, and ProcessingComplete.Returned only on $select. Read-only. */
    licenseProcessingState?: LicenseProcessingState | undefined;
    /** The SMTP address for the group, for example, 'serviceadmins@contoso.com'. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    mail?: string | undefined;
    /** Specifies whether the group is mail-enabled. Required. Returned by default. Supports $filter (eq, ne, not). */
    mailEnabled?: boolean | undefined;
    /** The mail alias for the group, unique for Microsoft 365 groups in the organization. Maximum length is 64 characters. This property can contain only characters in the ASCII character set 0 - 127 except the following characters: @ () / [] ' ; : <> , SPACE. Required. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    mailNickname?: string | undefined;
    /** Groups that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand. */
    memberOf?: DirectoryObject[] | undefined;
    /** The members of this group, who can be users, devices, other groups, or service principals. Supports the List members, Add member, and Remove member operations. Nullable. Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=members($select=id,userPrincipalName,displayName). */
    members?: DirectoryObject[] | undefined;
    /** The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith). */
    membershipRule?: string | undefined;
    /** Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default. Supports $filter (eq, ne, not, in). */
    membershipRuleProcessingState?: string | undefined;
    /** A list of group members with license errors from this group-based license assignment. Read-only. */
    membersWithLicenseErrors?: DirectoryObject[] | undefined;
    /** The onenote property */
    onenote?: Onenote | undefined;
    /** Contains the on-premises domain FQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only. */
    onPremisesDomainName?: string | undefined;
    /** Indicates the last time at which the group was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in). */
    onPremisesLastSyncDateTime?: Date | undefined;
    /** Contains the on-premises netBios name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only. */
    onPremisesNetBiosName?: string | undefined;
    /** Errors when using Microsoft synchronization product during provisioning. Returned by default. Supports $filter (eq, not). */
    onPremisesProvisioningErrors?: OnPremisesProvisioningError[] | undefined;
    /** Contains the on-premises SAM account name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith). Read-only. */
    onPremisesSamAccountName?: string | undefined;
    /** Contains the on-premises security identifier (SID) for the group synchronized from on-premises to the cloud. Read-only. Returned by default. Supports $filter (eq including on null values). */
    onPremisesSecurityIdentifier?: string | undefined;
    /** true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter (eq, ne, not, in, and eq on null values). */
    onPremisesSyncEnabled?: boolean | undefined;
    /** The owners of the group who can be users or service principals. Limited to 100 owners. Nullable. If this property isn't specified when creating a Microsoft 365 group the calling user (admin or non-admin) is automatically assigned as the group owner. A non-admin user can't explicitly add themselves to this collection when they're creating the group. For more information, see the related known issue. For security groups, the admin user isn't automatically added to this collection. For more information, see the related known issue. Supports $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1); Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=owners($select=id,userPrincipalName,displayName). */
    owners?: DirectoryObject[] | undefined;
    /** The permissionGrants property */
    permissionGrants?: ResourceSpecificPermissionGrant[] | undefined;
    /** The group's profile photo */
    photo?: ProfilePhoto | undefined;
    /** The profile photos owned by the group. Read-only. Nullable. */
    photos?: ProfilePhoto[] | undefined;
    /** Entry-point to Planner resource that might exist for a Unified Group. */
    planner?: PlannerGroup | undefined;
    /** The preferred data location for the Microsoft 365 group. By default, the group inherits the group creator's preferred data location. To set this property, the calling app must be granted the Directory.ReadWrite.All permission and the user be assigned at least one of the following Microsoft Entra roles: User Account Administrator Directory Writer  Exchange Administrator  SharePoint Administrator  For more information about this property, see OneDrive Online Multi-Geo. Nullable. Returned by default. */
    preferredDataLocation?: string | undefined;
    /** The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example, en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    preferredLanguage?: string | undefined;
    /** Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is required to filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0). */
    proxyAddresses?: string[] | undefined;
    /** The list of users or groups not allowed to create posts or calendar events in this group. Nullable */
    rejectedSenders?: DirectoryObject[] | undefined;
    /** Timestamp of when the group was last renewed. This value can't be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only. */
    renewedDateTime?: Date | undefined;
    /** Specifies whether the group is a security group. Required. Returned by default. Supports $filter (eq, ne, not, in). */
    securityEnabled?: boolean | undefined;
    /** Security identifier of the group, used in Windows scenarios. Read-only. Returned by default. */
    securityIdentifier?: string | undefined;
    /** Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a group object.  Supports $filter (eq, not, for isResolved and serviceInstance). */
    serviceProvisioningErrors?: ServiceProvisioningError[] | undefined;
    /** Settings that can govern this group's behavior, like whether members can invite guests to the group. Nullable. */
    settings?: GroupSetting[] | undefined;
    /** The list of SharePoint sites in this group. Access the default site with /sites/root. */
    sites?: Site[] | undefined;
    /** The team associated with this group. */
    team?: Team | undefined;
    /** Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange, or Red. Returned by default. */
    theme?: string | undefined;
    /** The group's conversation threads. Nullable. */
    threads?: ConversationThread[] | undefined;
    /** The groups that a group is a member of, either directly or through nested membership. Nullable. */
    transitiveMemberOf?: DirectoryObject[] | undefined;
    /** The direct and transitive members of a group. Nullable. */
    transitiveMembers?: DirectoryObject[] | undefined;
    /** The unique identifier that can be assigned to a group and used as an alternate key. Immutable. Read-only. */
    uniqueName?: string | undefined;
    /** Count of conversations that received new posts since the signed-in user last visited the group. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    unseenCount?: number | undefined;
    /** Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or HiddenMembership. HiddenMembership can be set only for Microsoft 365 groups when the groups are created. It can't be updated later. Other values of visibility can be updated after group creation. If visibility value isn't specified during group creation on Microsoft Graph, a security group is created as Private by default, and the Microsoft 365 group is Public. Groups assignable to roles are always Private. To learn more, see group visibility options. Returned by default. Nullable. */
    visibility?: string | undefined;

    constructor(data?: IGroup2) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["acceptedSenders"])) {
                this.acceptedSenders = [] as any;
                for (let item of _data["acceptedSenders"])
                    this.acceptedSenders!.push(DirectoryObject.fromJS(item));
            }
            this.allowExternalSenders = _data["allowExternalSenders"];
            if (Array.isArray(_data["appRoleAssignments"])) {
                this.appRoleAssignments = [] as any;
                for (let item of _data["appRoleAssignments"])
                    this.appRoleAssignments!.push(AppRoleAssignment.fromJS(item));
            }
            if (Array.isArray(_data["assignedLabels"])) {
                this.assignedLabels = [] as any;
                for (let item of _data["assignedLabels"])
                    this.assignedLabels!.push(AssignedLabel.fromJS(item));
            }
            if (Array.isArray(_data["assignedLicenses"])) {
                this.assignedLicenses = [] as any;
                for (let item of _data["assignedLicenses"])
                    this.assignedLicenses!.push(AssignedLicense.fromJS(item));
            }
            this.autoSubscribeNewMembers = _data["autoSubscribeNewMembers"];
            this.calendar = _data["calendar"] ? Calendar.fromJS(_data["calendar"]) : <any>undefined;
            if (Array.isArray(_data["calendarView"])) {
                this.calendarView = [] as any;
                for (let item of _data["calendarView"])
                    this.calendarView!.push(Event.fromJS(item));
            }
            this.classification = _data["classification"];
            if (Array.isArray(_data["conversations"])) {
                this.conversations = [] as any;
                for (let item of _data["conversations"])
                    this.conversations!.push(Conversation.fromJS(item));
            }
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.createdOnBehalfOf = _data["createdOnBehalfOf"] ? DirectoryObject.fromJS(_data["createdOnBehalfOf"]) : <any>undefined;
            this.description = _data["description"];
            this.displayName = _data["displayName"];
            this.drive = _data["drive"] ? Drive.fromJS(_data["drive"]) : <any>undefined;
            if (Array.isArray(_data["drives"])) {
                this.drives = [] as any;
                for (let item of _data["drives"])
                    this.drives!.push(Drive.fromJS(item));
            }
            if (Array.isArray(_data["events"])) {
                this.events = [] as any;
                for (let item of _data["events"])
                    this.events!.push(Event.fromJS(item));
            }
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            if (Array.isArray(_data["groupLifecyclePolicies"])) {
                this.groupLifecyclePolicies = [] as any;
                for (let item of _data["groupLifecyclePolicies"])
                    this.groupLifecyclePolicies!.push(GroupLifecyclePolicy.fromJS(item));
            }
            if (Array.isArray(_data["groupTypes"])) {
                this.groupTypes = [] as any;
                for (let item of _data["groupTypes"])
                    this.groupTypes!.push(item);
            }
            this.hasMembersWithLicenseErrors = _data["hasMembersWithLicenseErrors"];
            this.hideFromAddressLists = _data["hideFromAddressLists"];
            this.hideFromOutlookClients = _data["hideFromOutlookClients"];
            this.isArchived = _data["isArchived"];
            this.isAssignableToRole = _data["isAssignableToRole"];
            this.isManagementRestricted = _data["isManagementRestricted"];
            this.isSubscribedByMail = _data["isSubscribedByMail"];
            this.licenseProcessingState = _data["licenseProcessingState"] ? LicenseProcessingState.fromJS(_data["licenseProcessingState"]) : <any>undefined;
            this.mail = _data["mail"];
            this.mailEnabled = _data["mailEnabled"];
            this.mailNickname = _data["mailNickname"];
            if (Array.isArray(_data["memberOf"])) {
                this.memberOf = [] as any;
                for (let item of _data["memberOf"])
                    this.memberOf!.push(DirectoryObject.fromJS(item));
            }
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(DirectoryObject.fromJS(item));
            }
            this.membershipRule = _data["membershipRule"];
            this.membershipRuleProcessingState = _data["membershipRuleProcessingState"];
            if (Array.isArray(_data["membersWithLicenseErrors"])) {
                this.membersWithLicenseErrors = [] as any;
                for (let item of _data["membersWithLicenseErrors"])
                    this.membersWithLicenseErrors!.push(DirectoryObject.fromJS(item));
            }
            this.onenote = _data["onenote"] ? Onenote.fromJS(_data["onenote"]) : <any>undefined;
            this.onPremisesDomainName = _data["onPremisesDomainName"];
            this.onPremisesLastSyncDateTime = _data["onPremisesLastSyncDateTime"] ? new Date(_data["onPremisesLastSyncDateTime"].toString()) : <any>undefined;
            this.onPremisesNetBiosName = _data["onPremisesNetBiosName"];
            if (Array.isArray(_data["onPremisesProvisioningErrors"])) {
                this.onPremisesProvisioningErrors = [] as any;
                for (let item of _data["onPremisesProvisioningErrors"])
                    this.onPremisesProvisioningErrors!.push(OnPremisesProvisioningError.fromJS(item));
            }
            this.onPremisesSamAccountName = _data["onPremisesSamAccountName"];
            this.onPremisesSecurityIdentifier = _data["onPremisesSecurityIdentifier"];
            this.onPremisesSyncEnabled = _data["onPremisesSyncEnabled"];
            if (Array.isArray(_data["owners"])) {
                this.owners = [] as any;
                for (let item of _data["owners"])
                    this.owners!.push(DirectoryObject.fromJS(item));
            }
            if (Array.isArray(_data["permissionGrants"])) {
                this.permissionGrants = [] as any;
                for (let item of _data["permissionGrants"])
                    this.permissionGrants!.push(ResourceSpecificPermissionGrant.fromJS(item));
            }
            this.photo = _data["photo"] ? ProfilePhoto.fromJS(_data["photo"]) : <any>undefined;
            if (Array.isArray(_data["photos"])) {
                this.photos = [] as any;
                for (let item of _data["photos"])
                    this.photos!.push(ProfilePhoto.fromJS(item));
            }
            this.planner = _data["planner"] ? PlannerGroup.fromJS(_data["planner"]) : <any>undefined;
            this.preferredDataLocation = _data["preferredDataLocation"];
            this.preferredLanguage = _data["preferredLanguage"];
            if (Array.isArray(_data["proxyAddresses"])) {
                this.proxyAddresses = [] as any;
                for (let item of _data["proxyAddresses"])
                    this.proxyAddresses!.push(item);
            }
            if (Array.isArray(_data["rejectedSenders"])) {
                this.rejectedSenders = [] as any;
                for (let item of _data["rejectedSenders"])
                    this.rejectedSenders!.push(DirectoryObject.fromJS(item));
            }
            this.renewedDateTime = _data["renewedDateTime"] ? new Date(_data["renewedDateTime"].toString()) : <any>undefined;
            this.securityEnabled = _data["securityEnabled"];
            this.securityIdentifier = _data["securityIdentifier"];
            if (Array.isArray(_data["serviceProvisioningErrors"])) {
                this.serviceProvisioningErrors = [] as any;
                for (let item of _data["serviceProvisioningErrors"])
                    this.serviceProvisioningErrors!.push(ServiceProvisioningError.fromJS(item));
            }
            if (Array.isArray(_data["settings"])) {
                this.settings = [] as any;
                for (let item of _data["settings"])
                    this.settings!.push(GroupSetting.fromJS(item));
            }
            if (Array.isArray(_data["sites"])) {
                this.sites = [] as any;
                for (let item of _data["sites"])
                    this.sites!.push(Site.fromJS(item));
            }
            this.team = _data["team"] ? Team.fromJS(_data["team"]) : <any>undefined;
            this.theme = _data["theme"];
            if (Array.isArray(_data["threads"])) {
                this.threads = [] as any;
                for (let item of _data["threads"])
                    this.threads!.push(ConversationThread.fromJS(item));
            }
            if (Array.isArray(_data["transitiveMemberOf"])) {
                this.transitiveMemberOf = [] as any;
                for (let item of _data["transitiveMemberOf"])
                    this.transitiveMemberOf!.push(DirectoryObject.fromJS(item));
            }
            if (Array.isArray(_data["transitiveMembers"])) {
                this.transitiveMembers = [] as any;
                for (let item of _data["transitiveMembers"])
                    this.transitiveMembers!.push(DirectoryObject.fromJS(item));
            }
            this.uniqueName = _data["uniqueName"];
            this.unseenCount = _data["unseenCount"];
            this.visibility = _data["visibility"];
        }
    }

    static override fromJS(data: any): Group2 {
        data = typeof data === 'object' ? data : {};
        let result = new Group2();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.acceptedSenders)) {
            data["acceptedSenders"] = [];
            for (let item of this.acceptedSenders)
                data["acceptedSenders"].push(item.toJSON());
        }
        data["allowExternalSenders"] = this.allowExternalSenders;
        if (Array.isArray(this.appRoleAssignments)) {
            data["appRoleAssignments"] = [];
            for (let item of this.appRoleAssignments)
                data["appRoleAssignments"].push(item.toJSON());
        }
        if (Array.isArray(this.assignedLabels)) {
            data["assignedLabels"] = [];
            for (let item of this.assignedLabels)
                data["assignedLabels"].push(item.toJSON());
        }
        if (Array.isArray(this.assignedLicenses)) {
            data["assignedLicenses"] = [];
            for (let item of this.assignedLicenses)
                data["assignedLicenses"].push(item.toJSON());
        }
        data["autoSubscribeNewMembers"] = this.autoSubscribeNewMembers;
        data["calendar"] = this.calendar ? this.calendar.toJSON() : <any>undefined;
        if (Array.isArray(this.calendarView)) {
            data["calendarView"] = [];
            for (let item of this.calendarView)
                data["calendarView"].push(item.toJSON());
        }
        data["classification"] = this.classification;
        if (Array.isArray(this.conversations)) {
            data["conversations"] = [];
            for (let item of this.conversations)
                data["conversations"].push(item.toJSON());
        }
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["createdOnBehalfOf"] = this.createdOnBehalfOf ? this.createdOnBehalfOf.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["drive"] = this.drive ? this.drive.toJSON() : <any>undefined;
        if (Array.isArray(this.drives)) {
            data["drives"] = [];
            for (let item of this.drives)
                data["drives"].push(item.toJSON());
        }
        if (Array.isArray(this.events)) {
            data["events"] = [];
            for (let item of this.events)
                data["events"].push(item.toJSON());
        }
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        if (Array.isArray(this.groupLifecyclePolicies)) {
            data["groupLifecyclePolicies"] = [];
            for (let item of this.groupLifecyclePolicies)
                data["groupLifecyclePolicies"].push(item.toJSON());
        }
        if (Array.isArray(this.groupTypes)) {
            data["groupTypes"] = [];
            for (let item of this.groupTypes)
                data["groupTypes"].push(item);
        }
        data["hasMembersWithLicenseErrors"] = this.hasMembersWithLicenseErrors;
        data["hideFromAddressLists"] = this.hideFromAddressLists;
        data["hideFromOutlookClients"] = this.hideFromOutlookClients;
        data["isArchived"] = this.isArchived;
        data["isAssignableToRole"] = this.isAssignableToRole;
        data["isManagementRestricted"] = this.isManagementRestricted;
        data["isSubscribedByMail"] = this.isSubscribedByMail;
        data["licenseProcessingState"] = this.licenseProcessingState ? this.licenseProcessingState.toJSON() : <any>undefined;
        data["mail"] = this.mail;
        data["mailEnabled"] = this.mailEnabled;
        data["mailNickname"] = this.mailNickname;
        if (Array.isArray(this.memberOf)) {
            data["memberOf"] = [];
            for (let item of this.memberOf)
                data["memberOf"].push(item.toJSON());
        }
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        data["membershipRule"] = this.membershipRule;
        data["membershipRuleProcessingState"] = this.membershipRuleProcessingState;
        if (Array.isArray(this.membersWithLicenseErrors)) {
            data["membersWithLicenseErrors"] = [];
            for (let item of this.membersWithLicenseErrors)
                data["membersWithLicenseErrors"].push(item.toJSON());
        }
        data["onenote"] = this.onenote ? this.onenote.toJSON() : <any>undefined;
        data["onPremisesDomainName"] = this.onPremisesDomainName;
        data["onPremisesLastSyncDateTime"] = this.onPremisesLastSyncDateTime ? this.onPremisesLastSyncDateTime.toISOString() : <any>undefined;
        data["onPremisesNetBiosName"] = this.onPremisesNetBiosName;
        if (Array.isArray(this.onPremisesProvisioningErrors)) {
            data["onPremisesProvisioningErrors"] = [];
            for (let item of this.onPremisesProvisioningErrors)
                data["onPremisesProvisioningErrors"].push(item.toJSON());
        }
        data["onPremisesSamAccountName"] = this.onPremisesSamAccountName;
        data["onPremisesSecurityIdentifier"] = this.onPremisesSecurityIdentifier;
        data["onPremisesSyncEnabled"] = this.onPremisesSyncEnabled;
        if (Array.isArray(this.owners)) {
            data["owners"] = [];
            for (let item of this.owners)
                data["owners"].push(item.toJSON());
        }
        if (Array.isArray(this.permissionGrants)) {
            data["permissionGrants"] = [];
            for (let item of this.permissionGrants)
                data["permissionGrants"].push(item.toJSON());
        }
        data["photo"] = this.photo ? this.photo.toJSON() : <any>undefined;
        if (Array.isArray(this.photos)) {
            data["photos"] = [];
            for (let item of this.photos)
                data["photos"].push(item.toJSON());
        }
        data["planner"] = this.planner ? this.planner.toJSON() : <any>undefined;
        data["preferredDataLocation"] = this.preferredDataLocation;
        data["preferredLanguage"] = this.preferredLanguage;
        if (Array.isArray(this.proxyAddresses)) {
            data["proxyAddresses"] = [];
            for (let item of this.proxyAddresses)
                data["proxyAddresses"].push(item);
        }
        if (Array.isArray(this.rejectedSenders)) {
            data["rejectedSenders"] = [];
            for (let item of this.rejectedSenders)
                data["rejectedSenders"].push(item.toJSON());
        }
        data["renewedDateTime"] = this.renewedDateTime ? this.renewedDateTime.toISOString() : <any>undefined;
        data["securityEnabled"] = this.securityEnabled;
        data["securityIdentifier"] = this.securityIdentifier;
        if (Array.isArray(this.serviceProvisioningErrors)) {
            data["serviceProvisioningErrors"] = [];
            for (let item of this.serviceProvisioningErrors)
                data["serviceProvisioningErrors"].push(item.toJSON());
        }
        if (Array.isArray(this.settings)) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        if (Array.isArray(this.sites)) {
            data["sites"] = [];
            for (let item of this.sites)
                data["sites"].push(item.toJSON());
        }
        data["team"] = this.team ? this.team.toJSON() : <any>undefined;
        data["theme"] = this.theme;
        if (Array.isArray(this.threads)) {
            data["threads"] = [];
            for (let item of this.threads)
                data["threads"].push(item.toJSON());
        }
        if (Array.isArray(this.transitiveMemberOf)) {
            data["transitiveMemberOf"] = [];
            for (let item of this.transitiveMemberOf)
                data["transitiveMemberOf"].push(item.toJSON());
        }
        if (Array.isArray(this.transitiveMembers)) {
            data["transitiveMembers"] = [];
            for (let item of this.transitiveMembers)
                data["transitiveMembers"].push(item.toJSON());
        }
        data["uniqueName"] = this.uniqueName;
        data["unseenCount"] = this.unseenCount;
        data["visibility"] = this.visibility;
        super.toJSON(data);
        return data;
    }
}

/** Represents a Microsoft Entra group. */
export interface IGroup2 extends IDirectoryObject {
    /** The list of users or groups allowed to create posts or calendar events in this group. If this list is nonempty, then only users or groups listed here are allowed to post. */
    acceptedSenders?: DirectoryObject[] | undefined;
    /** Indicates if people external to the organization can send messages to the group. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    allowExternalSenders?: boolean | undefined;
    /** Represents the app roles granted to a group for an application. Supports $expand. */
    appRoleAssignments?: AppRoleAssignment[] | undefined;
    /** The list of sensitivity label pairs (label ID, label name) associated with a Microsoft 365 group. Returned only on $select. This property can be updated only in delegated scenarios where the caller requires both the Microsoft Graph permission and a supported administrator role. */
    assignedLabels?: AssignedLabel[] | undefined;
    /** The licenses that are assigned to the group. Returned only on $select. Supports $filter (eq).Read-only. */
    assignedLicenses?: AssignedLicense[] | undefined;
    /** Indicates if new members added to the group are autosubscribed to receive email notifications. You can set this property in a PATCH request for the group; don't set it in the initial POST request that creates the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    autoSubscribeNewMembers?: boolean | undefined;
    /** The group's calendar. Read-only. */
    calendar?: Calendar | undefined;
    /** The calendar view for the calendar. Read-only. */
    calendarView?: Event[] | undefined;
    /** Describes a classification for the group (such as low, medium, or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith). */
    classification?: string | undefined;
    /** The group's conversations. */
    conversations?: Conversation[] | undefined;
    /** Timestamp of when the group was created. The value can't be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. */
    createdDateTime?: Date | undefined;
    /** The user (or application) that created the group. NOTE: This property isn't set if the user is an administrator. Read-only. */
    createdOnBehalfOf?: DirectoryObject | undefined;
    /** An optional description for the group. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search. */
    description?: string | undefined;
    /** The display name for the group. This property is required when a group is created and can't be cleared during updates. Maximum length is 256 characters. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderby. */
    displayName?: string | undefined;
    /** The group's default drive. Read-only. */
    drive?: Drive | undefined;
    /** The group's drives. Read-only. */
    drives?: Drive[] | undefined;
    /** The group's calendar events. */
    events?: Event[] | undefined;
    /** Timestamp of when the group is set to expire. It's null for security groups, but for Microsoft 365 groups, it represents when the group is set to expire as defined in the groupLifecyclePolicy. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only. */
    expirationDateTime?: Date | undefined;
    /** The collection of open extensions defined for the group. Read-only. Nullable. */
    extensions?: Extension[] | undefined;
    /** The collection of lifecycle policies for this group. Read-only. Nullable. */
    groupLifecyclePolicies?: GroupLifecyclePolicy[] | undefined;
    /** Specifies the group type and its membership. If the collection contains Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or a distribution group. For details, see groups overview.If the collection includes DynamicMembership, the group has dynamic membership; otherwise, membership is static. Returned by default. Supports $filter (eq, not). */
    groupTypes?: string[] | undefined;
    /** Indicates whether there are members in this group that have license errors from its group-based license assignment. This property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with license errors (that is, filter for this property being true). See an example. Supports $filter (eq). */
    hasMembersWithLicenseErrors?: boolean | undefined;
    /** True if the group isn't displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse Groups dialog for searching groups; otherwise, false. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    hideFromAddressLists?: boolean | undefined;
    /** True if the group isn't displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, false. The default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    hideFromOutlookClients?: boolean | undefined;
    /** When a group is associated with a team, this property determines whether the team is in read-only mode.To read this property, use the /group/{groupId}/team endpoint or the Get team API. To update this property, use the archiveTeam and unarchiveTeam APIs. */
    isArchived?: boolean | undefined;
    /** Indicates whether this group can be assigned to a Microsoft Entra role. Optional. This property can only be set while creating the group and is immutable. If set to true, the securityEnabled property must also be set to true, visibility must be Hidden, and the group can't be a dynamic group (that is, groupTypes can't contain DynamicMembership). Only callers with at least the Privileged Role Administrator role can set this property. The caller must also be assigned the RoleManagement.ReadWrite.Directory permission to set this property or update the membership of such groups. For more, see Using a group to manage Microsoft Entra role assignmentsUsing this feature requires a Microsoft Entra ID P1 license. Returned by default. Supports $filter (eq, ne, not). */
    isAssignableToRole?: boolean | undefined;
    /** The isManagementRestricted property */
    isManagementRestricted?: boolean | undefined;
    /** Indicates whether the signed-in user is subscribed to receive email conversations. The default value is true. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    isSubscribedByMail?: boolean | undefined;
    /** Indicates the status of the group license assignment to all group members. The default value is false. Read-only. Possible values: QueuedForProcessing, ProcessingInProgress, and ProcessingComplete.Returned only on $select. Read-only. */
    licenseProcessingState?: LicenseProcessingState | undefined;
    /** The SMTP address for the group, for example, 'serviceadmins@contoso.com'. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    mail?: string | undefined;
    /** Specifies whether the group is mail-enabled. Required. Returned by default. Supports $filter (eq, ne, not). */
    mailEnabled?: boolean | undefined;
    /** The mail alias for the group, unique for Microsoft 365 groups in the organization. Maximum length is 64 characters. This property can contain only characters in the ASCII character set 0 - 127 except the following characters: @ () / [] ' ; : <> , SPACE. Required. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    mailNickname?: string | undefined;
    /** Groups that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand. */
    memberOf?: DirectoryObject[] | undefined;
    /** The members of this group, who can be users, devices, other groups, or service principals. Supports the List members, Add member, and Remove member operations. Nullable. Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=members($select=id,userPrincipalName,displayName). */
    members?: DirectoryObject[] | undefined;
    /** The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith). */
    membershipRule?: string | undefined;
    /** Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default. Supports $filter (eq, ne, not, in). */
    membershipRuleProcessingState?: string | undefined;
    /** A list of group members with license errors from this group-based license assignment. Read-only. */
    membersWithLicenseErrors?: DirectoryObject[] | undefined;
    /** The onenote property */
    onenote?: Onenote | undefined;
    /** Contains the on-premises domain FQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only. */
    onPremisesDomainName?: string | undefined;
    /** Indicates the last time at which the group was synced with the on-premises directory. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in). */
    onPremisesLastSyncDateTime?: Date | undefined;
    /** Contains the on-premises netBios name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Read-only. */
    onPremisesNetBiosName?: string | undefined;
    /** Errors when using Microsoft synchronization product during provisioning. Returned by default. Supports $filter (eq, not). */
    onPremisesProvisioningErrors?: OnPremisesProvisioningError[] | undefined;
    /** Contains the on-premises SAM account name synchronized from the on-premises directory. The property is only populated for customers synchronizing their on-premises directory to Microsoft Entra ID via Microsoft Entra Connect.Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith). Read-only. */
    onPremisesSamAccountName?: string | undefined;
    /** Contains the on-premises security identifier (SID) for the group synchronized from on-premises to the cloud. Read-only. Returned by default. Supports $filter (eq including on null values). */
    onPremisesSecurityIdentifier?: string | undefined;
    /** true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter (eq, ne, not, in, and eq on null values). */
    onPremisesSyncEnabled?: boolean | undefined;
    /** The owners of the group who can be users or service principals. Limited to 100 owners. Nullable. If this property isn't specified when creating a Microsoft 365 group the calling user (admin or non-admin) is automatically assigned as the group owner. A non-admin user can't explicitly add themselves to this collection when they're creating the group. For more information, see the related known issue. For security groups, the admin user isn't automatically added to this collection. For more information, see the related known issue. Supports $filter (/$count eq 0, /$count ne 0, /$count eq 1, /$count ne 1); Supports $expand including nested $select. For example, /groups?$filter=startsWith(displayName,'Role')&$select=id,displayName&$expand=owners($select=id,userPrincipalName,displayName). */
    owners?: DirectoryObject[] | undefined;
    /** The permissionGrants property */
    permissionGrants?: ResourceSpecificPermissionGrant[] | undefined;
    /** The group's profile photo */
    photo?: ProfilePhoto | undefined;
    /** The profile photos owned by the group. Read-only. Nullable. */
    photos?: ProfilePhoto[] | undefined;
    /** Entry-point to Planner resource that might exist for a Unified Group. */
    planner?: PlannerGroup | undefined;
    /** The preferred data location for the Microsoft 365 group. By default, the group inherits the group creator's preferred data location. To set this property, the calling app must be granted the Directory.ReadWrite.All permission and the user be assigned at least one of the following Microsoft Entra roles: User Account Administrator Directory Writer  Exchange Administrator  SharePoint Administrator  For more information about this property, see OneDrive Online Multi-Geo. Nullable. Returned by default. */
    preferredDataLocation?: string | undefined;
    /** The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example, en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values). */
    preferredLanguage?: string | undefined;
    /** Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is required to filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable. Supports $filter (eq, not, ge, le, startsWith, endsWith, /$count eq 0, /$count ne 0). */
    proxyAddresses?: string[] | undefined;
    /** The list of users or groups not allowed to create posts or calendar events in this group. Nullable */
    rejectedSenders?: DirectoryObject[] | undefined;
    /** Timestamp of when the group was last renewed. This value can't be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on January 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only. */
    renewedDateTime?: Date | undefined;
    /** Specifies whether the group is a security group. Required. Returned by default. Supports $filter (eq, ne, not, in). */
    securityEnabled?: boolean | undefined;
    /** Security identifier of the group, used in Windows scenarios. Read-only. Returned by default. */
    securityIdentifier?: string | undefined;
    /** Errors published by a federated service describing a nontransient, service-specific error regarding the properties or link from a group object.  Supports $filter (eq, not, for isResolved and serviceInstance). */
    serviceProvisioningErrors?: ServiceProvisioningError[] | undefined;
    /** Settings that can govern this group's behavior, like whether members can invite guests to the group. Nullable. */
    settings?: GroupSetting[] | undefined;
    /** The list of SharePoint sites in this group. Access the default site with /sites/root. */
    sites?: Site[] | undefined;
    /** The team associated with this group. */
    team?: Team | undefined;
    /** Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange, or Red. Returned by default. */
    theme?: string | undefined;
    /** The group's conversation threads. Nullable. */
    threads?: ConversationThread[] | undefined;
    /** The groups that a group is a member of, either directly or through nested membership. Nullable. */
    transitiveMemberOf?: DirectoryObject[] | undefined;
    /** The direct and transitive members of a group. Nullable. */
    transitiveMembers?: DirectoryObject[] | undefined;
    /** The unique identifier that can be assigned to a group and used as an alternate key. Immutable. Read-only. */
    uniqueName?: string | undefined;
    /** Count of conversations that received new posts since the signed-in user last visited the group. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}). */
    unseenCount?: number | undefined;
    /** Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or HiddenMembership. HiddenMembership can be set only for Microsoft 365 groups when the groups are created. It can't be updated later. Other values of visibility can be updated after group creation. If visibility value isn't specified during group creation on Microsoft Graph, a security group is created as Private by default, and the Microsoft 365 group is Public. Groups assignable to roles are always Private. To learn more, see group visibility options. Returned by default. Nullable. */
    visibility?: string | undefined;
}

export class AssignedLabel implements IAssignedLabel {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the label. Read-only. */
    displayName?: string | undefined;
    /** The unique identifier of the label. */
    labelId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IAssignedLabel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.labelId = _data["labelId"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): AssignedLabel {
        data = typeof data === 'object' ? data : {};
        let result = new AssignedLabel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["labelId"] = this.labelId;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IAssignedLabel {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the label. Read-only. */
    displayName?: string | undefined;
    /** The unique identifier of the label. */
    labelId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Conversation extends Entity implements IConversation {
    /** Indicates whether any of the posts within this Conversation has at least one attachment. Supports $filter (eq, ne) and $search. */
    hasAttachments?: boolean | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastDeliveredDateTime?: Date | undefined;
    /** A short summary from the body of the latest post in this conversation. Supports $filter (eq, ne, le, ge). */
    preview?: string | undefined;
    /** A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable. */
    threads?: ConversationThread[] | undefined;
    /** The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated. */
    topic?: string | undefined;
    /** All the users that sent a message to this Conversation. */
    uniqueSenders?: string[] | undefined;

    constructor(data?: IConversation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.hasAttachments = _data["hasAttachments"];
            this.lastDeliveredDateTime = _data["lastDeliveredDateTime"] ? new Date(_data["lastDeliveredDateTime"].toString()) : <any>undefined;
            this.preview = _data["preview"];
            if (Array.isArray(_data["threads"])) {
                this.threads = [] as any;
                for (let item of _data["threads"])
                    this.threads!.push(ConversationThread.fromJS(item));
            }
            this.topic = _data["topic"];
            if (Array.isArray(_data["uniqueSenders"])) {
                this.uniqueSenders = [] as any;
                for (let item of _data["uniqueSenders"])
                    this.uniqueSenders!.push(item);
            }
        }
    }

    static override fromJS(data: any): Conversation {
        data = typeof data === 'object' ? data : {};
        let result = new Conversation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hasAttachments"] = this.hasAttachments;
        data["lastDeliveredDateTime"] = this.lastDeliveredDateTime ? this.lastDeliveredDateTime.toISOString() : <any>undefined;
        data["preview"] = this.preview;
        if (Array.isArray(this.threads)) {
            data["threads"] = [];
            for (let item of this.threads)
                data["threads"].push(item.toJSON());
        }
        data["topic"] = this.topic;
        if (Array.isArray(this.uniqueSenders)) {
            data["uniqueSenders"] = [];
            for (let item of this.uniqueSenders)
                data["uniqueSenders"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IConversation extends IEntity {
    /** Indicates whether any of the posts within this Conversation has at least one attachment. Supports $filter (eq, ne) and $search. */
    hasAttachments?: boolean | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastDeliveredDateTime?: Date | undefined;
    /** A short summary from the body of the latest post in this conversation. Supports $filter (eq, ne, le, ge). */
    preview?: string | undefined;
    /** A collection of all the conversation threads in the conversation. A navigation property. Read-only. Nullable. */
    threads?: ConversationThread[] | undefined;
    /** The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated. */
    topic?: string | undefined;
    /** All the users that sent a message to this Conversation. */
    uniqueSenders?: string[] | undefined;
}

export class ConversationThread extends Entity implements IConversationThread {
    /** The Cc: recipients for the thread. Returned only on $select. */
    ccRecipients?: Recipient[] | undefined;
    /** Indicates whether any of the posts within this thread has at least one attachment. Returned by default. */
    hasAttachments?: boolean | undefined;
    /** Indicates if the thread is locked. Returned by default. */
    isLocked?: boolean | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.Returned by default. */
    lastDeliveredDateTime?: Date | undefined;
    /** The posts property */
    posts?: Post[] | undefined;
    /** A short summary from the body of the latest post in this conversation. Returned by default. */
    preview?: string | undefined;
    /** The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated. Returned by default. */
    topic?: string | undefined;
    /** The To: recipients for the thread. Returned only on $select. */
    toRecipients?: Recipient[] | undefined;
    /** All the users that sent a message to this thread. Returned by default. */
    uniqueSenders?: string[] | undefined;

    constructor(data?: IConversationThread) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["ccRecipients"])) {
                this.ccRecipients = [] as any;
                for (let item of _data["ccRecipients"])
                    this.ccRecipients!.push(Recipient.fromJS(item));
            }
            this.hasAttachments = _data["hasAttachments"];
            this.isLocked = _data["isLocked"];
            this.lastDeliveredDateTime = _data["lastDeliveredDateTime"] ? new Date(_data["lastDeliveredDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["posts"])) {
                this.posts = [] as any;
                for (let item of _data["posts"])
                    this.posts!.push(Post.fromJS(item));
            }
            this.preview = _data["preview"];
            this.topic = _data["topic"];
            if (Array.isArray(_data["toRecipients"])) {
                this.toRecipients = [] as any;
                for (let item of _data["toRecipients"])
                    this.toRecipients!.push(Recipient.fromJS(item));
            }
            if (Array.isArray(_data["uniqueSenders"])) {
                this.uniqueSenders = [] as any;
                for (let item of _data["uniqueSenders"])
                    this.uniqueSenders!.push(item);
            }
        }
    }

    static override fromJS(data: any): ConversationThread {
        data = typeof data === 'object' ? data : {};
        let result = new ConversationThread();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.ccRecipients)) {
            data["ccRecipients"] = [];
            for (let item of this.ccRecipients)
                data["ccRecipients"].push(item.toJSON());
        }
        data["hasAttachments"] = this.hasAttachments;
        data["isLocked"] = this.isLocked;
        data["lastDeliveredDateTime"] = this.lastDeliveredDateTime ? this.lastDeliveredDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.posts)) {
            data["posts"] = [];
            for (let item of this.posts)
                data["posts"].push(item.toJSON());
        }
        data["preview"] = this.preview;
        data["topic"] = this.topic;
        if (Array.isArray(this.toRecipients)) {
            data["toRecipients"] = [];
            for (let item of this.toRecipients)
                data["toRecipients"].push(item.toJSON());
        }
        if (Array.isArray(this.uniqueSenders)) {
            data["uniqueSenders"] = [];
            for (let item of this.uniqueSenders)
                data["uniqueSenders"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IConversationThread extends IEntity {
    /** The Cc: recipients for the thread. Returned only on $select. */
    ccRecipients?: Recipient[] | undefined;
    /** Indicates whether any of the posts within this thread has at least one attachment. Returned by default. */
    hasAttachments?: boolean | undefined;
    /** Indicates if the thread is locked. Returned by default. */
    isLocked?: boolean | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.Returned by default. */
    lastDeliveredDateTime?: Date | undefined;
    /** The posts property */
    posts?: Post[] | undefined;
    /** A short summary from the body of the latest post in this conversation. Returned by default. */
    preview?: string | undefined;
    /** The topic of the conversation. This property can be set when the conversation is created, but it cannot be updated. Returned by default. */
    topic?: string | undefined;
    /** The To: recipients for the thread. Returned only on $select. */
    toRecipients?: Recipient[] | undefined;
    /** All the users that sent a message to this thread. Returned by default. */
    uniqueSenders?: string[] | undefined;
}

export class Post extends OutlookItem implements IPost {
    /** Read-only. Nullable. Supports $expand. */
    attachments?: Attachment[] | undefined;
    /** The contents of the post. This is a default property. This property can be null. */
    body?: ItemBody | undefined;
    /** Unique ID of the conversation. Read-only. */
    conversationId?: string | undefined;
    /** Unique ID of the conversation thread. Read-only. */
    conversationThreadId?: string | undefined;
    /** The collection of open extensions defined for the post. Read-only. Nullable. Supports $expand. */
    extensions?: Extension[] | undefined;
    /** The from property */
    from?: Recipient | undefined;
    /** Indicates whether the post has at least one attachment. This is a default property. */
    hasAttachments?: boolean | undefined;
    /** Read-only. Supports $expand. */
    inReplyTo?: Post | undefined;
    /** The collection of multi-value extended properties defined for the post. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** Conversation participants that were added to the thread as part of this post. */
    newParticipants?: Recipient[] | undefined;
    /** Specifies when the post was received. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    receivedDateTime?: Date | undefined;
    /** Contains the address of the sender. The value of Sender is assumed to be the address of the authenticated user in the case when Sender is not specified. This is a default property. */
    sender?: Recipient | undefined;
    /** The collection of single-value extended properties defined for the post. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;

    constructor(data?: IPost) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [] as any;
                for (let item of _data["attachments"])
                    this.attachments!.push(Attachment.fromJS(item));
            }
            this.body = _data["body"] ? ItemBody.fromJS(_data["body"]) : <any>undefined;
            this.conversationId = _data["conversationId"];
            this.conversationThreadId = _data["conversationThreadId"];
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            this.from = _data["from"] ? Recipient.fromJS(_data["from"]) : <any>undefined;
            this.hasAttachments = _data["hasAttachments"];
            this.inReplyTo = _data["inReplyTo"] ? Post.fromJS(_data["inReplyTo"]) : <any>undefined;
            if (Array.isArray(_data["multiValueExtendedProperties"])) {
                this.multiValueExtendedProperties = [] as any;
                for (let item of _data["multiValueExtendedProperties"])
                    this.multiValueExtendedProperties!.push(MultiValueLegacyExtendedProperty.fromJS(item));
            }
            if (Array.isArray(_data["newParticipants"])) {
                this.newParticipants = [] as any;
                for (let item of _data["newParticipants"])
                    this.newParticipants!.push(Recipient.fromJS(item));
            }
            this.receivedDateTime = _data["receivedDateTime"] ? new Date(_data["receivedDateTime"].toString()) : <any>undefined;
            this.sender = _data["sender"] ? Recipient.fromJS(_data["sender"]) : <any>undefined;
            if (Array.isArray(_data["singleValueExtendedProperties"])) {
                this.singleValueExtendedProperties = [] as any;
                for (let item of _data["singleValueExtendedProperties"])
                    this.singleValueExtendedProperties!.push(SingleValueLegacyExtendedProperty.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Post {
        data = typeof data === 'object' ? data : {};
        let result = new Post();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        data["conversationId"] = this.conversationId;
        data["conversationThreadId"] = this.conversationThreadId;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        data["hasAttachments"] = this.hasAttachments;
        data["inReplyTo"] = this.inReplyTo ? this.inReplyTo.toJSON() : <any>undefined;
        if (Array.isArray(this.multiValueExtendedProperties)) {
            data["multiValueExtendedProperties"] = [];
            for (let item of this.multiValueExtendedProperties)
                data["multiValueExtendedProperties"].push(item.toJSON());
        }
        if (Array.isArray(this.newParticipants)) {
            data["newParticipants"] = [];
            for (let item of this.newParticipants)
                data["newParticipants"].push(item.toJSON());
        }
        data["receivedDateTime"] = this.receivedDateTime ? this.receivedDateTime.toISOString() : <any>undefined;
        data["sender"] = this.sender ? this.sender.toJSON() : <any>undefined;
        if (Array.isArray(this.singleValueExtendedProperties)) {
            data["singleValueExtendedProperties"] = [];
            for (let item of this.singleValueExtendedProperties)
                data["singleValueExtendedProperties"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPost extends IOutlookItem {
    /** Read-only. Nullable. Supports $expand. */
    attachments?: Attachment[] | undefined;
    /** The contents of the post. This is a default property. This property can be null. */
    body?: ItemBody | undefined;
    /** Unique ID of the conversation. Read-only. */
    conversationId?: string | undefined;
    /** Unique ID of the conversation thread. Read-only. */
    conversationThreadId?: string | undefined;
    /** The collection of open extensions defined for the post. Read-only. Nullable. Supports $expand. */
    extensions?: Extension[] | undefined;
    /** The from property */
    from?: Recipient | undefined;
    /** Indicates whether the post has at least one attachment. This is a default property. */
    hasAttachments?: boolean | undefined;
    /** Read-only. Supports $expand. */
    inReplyTo?: Post | undefined;
    /** The collection of multi-value extended properties defined for the post. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** Conversation participants that were added to the thread as part of this post. */
    newParticipants?: Recipient[] | undefined;
    /** Specifies when the post was received. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    receivedDateTime?: Date | undefined;
    /** Contains the address of the sender. The value of Sender is assumed to be the address of the authenticated user in the case when Sender is not specified. This is a default property. */
    sender?: Recipient | undefined;
    /** The collection of single-value extended properties defined for the post. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
}

export class GroupLifecyclePolicy extends Entity implements IGroupLifecyclePolicy {
    /** List of email address to send notifications for groups without owners. Multiple email address can be defined by separating email address with a semicolon. */
    alternateNotificationEmails?: string | undefined;
    /** Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number of days defined. */
    groupLifetimeInDays?: number | undefined;
    /** The group type for which the expiration policy applies. Possible values are All, Selected or None. */
    managedGroupTypes?: string | undefined;

    constructor(data?: IGroupLifecyclePolicy) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.alternateNotificationEmails = _data["alternateNotificationEmails"];
            this.groupLifetimeInDays = _data["groupLifetimeInDays"];
            this.managedGroupTypes = _data["managedGroupTypes"];
        }
    }

    static override fromJS(data: any): GroupLifecyclePolicy {
        data = typeof data === 'object' ? data : {};
        let result = new GroupLifecyclePolicy();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["alternateNotificationEmails"] = this.alternateNotificationEmails;
        data["groupLifetimeInDays"] = this.groupLifetimeInDays;
        data["managedGroupTypes"] = this.managedGroupTypes;
        super.toJSON(data);
        return data;
    }
}

export interface IGroupLifecyclePolicy extends IEntity {
    /** List of email address to send notifications for groups without owners. Multiple email address can be defined by separating email address with a semicolon. */
    alternateNotificationEmails?: string | undefined;
    /** Number of days before a group expires and needs to be renewed. Once renewed, the group expiration is extended by the number of days defined. */
    groupLifetimeInDays?: number | undefined;
    /** The group type for which the expiration policy applies. Possible values are All, Selected or None. */
    managedGroupTypes?: string | undefined;
}

export class LicenseProcessingState implements ILicenseProcessingState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The state property */
    state?: string | undefined;

    constructor(data?: ILicenseProcessingState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): LicenseProcessingState {
        data = typeof data === 'object' ? data : {};
        let result = new LicenseProcessingState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["state"] = this.state;
        return data;
    }
}

export interface ILicenseProcessingState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The state property */
    state?: string | undefined;
}

export class OnPremisesProvisioningError implements IOnPremisesProvisioningError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Category of the provisioning error. Note: Currently, there is only one possible value. Possible value: PropertyConflict - indicates a property value is not unique. Other objects contain the same value for the property. */
    category?: string | undefined;
    /** The date and time at which the error occurred. */
    occurredDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Name of the directory property causing the error. Current possible values: UserPrincipalName or ProxyAddress */
    propertyCausingError?: string | undefined;
    /** Value of the property causing the error. */
    value?: string | undefined;

    constructor(data?: IOnPremisesProvisioningError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.category = _data["category"];
            this.occurredDateTime = _data["occurredDateTime"] ? new Date(_data["occurredDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
            this.propertyCausingError = _data["propertyCausingError"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): OnPremisesProvisioningError {
        data = typeof data === 'object' ? data : {};
        let result = new OnPremisesProvisioningError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["category"] = this.category;
        data["occurredDateTime"] = this.occurredDateTime ? this.occurredDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        data["propertyCausingError"] = this.propertyCausingError;
        data["value"] = this.value;
        return data;
    }
}

export interface IOnPremisesProvisioningError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Category of the provisioning error. Note: Currently, there is only one possible value. Possible value: PropertyConflict - indicates a property value is not unique. Other objects contain the same value for the property. */
    category?: string | undefined;
    /** The date and time at which the error occurred. */
    occurredDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Name of the directory property causing the error. Current possible values: UserPrincipalName or ProxyAddress */
    propertyCausingError?: string | undefined;
    /** Value of the property causing the error. */
    value?: string | undefined;
}

export class PlannerGroup extends Entity implements IPlannerGroup {
    /** Read-only. Nullable. Returns the plannerPlans owned by the group. */
    plans?: PlannerPlan[] | undefined;

    constructor(data?: IPlannerGroup) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["plans"])) {
                this.plans = [] as any;
                for (let item of _data["plans"])
                    this.plans!.push(PlannerPlan.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): PlannerGroup {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerGroup();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.plans)) {
            data["plans"] = [];
            for (let item of this.plans)
                data["plans"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerGroup extends IEntity {
    /** Read-only. Nullable. Returns the plannerPlans owned by the group. */
    plans?: PlannerPlan[] | undefined;
}

export class PlannerPlan extends Entity implements IPlannerPlan {
    /** Read-only. Nullable. Collection of buckets in the plan. */
    buckets?: PlannerBucket[] | undefined;
    /** Identifies the container of the plan. Specify only the url, the containerId and type, or all properties. After it's set, this property can’t be updated. Required. */
    container?: PlannerPlanContainer | undefined;
    /** Read-only. The user who created the plan. */
    createdBy?: IdentitySet | undefined;
    /** Read-only. Date and time at which the plan is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    createdDateTime?: Date | undefined;
    /** Read-only. Nullable. Extra details about the plan. */
    details?: PlannerPlanDetails | undefined;
    /** Use the container property instead. ID of the group that owns the plan. After it's set, this property can’t be updated. This property won't return a valid group ID if the container of the plan isn't a group. */
    owner?: string | undefined;
    /** Read-only. Nullable. Collection of tasks in the plan. */
    tasks?: PlannerTask[] | undefined;
    /** Required. Title of the plan. */
    title?: string | undefined;

    constructor(data?: IPlannerPlan) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["buckets"])) {
                this.buckets = [] as any;
                for (let item of _data["buckets"])
                    this.buckets!.push(PlannerBucket.fromJS(item));
            }
            this.container = _data["container"] ? PlannerPlanContainer.fromJS(_data["container"]) : <any>undefined;
            this.createdBy = _data["createdBy"] ? IdentitySet.fromJS(_data["createdBy"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.details = _data["details"] ? PlannerPlanDetails.fromJS(_data["details"]) : <any>undefined;
            this.owner = _data["owner"];
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(PlannerTask.fromJS(item));
            }
            this.title = _data["title"];
        }
    }

    static override fromJS(data: any): PlannerPlan {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerPlan();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.buckets)) {
            data["buckets"] = [];
            for (let item of this.buckets)
                data["buckets"].push(item.toJSON());
        }
        data["container"] = this.container ? this.container.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["details"] = this.details ? this.details.toJSON() : <any>undefined;
        data["owner"] = this.owner;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        data["title"] = this.title;
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerPlan extends IEntity {
    /** Read-only. Nullable. Collection of buckets in the plan. */
    buckets?: PlannerBucket[] | undefined;
    /** Identifies the container of the plan. Specify only the url, the containerId and type, or all properties. After it's set, this property can’t be updated. Required. */
    container?: PlannerPlanContainer | undefined;
    /** Read-only. The user who created the plan. */
    createdBy?: IdentitySet | undefined;
    /** Read-only. Date and time at which the plan is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    createdDateTime?: Date | undefined;
    /** Read-only. Nullable. Extra details about the plan. */
    details?: PlannerPlanDetails | undefined;
    /** Use the container property instead. ID of the group that owns the plan. After it's set, this property can’t be updated. This property won't return a valid group ID if the container of the plan isn't a group. */
    owner?: string | undefined;
    /** Read-only. Nullable. Collection of tasks in the plan. */
    tasks?: PlannerTask[] | undefined;
    /** Required. Title of the plan. */
    title?: string | undefined;
}

export class PlannerBucket extends Entity implements IPlannerBucket {
    /** Name of the bucket. */
    name?: string | undefined;
    /** Hint used to order items of this type in a list view. For details about the supported format, see Using order hints in Planner. */
    orderHint?: string | undefined;
    /** Plan ID to which the bucket belongs. */
    planId?: string | undefined;
    /** Read-only. Nullable. The collection of tasks in the bucket. */
    tasks?: PlannerTask[] | undefined;

    constructor(data?: IPlannerBucket) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.orderHint = _data["orderHint"];
            this.planId = _data["planId"];
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(PlannerTask.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): PlannerBucket {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerBucket();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["orderHint"] = this.orderHint;
        data["planId"] = this.planId;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerBucket extends IEntity {
    /** Name of the bucket. */
    name?: string | undefined;
    /** Hint used to order items of this type in a list view. For details about the supported format, see Using order hints in Planner. */
    orderHint?: string | undefined;
    /** Plan ID to which the bucket belongs. */
    planId?: string | undefined;
    /** Read-only. Nullable. The collection of tasks in the bucket. */
    tasks?: PlannerTask[] | undefined;
}

export class PlannerTask extends Entity implements IPlannerTask {
    /** Number of checklist items with value set to false, representing incomplete items. */
    activeChecklistItemCount?: number | undefined;
    /** The categories to which the task has been applied. See applied Categories for possible values. */
    appliedCategories?: PlannerAppliedCategories | undefined;
    /** Read-only. Nullable. Used to render the task correctly in the task board view when grouped by assignedTo. */
    assignedToTaskBoardFormat?: PlannerAssignedToTaskBoardTaskFormat | undefined;
    /** Hint used to order items of this type in a list view. The format is defined as outlined here. */
    assigneePriority?: string | undefined;
    /** The set of assignees the task is assigned to. */
    assignments?: PlannerAssignments | undefined;
    /** Bucket ID to which the task belongs. The bucket needs to be in the plan that the task is in. It's 28 characters long and case-sensitive. Format validation is done on the service. */
    bucketId?: string | undefined;
    /** Read-only. Nullable. Used to render the task correctly in the task board view when grouped by bucket. */
    bucketTaskBoardFormat?: PlannerBucketTaskBoardTaskFormat | undefined;
    /** Number of checklist items that are present on the task. */
    checklistItemCount?: number | undefined;
    /** Identity of the user that completed the task. */
    completedBy?: IdentitySet | undefined;
    /** Read-only. Date and time at which the 'percentComplete' of the task is set to '100'. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    completedDateTime?: Date | undefined;
    /** Thread ID of the conversation on the task. This is the ID of the conversation thread object created in the group. */
    conversationThreadId?: string | undefined;
    /** Identity of the user that created the task. */
    createdBy?: IdentitySet | undefined;
    /** Read-only. Date and time at which the task is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    createdDateTime?: Date | undefined;
    /** Read-only. Nullable. More details about the task. */
    details?: PlannerTaskDetails | undefined;
    /** Date and time at which the task is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    dueDateTime?: Date | undefined;
    /** Read-only. Value is true if the details object of the task has a nonempty description and false otherwise. */
    hasDescription?: boolean | undefined;
    /** Hint used to order items of this type in a list view. The format is defined as outlined here. */
    orderHint?: string | undefined;
    /** Percentage of task completion. When set to 100, the task is considered completed. */
    percentComplete?: number | undefined;
    /** Plan ID to which the task belongs. */
    planId?: string | undefined;
    /** This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. */
    previewType?: PlannerPreviewType | undefined;
    /** Priority of the task. The valid range of values is between 0 and 10, with the increasing value being lower priority (0 has the highest priority and 10 has the lowest priority).  Currently, Planner interprets values 0 and 1 as 'urgent', 2, 3 and 4 as 'important', 5, 6, and 7 as 'medium', and 8, 9, and 10 as 'low'.  Additionally, Planner sets the value 1 for 'urgent', 3 for 'important', 5 for 'medium', and 9 for 'low'. */
    priority?: number | undefined;
    /** Read-only. Nullable. Used to render the task correctly in the task board view when grouped by progress. */
    progressTaskBoardFormat?: PlannerProgressTaskBoardTaskFormat | undefined;
    /** Number of external references that exist on the task. */
    referenceCount?: number | undefined;
    /** Date and time at which the task starts. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    startDateTime?: Date | undefined;
    /** Title of the task. */
    title?: string | undefined;

    constructor(data?: IPlannerTask) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activeChecklistItemCount = _data["activeChecklistItemCount"];
            this.appliedCategories = _data["appliedCategories"] ? PlannerAppliedCategories.fromJS(_data["appliedCategories"]) : <any>undefined;
            this.assignedToTaskBoardFormat = _data["assignedToTaskBoardFormat"] ? PlannerAssignedToTaskBoardTaskFormat.fromJS(_data["assignedToTaskBoardFormat"]) : <any>undefined;
            this.assigneePriority = _data["assigneePriority"];
            this.assignments = _data["assignments"] ? PlannerAssignments.fromJS(_data["assignments"]) : <any>undefined;
            this.bucketId = _data["bucketId"];
            this.bucketTaskBoardFormat = _data["bucketTaskBoardFormat"] ? PlannerBucketTaskBoardTaskFormat.fromJS(_data["bucketTaskBoardFormat"]) : <any>undefined;
            this.checklistItemCount = _data["checklistItemCount"];
            this.completedBy = _data["completedBy"] ? IdentitySet.fromJS(_data["completedBy"]) : <any>undefined;
            this.completedDateTime = _data["completedDateTime"] ? new Date(_data["completedDateTime"].toString()) : <any>undefined;
            this.conversationThreadId = _data["conversationThreadId"];
            this.createdBy = _data["createdBy"] ? IdentitySet.fromJS(_data["createdBy"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.details = _data["details"] ? PlannerTaskDetails.fromJS(_data["details"]) : <any>undefined;
            this.dueDateTime = _data["dueDateTime"] ? new Date(_data["dueDateTime"].toString()) : <any>undefined;
            this.hasDescription = _data["hasDescription"];
            this.orderHint = _data["orderHint"];
            this.percentComplete = _data["percentComplete"];
            this.planId = _data["planId"];
            this.previewType = _data["previewType"];
            this.priority = _data["priority"];
            this.progressTaskBoardFormat = _data["progressTaskBoardFormat"] ? PlannerProgressTaskBoardTaskFormat.fromJS(_data["progressTaskBoardFormat"]) : <any>undefined;
            this.referenceCount = _data["referenceCount"];
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
            this.title = _data["title"];
        }
    }

    static override fromJS(data: any): PlannerTask {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerTask();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activeChecklistItemCount"] = this.activeChecklistItemCount;
        data["appliedCategories"] = this.appliedCategories ? this.appliedCategories.toJSON() : <any>undefined;
        data["assignedToTaskBoardFormat"] = this.assignedToTaskBoardFormat ? this.assignedToTaskBoardFormat.toJSON() : <any>undefined;
        data["assigneePriority"] = this.assigneePriority;
        data["assignments"] = this.assignments ? this.assignments.toJSON() : <any>undefined;
        data["bucketId"] = this.bucketId;
        data["bucketTaskBoardFormat"] = this.bucketTaskBoardFormat ? this.bucketTaskBoardFormat.toJSON() : <any>undefined;
        data["checklistItemCount"] = this.checklistItemCount;
        data["completedBy"] = this.completedBy ? this.completedBy.toJSON() : <any>undefined;
        data["completedDateTime"] = this.completedDateTime ? this.completedDateTime.toISOString() : <any>undefined;
        data["conversationThreadId"] = this.conversationThreadId;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["details"] = this.details ? this.details.toJSON() : <any>undefined;
        data["dueDateTime"] = this.dueDateTime ? this.dueDateTime.toISOString() : <any>undefined;
        data["hasDescription"] = this.hasDescription;
        data["orderHint"] = this.orderHint;
        data["percentComplete"] = this.percentComplete;
        data["planId"] = this.planId;
        data["previewType"] = this.previewType;
        data["priority"] = this.priority;
        data["progressTaskBoardFormat"] = this.progressTaskBoardFormat ? this.progressTaskBoardFormat.toJSON() : <any>undefined;
        data["referenceCount"] = this.referenceCount;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        data["title"] = this.title;
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerTask extends IEntity {
    /** Number of checklist items with value set to false, representing incomplete items. */
    activeChecklistItemCount?: number | undefined;
    /** The categories to which the task has been applied. See applied Categories for possible values. */
    appliedCategories?: PlannerAppliedCategories | undefined;
    /** Read-only. Nullable. Used to render the task correctly in the task board view when grouped by assignedTo. */
    assignedToTaskBoardFormat?: PlannerAssignedToTaskBoardTaskFormat | undefined;
    /** Hint used to order items of this type in a list view. The format is defined as outlined here. */
    assigneePriority?: string | undefined;
    /** The set of assignees the task is assigned to. */
    assignments?: PlannerAssignments | undefined;
    /** Bucket ID to which the task belongs. The bucket needs to be in the plan that the task is in. It's 28 characters long and case-sensitive. Format validation is done on the service. */
    bucketId?: string | undefined;
    /** Read-only. Nullable. Used to render the task correctly in the task board view when grouped by bucket. */
    bucketTaskBoardFormat?: PlannerBucketTaskBoardTaskFormat | undefined;
    /** Number of checklist items that are present on the task. */
    checklistItemCount?: number | undefined;
    /** Identity of the user that completed the task. */
    completedBy?: IdentitySet | undefined;
    /** Read-only. Date and time at which the 'percentComplete' of the task is set to '100'. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    completedDateTime?: Date | undefined;
    /** Thread ID of the conversation on the task. This is the ID of the conversation thread object created in the group. */
    conversationThreadId?: string | undefined;
    /** Identity of the user that created the task. */
    createdBy?: IdentitySet | undefined;
    /** Read-only. Date and time at which the task is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    createdDateTime?: Date | undefined;
    /** Read-only. Nullable. More details about the task. */
    details?: PlannerTaskDetails | undefined;
    /** Date and time at which the task is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    dueDateTime?: Date | undefined;
    /** Read-only. Value is true if the details object of the task has a nonempty description and false otherwise. */
    hasDescription?: boolean | undefined;
    /** Hint used to order items of this type in a list view. The format is defined as outlined here. */
    orderHint?: string | undefined;
    /** Percentage of task completion. When set to 100, the task is considered completed. */
    percentComplete?: number | undefined;
    /** Plan ID to which the task belongs. */
    planId?: string | undefined;
    /** This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. */
    previewType?: PlannerPreviewType | undefined;
    /** Priority of the task. The valid range of values is between 0 and 10, with the increasing value being lower priority (0 has the highest priority and 10 has the lowest priority).  Currently, Planner interprets values 0 and 1 as 'urgent', 2, 3 and 4 as 'important', 5, 6, and 7 as 'medium', and 8, 9, and 10 as 'low'.  Additionally, Planner sets the value 1 for 'urgent', 3 for 'important', 5 for 'medium', and 9 for 'low'. */
    priority?: number | undefined;
    /** Read-only. Nullable. Used to render the task correctly in the task board view when grouped by progress. */
    progressTaskBoardFormat?: PlannerProgressTaskBoardTaskFormat | undefined;
    /** Number of external references that exist on the task. */
    referenceCount?: number | undefined;
    /** Date and time at which the task starts. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    startDateTime?: Date | undefined;
    /** Title of the task. */
    title?: string | undefined;
}

export class PlannerAppliedCategories implements IPlannerAppliedCategories {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPlannerAppliedCategories) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PlannerAppliedCategories {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerAppliedCategories();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPlannerAppliedCategories {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class PlannerAssignedToTaskBoardTaskFormat extends Entity implements IPlannerAssignedToTaskBoardTaskFormat {
    /** Dictionary of hints used to order tasks on the AssignedTo view of the Task Board. The key of each entry is one of the users the task is assigned to and the value is the order hint. The format of each value is defined as outlined here. */
    orderHintsByAssignee?: PlannerOrderHintsByAssignee | undefined;
    /** Hint value used to order the task on the AssignedTo view of the Task Board when the task isn't assigned to anyone, or if the orderHintsByAssignee dictionary doesn't provide an order hint for the user the task is assigned to. The format is defined as outlined here. */
    unassignedOrderHint?: string | undefined;

    constructor(data?: IPlannerAssignedToTaskBoardTaskFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.orderHintsByAssignee = _data["orderHintsByAssignee"] ? PlannerOrderHintsByAssignee.fromJS(_data["orderHintsByAssignee"]) : <any>undefined;
            this.unassignedOrderHint = _data["unassignedOrderHint"];
        }
    }

    static override fromJS(data: any): PlannerAssignedToTaskBoardTaskFormat {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerAssignedToTaskBoardTaskFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderHintsByAssignee"] = this.orderHintsByAssignee ? this.orderHintsByAssignee.toJSON() : <any>undefined;
        data["unassignedOrderHint"] = this.unassignedOrderHint;
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerAssignedToTaskBoardTaskFormat extends IEntity {
    /** Dictionary of hints used to order tasks on the AssignedTo view of the Task Board. The key of each entry is one of the users the task is assigned to and the value is the order hint. The format of each value is defined as outlined here. */
    orderHintsByAssignee?: PlannerOrderHintsByAssignee | undefined;
    /** Hint value used to order the task on the AssignedTo view of the Task Board when the task isn't assigned to anyone, or if the orderHintsByAssignee dictionary doesn't provide an order hint for the user the task is assigned to. The format is defined as outlined here. */
    unassignedOrderHint?: string | undefined;
}

export class PlannerOrderHintsByAssignee implements IPlannerOrderHintsByAssignee {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPlannerOrderHintsByAssignee) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PlannerOrderHintsByAssignee {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerOrderHintsByAssignee();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPlannerOrderHintsByAssignee {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class PlannerAssignments implements IPlannerAssignments {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPlannerAssignments) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PlannerAssignments {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerAssignments();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPlannerAssignments {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class PlannerBucketTaskBoardTaskFormat extends Entity implements IPlannerBucketTaskBoardTaskFormat {
    /** Hint used to order tasks in the bucket view of the task board. For details about the supported format, see Using order hints in Planner. */
    orderHint?: string | undefined;

    constructor(data?: IPlannerBucketTaskBoardTaskFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.orderHint = _data["orderHint"];
        }
    }

    static override fromJS(data: any): PlannerBucketTaskBoardTaskFormat {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerBucketTaskBoardTaskFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderHint"] = this.orderHint;
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerBucketTaskBoardTaskFormat extends IEntity {
    /** Hint used to order tasks in the bucket view of the task board. For details about the supported format, see Using order hints in Planner. */
    orderHint?: string | undefined;
}

export class PlannerTaskDetails extends Entity implements IPlannerTaskDetails {
    /** The collection of checklist items on the task. */
    checklist?: PlannerChecklistItems | undefined;
    /** Description of the task. */
    description?: string | undefined;
    /** This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. When set to automatic the displayed preview is chosen by the app viewing the task. */
    previewType?: PlannerPreviewType | undefined;
    /** The collection of references on the task. */
    references?: PlannerExternalReferences | undefined;

    constructor(data?: IPlannerTaskDetails) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.checklist = _data["checklist"] ? PlannerChecklistItems.fromJS(_data["checklist"]) : <any>undefined;
            this.description = _data["description"];
            this.previewType = _data["previewType"];
            this.references = _data["references"] ? PlannerExternalReferences.fromJS(_data["references"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): PlannerTaskDetails {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerTaskDetails();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["checklist"] = this.checklist ? this.checklist.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["previewType"] = this.previewType;
        data["references"] = this.references ? this.references.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerTaskDetails extends IEntity {
    /** The collection of checklist items on the task. */
    checklist?: PlannerChecklistItems | undefined;
    /** Description of the task. */
    description?: string | undefined;
    /** This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference. When set to automatic the displayed preview is chosen by the app viewing the task. */
    previewType?: PlannerPreviewType | undefined;
    /** The collection of references on the task. */
    references?: PlannerExternalReferences | undefined;
}

export class PlannerChecklistItems implements IPlannerChecklistItems {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPlannerChecklistItems) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PlannerChecklistItems {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerChecklistItems();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPlannerChecklistItems {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum PlannerPreviewType {
    Automatic = 0,
    NoPreview = 1,
    Checklist = 2,
    Description = 3,
    Reference = 4,
}

export class PlannerExternalReferences implements IPlannerExternalReferences {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPlannerExternalReferences) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PlannerExternalReferences {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerExternalReferences();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPlannerExternalReferences {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class PlannerProgressTaskBoardTaskFormat extends Entity implements IPlannerProgressTaskBoardTaskFormat {
    /** Hint value used to order the task on the progress view of the task board. For details about the supported format, see Using order hints in Planner. */
    orderHint?: string | undefined;

    constructor(data?: IPlannerProgressTaskBoardTaskFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.orderHint = _data["orderHint"];
        }
    }

    static override fromJS(data: any): PlannerProgressTaskBoardTaskFormat {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerProgressTaskBoardTaskFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["orderHint"] = this.orderHint;
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerProgressTaskBoardTaskFormat extends IEntity {
    /** Hint value used to order the task on the progress view of the task board. For details about the supported format, see Using order hints in Planner. */
    orderHint?: string | undefined;
}

export class PlannerPlanContainer implements IPlannerPlanContainer {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The identifier of the resource that contains the plan. Optional. */
    containerId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The type of the resource that contains the plan. For supported types, see the previous table. Possible values are: group, unknownFutureValue, roster. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: roster. Optional. */
    type?: PlannerContainerType | undefined;
    /** The full canonical URL of the container. Optional. */
    url?: string | undefined;

    constructor(data?: IPlannerPlanContainer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.containerId = _data["containerId"];
            this.odataType = _data["odataType"];
            this.type = _data["type"];
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): PlannerPlanContainer {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerPlanContainer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["containerId"] = this.containerId;
        data["odataType"] = this.odataType;
        data["type"] = this.type;
        data["url"] = this.url;
        return data;
    }
}

export interface IPlannerPlanContainer {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The identifier of the resource that contains the plan. Optional. */
    containerId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The type of the resource that contains the plan. For supported types, see the previous table. Possible values are: group, unknownFutureValue, roster. Note that you must use the Prefer: include-unknown-enum-members request header to get the following value in this evolvable enum: roster. Optional. */
    type?: PlannerContainerType | undefined;
    /** The full canonical URL of the container. Optional. */
    url?: string | undefined;
}

export enum PlannerContainerType {
    Group = 0,
    UnknownFutureValue = 1,
    Roster = 2,
}

export class PlannerPlanDetails extends Entity implements IPlannerPlanDetails {
    /** An object that specifies the descriptions of the 25 categories that can be associated with tasks in the plan. */
    categoryDescriptions?: PlannerCategoryDescriptions | undefined;
    /** Set of user IDs that this plan is shared with. If you're using Microsoft 365 groups, use the Groups API to manage group membership to share the group's plan. You can also add existing members of the group to this collection, although it isn't required for them to access the plan owned by the group. */
    sharedWith?: PlannerUserIds | undefined;

    constructor(data?: IPlannerPlanDetails) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.categoryDescriptions = _data["categoryDescriptions"] ? PlannerCategoryDescriptions.fromJS(_data["categoryDescriptions"]) : <any>undefined;
            this.sharedWith = _data["sharedWith"] ? PlannerUserIds.fromJS(_data["sharedWith"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): PlannerPlanDetails {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerPlanDetails();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryDescriptions"] = this.categoryDescriptions ? this.categoryDescriptions.toJSON() : <any>undefined;
        data["sharedWith"] = this.sharedWith ? this.sharedWith.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerPlanDetails extends IEntity {
    /** An object that specifies the descriptions of the 25 categories that can be associated with tasks in the plan. */
    categoryDescriptions?: PlannerCategoryDescriptions | undefined;
    /** Set of user IDs that this plan is shared with. If you're using Microsoft 365 groups, use the Groups API to manage group membership to share the group's plan. You can also add existing members of the group to this collection, although it isn't required for them to access the plan owned by the group. */
    sharedWith?: PlannerUserIds | undefined;
}

export class PlannerCategoryDescriptions implements IPlannerCategoryDescriptions {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The label associated with Category 1 */
    category1?: string | undefined;
    /** The label associated with Category 10 */
    category10?: string | undefined;
    /** The label associated with Category 11 */
    category11?: string | undefined;
    /** The label associated with Category 12 */
    category12?: string | undefined;
    /** The label associated with Category 13 */
    category13?: string | undefined;
    /** The label associated with Category 14 */
    category14?: string | undefined;
    /** The label associated with Category 15 */
    category15?: string | undefined;
    /** The label associated with Category 16 */
    category16?: string | undefined;
    /** The label associated with Category 17 */
    category17?: string | undefined;
    /** The label associated with Category 18 */
    category18?: string | undefined;
    /** The label associated with Category 19 */
    category19?: string | undefined;
    /** The label associated with Category 2 */
    category2?: string | undefined;
    /** The label associated with Category 20 */
    category20?: string | undefined;
    /** The label associated with Category 21 */
    category21?: string | undefined;
    /** The label associated with Category 22 */
    category22?: string | undefined;
    /** The label associated with Category 23 */
    category23?: string | undefined;
    /** The label associated with Category 24 */
    category24?: string | undefined;
    /** The label associated with Category 25 */
    category25?: string | undefined;
    /** The label associated with Category 3 */
    category3?: string | undefined;
    /** The label associated with Category 4 */
    category4?: string | undefined;
    /** The label associated with Category 5 */
    category5?: string | undefined;
    /** The label associated with Category 6 */
    category6?: string | undefined;
    /** The label associated with Category 7 */
    category7?: string | undefined;
    /** The label associated with Category 8 */
    category8?: string | undefined;
    /** The label associated with Category 9 */
    category9?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPlannerCategoryDescriptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.category1 = _data["category1"];
            this.category10 = _data["category10"];
            this.category11 = _data["category11"];
            this.category12 = _data["category12"];
            this.category13 = _data["category13"];
            this.category14 = _data["category14"];
            this.category15 = _data["category15"];
            this.category16 = _data["category16"];
            this.category17 = _data["category17"];
            this.category18 = _data["category18"];
            this.category19 = _data["category19"];
            this.category2 = _data["category2"];
            this.category20 = _data["category20"];
            this.category21 = _data["category21"];
            this.category22 = _data["category22"];
            this.category23 = _data["category23"];
            this.category24 = _data["category24"];
            this.category25 = _data["category25"];
            this.category3 = _data["category3"];
            this.category4 = _data["category4"];
            this.category5 = _data["category5"];
            this.category6 = _data["category6"];
            this.category7 = _data["category7"];
            this.category8 = _data["category8"];
            this.category9 = _data["category9"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PlannerCategoryDescriptions {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerCategoryDescriptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["category1"] = this.category1;
        data["category10"] = this.category10;
        data["category11"] = this.category11;
        data["category12"] = this.category12;
        data["category13"] = this.category13;
        data["category14"] = this.category14;
        data["category15"] = this.category15;
        data["category16"] = this.category16;
        data["category17"] = this.category17;
        data["category18"] = this.category18;
        data["category19"] = this.category19;
        data["category2"] = this.category2;
        data["category20"] = this.category20;
        data["category21"] = this.category21;
        data["category22"] = this.category22;
        data["category23"] = this.category23;
        data["category24"] = this.category24;
        data["category25"] = this.category25;
        data["category3"] = this.category3;
        data["category4"] = this.category4;
        data["category5"] = this.category5;
        data["category6"] = this.category6;
        data["category7"] = this.category7;
        data["category8"] = this.category8;
        data["category9"] = this.category9;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPlannerCategoryDescriptions {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The label associated with Category 1 */
    category1?: string | undefined;
    /** The label associated with Category 10 */
    category10?: string | undefined;
    /** The label associated with Category 11 */
    category11?: string | undefined;
    /** The label associated with Category 12 */
    category12?: string | undefined;
    /** The label associated with Category 13 */
    category13?: string | undefined;
    /** The label associated with Category 14 */
    category14?: string | undefined;
    /** The label associated with Category 15 */
    category15?: string | undefined;
    /** The label associated with Category 16 */
    category16?: string | undefined;
    /** The label associated with Category 17 */
    category17?: string | undefined;
    /** The label associated with Category 18 */
    category18?: string | undefined;
    /** The label associated with Category 19 */
    category19?: string | undefined;
    /** The label associated with Category 2 */
    category2?: string | undefined;
    /** The label associated with Category 20 */
    category20?: string | undefined;
    /** The label associated with Category 21 */
    category21?: string | undefined;
    /** The label associated with Category 22 */
    category22?: string | undefined;
    /** The label associated with Category 23 */
    category23?: string | undefined;
    /** The label associated with Category 24 */
    category24?: string | undefined;
    /** The label associated with Category 25 */
    category25?: string | undefined;
    /** The label associated with Category 3 */
    category3?: string | undefined;
    /** The label associated with Category 4 */
    category4?: string | undefined;
    /** The label associated with Category 5 */
    category5?: string | undefined;
    /** The label associated with Category 6 */
    category6?: string | undefined;
    /** The label associated with Category 7 */
    category7?: string | undefined;
    /** The label associated with Category 8 */
    category8?: string | undefined;
    /** The label associated with Category 9 */
    category9?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class PlannerUserIds implements IPlannerUserIds {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPlannerUserIds) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PlannerUserIds {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerUserIds();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPlannerUserIds {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ServiceProvisioningError implements IServiceProvisioningError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date and time at which the error occurred. */
    createdDateTime?: Date | undefined;
    /** Indicates whether the error has been attended to. */
    isResolved?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Qualified service instance (for example, 'SharePoint/Dublin') that published the service error information. */
    serviceInstance?: string | undefined;

    constructor(data?: IServiceProvisioningError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.isResolved = _data["isResolved"];
            this.odataType = _data["odataType"];
            this.serviceInstance = _data["serviceInstance"];
        }
    }

    static fromJS(data: any): ServiceProvisioningError {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceProvisioningError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["isResolved"] = this.isResolved;
        data["odataType"] = this.odataType;
        data["serviceInstance"] = this.serviceInstance;
        return data;
    }
}

export interface IServiceProvisioningError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date and time at which the error occurred. */
    createdDateTime?: Date | undefined;
    /** Indicates whether the error has been attended to. */
    isResolved?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Qualified service instance (for example, 'SharePoint/Dublin') that published the service error information. */
    serviceInstance?: string | undefined;
}

export class GroupSetting extends Entity implements IGroupSetting {
    /** Display name of this group of settings, which comes from the associated template. */
    displayName?: string | undefined;
    /** Unique identifier for the tenant-level groupSettingTemplates object that's been customized for this group-level settings object. Read-only. */
    templateId?: string | undefined;
    /** Collection of name-value pairs corresponding to the name and defaultValue properties in the referenced groupSettingTemplates object. */
    values?: SettingValue[] | undefined;

    constructor(data?: IGroupSetting) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.templateId = _data["templateId"];
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(SettingValue.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): GroupSetting {
        data = typeof data === 'object' ? data : {};
        let result = new GroupSetting();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["templateId"] = this.templateId;
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IGroupSetting extends IEntity {
    /** Display name of this group of settings, which comes from the associated template. */
    displayName?: string | undefined;
    /** Unique identifier for the tenant-level groupSettingTemplates object that's been customized for this group-level settings object. Read-only. */
    templateId?: string | undefined;
    /** Collection of name-value pairs corresponding to the name and defaultValue properties in the referenced groupSettingTemplates object. */
    values?: SettingValue[] | undefined;
}

export class SettingValue implements ISettingValue {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Name of the setting (as defined by the groupSettingTemplate). */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Value of the setting. */
    value?: string | undefined;

    constructor(data?: ISettingValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.name = _data["name"];
            this.odataType = _data["odataType"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): SettingValue {
        data = typeof data === 'object' ? data : {};
        let result = new SettingValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        data["value"] = this.value;
        return data;
    }
}

export interface ISettingValue {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Name of the setting (as defined by the groupSettingTemplate). */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Value of the setting. */
    value?: string | undefined;
}

export class TeamGuestSettings implements ITeamGuestSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If set to true, guests can add and update channels. */
    allowCreateUpdateChannels?: boolean | undefined;
    /** If set to true, guests can delete channels. */
    allowDeleteChannels?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ITeamGuestSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowCreateUpdateChannels = _data["allowCreateUpdateChannels"];
            this.allowDeleteChannels = _data["allowDeleteChannels"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): TeamGuestSettings {
        data = typeof data === 'object' ? data : {};
        let result = new TeamGuestSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowCreateUpdateChannels"] = this.allowCreateUpdateChannels;
        data["allowDeleteChannels"] = this.allowDeleteChannels;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ITeamGuestSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If set to true, guests can add and update channels. */
    allowCreateUpdateChannels?: boolean | undefined;
    /** If set to true, guests can delete channels. */
    allowDeleteChannels?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class TeamMemberSettings implements ITeamMemberSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If set to true, members can add and remove apps. */
    allowAddRemoveApps?: boolean | undefined;
    /** If set to true, members can add and update private channels. */
    allowCreatePrivateChannels?: boolean | undefined;
    /** If set to true, members can add and update channels. */
    allowCreateUpdateChannels?: boolean | undefined;
    /** If set to true, members can add, update, and remove connectors. */
    allowCreateUpdateRemoveConnectors?: boolean | undefined;
    /** If set to true, members can add, update, and remove tabs. */
    allowCreateUpdateRemoveTabs?: boolean | undefined;
    /** If set to true, members can delete channels. */
    allowDeleteChannels?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ITeamMemberSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowAddRemoveApps = _data["allowAddRemoveApps"];
            this.allowCreatePrivateChannels = _data["allowCreatePrivateChannels"];
            this.allowCreateUpdateChannels = _data["allowCreateUpdateChannels"];
            this.allowCreateUpdateRemoveConnectors = _data["allowCreateUpdateRemoveConnectors"];
            this.allowCreateUpdateRemoveTabs = _data["allowCreateUpdateRemoveTabs"];
            this.allowDeleteChannels = _data["allowDeleteChannels"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): TeamMemberSettings {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMemberSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowAddRemoveApps"] = this.allowAddRemoveApps;
        data["allowCreatePrivateChannels"] = this.allowCreatePrivateChannels;
        data["allowCreateUpdateChannels"] = this.allowCreateUpdateChannels;
        data["allowCreateUpdateRemoveConnectors"] = this.allowCreateUpdateRemoveConnectors;
        data["allowCreateUpdateRemoveTabs"] = this.allowCreateUpdateRemoveTabs;
        data["allowDeleteChannels"] = this.allowDeleteChannels;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ITeamMemberSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If set to true, members can add and remove apps. */
    allowAddRemoveApps?: boolean | undefined;
    /** If set to true, members can add and update private channels. */
    allowCreatePrivateChannels?: boolean | undefined;
    /** If set to true, members can add and update channels. */
    allowCreateUpdateChannels?: boolean | undefined;
    /** If set to true, members can add, update, and remove connectors. */
    allowCreateUpdateRemoveConnectors?: boolean | undefined;
    /** If set to true, members can add, update, and remove tabs. */
    allowCreateUpdateRemoveTabs?: boolean | undefined;
    /** If set to true, members can delete channels. */
    allowDeleteChannels?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class TeamMessagingSettings implements ITeamMessagingSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If set to true, @channel mentions are allowed. */
    allowChannelMentions?: boolean | undefined;
    /** If set to true, owners can delete any message. */
    allowOwnerDeleteMessages?: boolean | undefined;
    /** If set to true, @team mentions are allowed. */
    allowTeamMentions?: boolean | undefined;
    /** If set to true, users can delete their messages. */
    allowUserDeleteMessages?: boolean | undefined;
    /** If set to true, users can edit their messages. */
    allowUserEditMessages?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ITeamMessagingSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowChannelMentions = _data["allowChannelMentions"];
            this.allowOwnerDeleteMessages = _data["allowOwnerDeleteMessages"];
            this.allowTeamMentions = _data["allowTeamMentions"];
            this.allowUserDeleteMessages = _data["allowUserDeleteMessages"];
            this.allowUserEditMessages = _data["allowUserEditMessages"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): TeamMessagingSettings {
        data = typeof data === 'object' ? data : {};
        let result = new TeamMessagingSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowChannelMentions"] = this.allowChannelMentions;
        data["allowOwnerDeleteMessages"] = this.allowOwnerDeleteMessages;
        data["allowTeamMentions"] = this.allowTeamMentions;
        data["allowUserDeleteMessages"] = this.allowUserDeleteMessages;
        data["allowUserEditMessages"] = this.allowUserEditMessages;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ITeamMessagingSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** If set to true, @channel mentions are allowed. */
    allowChannelMentions?: boolean | undefined;
    /** If set to true, owners can delete any message. */
    allowOwnerDeleteMessages?: boolean | undefined;
    /** If set to true, @team mentions are allowed. */
    allowTeamMentions?: boolean | undefined;
    /** If set to true, users can delete their messages. */
    allowUserDeleteMessages?: boolean | undefined;
    /** If set to true, users can edit their messages. */
    allowUserEditMessages?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class TeamsAsyncOperation extends Entity implements ITeamsAsyncOperation {
    /** Number of times the operation was attempted before being marked successful or failed. */
    attemptsCount?: number | undefined;
    /** Time when the operation was created. */
    createdDateTime?: Date | undefined;
    /** Any error that causes the async operation to fail. */
    error?: OperationError | undefined;
    /** Time when the async operation was last updated. */
    lastActionDateTime?: Date | undefined;
    /** The operationType property */
    operationType?: TeamsAsyncOperationType | undefined;
    /** The status property */
    status?: TeamsAsyncOperationStatus | undefined;
    /** The ID of the object that's created or modified as result of this async operation, typically a team. */
    targetResourceId?: string | undefined;
    /** The location of the object that's created or modified as result of this async operation. This URL should be treated as an opaque value and not parsed into its component paths. */
    targetResourceLocation?: string | undefined;

    constructor(data?: ITeamsAsyncOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.attemptsCount = _data["attemptsCount"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.error = _data["error"] ? OperationError.fromJS(_data["error"]) : <any>undefined;
            this.lastActionDateTime = _data["lastActionDateTime"] ? new Date(_data["lastActionDateTime"].toString()) : <any>undefined;
            this.operationType = _data["operationType"];
            this.status = _data["status"];
            this.targetResourceId = _data["targetResourceId"];
            this.targetResourceLocation = _data["targetResourceLocation"];
        }
    }

    static override fromJS(data: any): TeamsAsyncOperation {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsAsyncOperation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attemptsCount"] = this.attemptsCount;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["lastActionDateTime"] = this.lastActionDateTime ? this.lastActionDateTime.toISOString() : <any>undefined;
        data["operationType"] = this.operationType;
        data["status"] = this.status;
        data["targetResourceId"] = this.targetResourceId;
        data["targetResourceLocation"] = this.targetResourceLocation;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamsAsyncOperation extends IEntity {
    /** Number of times the operation was attempted before being marked successful or failed. */
    attemptsCount?: number | undefined;
    /** Time when the operation was created. */
    createdDateTime?: Date | undefined;
    /** Any error that causes the async operation to fail. */
    error?: OperationError | undefined;
    /** Time when the async operation was last updated. */
    lastActionDateTime?: Date | undefined;
    /** The operationType property */
    operationType?: TeamsAsyncOperationType | undefined;
    /** The status property */
    status?: TeamsAsyncOperationStatus | undefined;
    /** The ID of the object that's created or modified as result of this async operation, typically a team. */
    targetResourceId?: string | undefined;
    /** The location of the object that's created or modified as result of this async operation. This URL should be treated as an opaque value and not parsed into its component paths. */
    targetResourceLocation?: string | undefined;
}

export class OperationError implements IOperationError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Operation error code. */
    code?: string | undefined;
    /** Operation error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IOperationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.code = _data["code"];
            this.message = _data["message"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): OperationError {
        data = typeof data === 'object' ? data : {};
        let result = new OperationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["code"] = this.code;
        data["message"] = this.message;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IOperationError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Operation error code. */
    code?: string | undefined;
    /** Operation error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum TeamsAsyncOperationType {
    Invalid = 0,
    CloneTeam = 1,
    ArchiveTeam = 2,
    UnarchiveTeam = 3,
    CreateTeam = 4,
    UnknownFutureValue = 5,
    TeamifyGroup = 6,
    CreateChannel = 7,
    ArchiveChannel = 8,
    UnarchiveChannel = 9,
}

export enum TeamsAsyncOperationStatus {
    Invalid = 0,
    NotStarted = 1,
    InProgress = 2,
    Succeeded = 3,
    Failed = 4,
    UnknownFutureValue = 5,
}

export class Schedule extends Entity implements ISchedule {
    /** Indicates whether the schedule is enabled for the team. Required. */
    enabled?: boolean | undefined;
    /** The offer requests for shifts in the schedule. */
    offerShiftRequests?: OfferShiftRequest[] | undefined;
    /** Indicates whether offer shift requests are enabled for the schedule. */
    offerShiftRequestsEnabled?: boolean | undefined;
    /** The open shift requests in the schedule. */
    openShiftChangeRequests?: OpenShiftChangeRequest[] | undefined;
    /** The set of open shifts in a scheduling group in the schedule. */
    openShifts?: OpenShift[] | undefined;
    /** Indicates whether open shifts are enabled for the schedule. */
    openShiftsEnabled?: boolean | undefined;
    /** The status of the schedule provisioning. The possible values are notStarted, running, completed, failed. */
    provisionStatus?: OperationStatus | undefined;
    /** Additional information about why schedule provisioning failed. */
    provisionStatusCode?: string | undefined;
    /** The logical grouping of users in the schedule (usually by role). */
    schedulingGroups?: SchedulingGroup[] | undefined;
    /** The shifts in the schedule. */
    shifts?: Shift[] | undefined;
    /** The swap requests for shifts in the schedule. */
    swapShiftsChangeRequests?: SwapShiftsChangeRequest[] | undefined;
    /** Indicates whether swap shifts requests are enabled for the schedule. */
    swapShiftsRequestsEnabled?: boolean | undefined;
    /** Indicates whether time clock is enabled for the schedule. */
    timeClockEnabled?: boolean | undefined;
    /** The set of reasons for a time off in the schedule. */
    timeOffReasons?: TimeOffReason[] | undefined;
    /** The time off requests in the schedule. */
    timeOffRequests?: TimeOffRequest[] | undefined;
    /** Indicates whether time off requests are enabled for the schedule. */
    timeOffRequestsEnabled?: boolean | undefined;
    /** The instances of times off in the schedule. */
    timesOff?: TimeOff[] | undefined;
    /** Indicates the time zone of the schedule team using tz database format. Required. */
    timeZone?: string | undefined;
    /** The workforceIntegrationIds property */
    workforceIntegrationIds?: string[] | undefined;

    constructor(data?: ISchedule) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.enabled = _data["enabled"];
            if (Array.isArray(_data["offerShiftRequests"])) {
                this.offerShiftRequests = [] as any;
                for (let item of _data["offerShiftRequests"])
                    this.offerShiftRequests!.push(OfferShiftRequest.fromJS(item));
            }
            this.offerShiftRequestsEnabled = _data["offerShiftRequestsEnabled"];
            if (Array.isArray(_data["openShiftChangeRequests"])) {
                this.openShiftChangeRequests = [] as any;
                for (let item of _data["openShiftChangeRequests"])
                    this.openShiftChangeRequests!.push(OpenShiftChangeRequest.fromJS(item));
            }
            if (Array.isArray(_data["openShifts"])) {
                this.openShifts = [] as any;
                for (let item of _data["openShifts"])
                    this.openShifts!.push(OpenShift.fromJS(item));
            }
            this.openShiftsEnabled = _data["openShiftsEnabled"];
            this.provisionStatus = _data["provisionStatus"];
            this.provisionStatusCode = _data["provisionStatusCode"];
            if (Array.isArray(_data["schedulingGroups"])) {
                this.schedulingGroups = [] as any;
                for (let item of _data["schedulingGroups"])
                    this.schedulingGroups!.push(SchedulingGroup.fromJS(item));
            }
            if (Array.isArray(_data["shifts"])) {
                this.shifts = [] as any;
                for (let item of _data["shifts"])
                    this.shifts!.push(Shift.fromJS(item));
            }
            if (Array.isArray(_data["swapShiftsChangeRequests"])) {
                this.swapShiftsChangeRequests = [] as any;
                for (let item of _data["swapShiftsChangeRequests"])
                    this.swapShiftsChangeRequests!.push(SwapShiftsChangeRequest.fromJS(item));
            }
            this.swapShiftsRequestsEnabled = _data["swapShiftsRequestsEnabled"];
            this.timeClockEnabled = _data["timeClockEnabled"];
            if (Array.isArray(_data["timeOffReasons"])) {
                this.timeOffReasons = [] as any;
                for (let item of _data["timeOffReasons"])
                    this.timeOffReasons!.push(TimeOffReason.fromJS(item));
            }
            if (Array.isArray(_data["timeOffRequests"])) {
                this.timeOffRequests = [] as any;
                for (let item of _data["timeOffRequests"])
                    this.timeOffRequests!.push(TimeOffRequest.fromJS(item));
            }
            this.timeOffRequestsEnabled = _data["timeOffRequestsEnabled"];
            if (Array.isArray(_data["timesOff"])) {
                this.timesOff = [] as any;
                for (let item of _data["timesOff"])
                    this.timesOff!.push(TimeOff.fromJS(item));
            }
            this.timeZone = _data["timeZone"];
            if (Array.isArray(_data["workforceIntegrationIds"])) {
                this.workforceIntegrationIds = [] as any;
                for (let item of _data["workforceIntegrationIds"])
                    this.workforceIntegrationIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): Schedule {
        data = typeof data === 'object' ? data : {};
        let result = new Schedule();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enabled"] = this.enabled;
        if (Array.isArray(this.offerShiftRequests)) {
            data["offerShiftRequests"] = [];
            for (let item of this.offerShiftRequests)
                data["offerShiftRequests"].push(item.toJSON());
        }
        data["offerShiftRequestsEnabled"] = this.offerShiftRequestsEnabled;
        if (Array.isArray(this.openShiftChangeRequests)) {
            data["openShiftChangeRequests"] = [];
            for (let item of this.openShiftChangeRequests)
                data["openShiftChangeRequests"].push(item.toJSON());
        }
        if (Array.isArray(this.openShifts)) {
            data["openShifts"] = [];
            for (let item of this.openShifts)
                data["openShifts"].push(item.toJSON());
        }
        data["openShiftsEnabled"] = this.openShiftsEnabled;
        data["provisionStatus"] = this.provisionStatus;
        data["provisionStatusCode"] = this.provisionStatusCode;
        if (Array.isArray(this.schedulingGroups)) {
            data["schedulingGroups"] = [];
            for (let item of this.schedulingGroups)
                data["schedulingGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.shifts)) {
            data["shifts"] = [];
            for (let item of this.shifts)
                data["shifts"].push(item.toJSON());
        }
        if (Array.isArray(this.swapShiftsChangeRequests)) {
            data["swapShiftsChangeRequests"] = [];
            for (let item of this.swapShiftsChangeRequests)
                data["swapShiftsChangeRequests"].push(item.toJSON());
        }
        data["swapShiftsRequestsEnabled"] = this.swapShiftsRequestsEnabled;
        data["timeClockEnabled"] = this.timeClockEnabled;
        if (Array.isArray(this.timeOffReasons)) {
            data["timeOffReasons"] = [];
            for (let item of this.timeOffReasons)
                data["timeOffReasons"].push(item.toJSON());
        }
        if (Array.isArray(this.timeOffRequests)) {
            data["timeOffRequests"] = [];
            for (let item of this.timeOffRequests)
                data["timeOffRequests"].push(item.toJSON());
        }
        data["timeOffRequestsEnabled"] = this.timeOffRequestsEnabled;
        if (Array.isArray(this.timesOff)) {
            data["timesOff"] = [];
            for (let item of this.timesOff)
                data["timesOff"].push(item.toJSON());
        }
        data["timeZone"] = this.timeZone;
        if (Array.isArray(this.workforceIntegrationIds)) {
            data["workforceIntegrationIds"] = [];
            for (let item of this.workforceIntegrationIds)
                data["workforceIntegrationIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISchedule extends IEntity {
    /** Indicates whether the schedule is enabled for the team. Required. */
    enabled?: boolean | undefined;
    /** The offer requests for shifts in the schedule. */
    offerShiftRequests?: OfferShiftRequest[] | undefined;
    /** Indicates whether offer shift requests are enabled for the schedule. */
    offerShiftRequestsEnabled?: boolean | undefined;
    /** The open shift requests in the schedule. */
    openShiftChangeRequests?: OpenShiftChangeRequest[] | undefined;
    /** The set of open shifts in a scheduling group in the schedule. */
    openShifts?: OpenShift[] | undefined;
    /** Indicates whether open shifts are enabled for the schedule. */
    openShiftsEnabled?: boolean | undefined;
    /** The status of the schedule provisioning. The possible values are notStarted, running, completed, failed. */
    provisionStatus?: OperationStatus | undefined;
    /** Additional information about why schedule provisioning failed. */
    provisionStatusCode?: string | undefined;
    /** The logical grouping of users in the schedule (usually by role). */
    schedulingGroups?: SchedulingGroup[] | undefined;
    /** The shifts in the schedule. */
    shifts?: Shift[] | undefined;
    /** The swap requests for shifts in the schedule. */
    swapShiftsChangeRequests?: SwapShiftsChangeRequest[] | undefined;
    /** Indicates whether swap shifts requests are enabled for the schedule. */
    swapShiftsRequestsEnabled?: boolean | undefined;
    /** Indicates whether time clock is enabled for the schedule. */
    timeClockEnabled?: boolean | undefined;
    /** The set of reasons for a time off in the schedule. */
    timeOffReasons?: TimeOffReason[] | undefined;
    /** The time off requests in the schedule. */
    timeOffRequests?: TimeOffRequest[] | undefined;
    /** Indicates whether time off requests are enabled for the schedule. */
    timeOffRequestsEnabled?: boolean | undefined;
    /** The instances of times off in the schedule. */
    timesOff?: TimeOff[] | undefined;
    /** Indicates the time zone of the schedule team using tz database format. Required. */
    timeZone?: string | undefined;
    /** The workforceIntegrationIds property */
    workforceIntegrationIds?: string[] | undefined;
}

export class ChangeTrackedEntity extends Entity implements IChangeTrackedEntity {
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    createdDateTime?: Date | undefined;
    /** Identity of the person who last modified the entity. */
    lastModifiedBy?: IdentitySet | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastModifiedDateTime?: Date | undefined;

    constructor(data?: IChangeTrackedEntity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"] ? IdentitySet.fromJS(_data["lastModifiedBy"]) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): ChangeTrackedEntity {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeTrackedEntity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy ? this.lastModifiedBy.toJSON() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IChangeTrackedEntity extends IEntity {
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    createdDateTime?: Date | undefined;
    /** Identity of the person who last modified the entity. */
    lastModifiedBy?: IdentitySet | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    lastModifiedDateTime?: Date | undefined;
}

export class ScheduleChangeRequest extends ChangeTrackedEntity implements IScheduleChangeRequest {
    /** The assignedTo property */
    assignedTo?: ScheduleChangeRequestActor | undefined;
    /** The managerActionDateTime property */
    managerActionDateTime?: Date | undefined;
    /** The managerActionMessage property */
    managerActionMessage?: string | undefined;
    /** The managerUserId property */
    managerUserId?: string | undefined;
    /** The senderDateTime property */
    senderDateTime?: Date | undefined;
    /** The senderMessage property */
    senderMessage?: string | undefined;
    /** The senderUserId property */
    senderUserId?: string | undefined;
    /** The state property */
    state?: ScheduleChangeState | undefined;

    constructor(data?: IScheduleChangeRequest) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.assignedTo = _data["assignedTo"];
            this.managerActionDateTime = _data["managerActionDateTime"] ? new Date(_data["managerActionDateTime"].toString()) : <any>undefined;
            this.managerActionMessage = _data["managerActionMessage"];
            this.managerUserId = _data["managerUserId"];
            this.senderDateTime = _data["senderDateTime"] ? new Date(_data["senderDateTime"].toString()) : <any>undefined;
            this.senderMessage = _data["senderMessage"];
            this.senderUserId = _data["senderUserId"];
            this.state = _data["state"];
        }
    }

    static override fromJS(data: any): ScheduleChangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleChangeRequest();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assignedTo"] = this.assignedTo;
        data["managerActionDateTime"] = this.managerActionDateTime ? this.managerActionDateTime.toISOString() : <any>undefined;
        data["managerActionMessage"] = this.managerActionMessage;
        data["managerUserId"] = this.managerUserId;
        data["senderDateTime"] = this.senderDateTime ? this.senderDateTime.toISOString() : <any>undefined;
        data["senderMessage"] = this.senderMessage;
        data["senderUserId"] = this.senderUserId;
        data["state"] = this.state;
        super.toJSON(data);
        return data;
    }
}

export interface IScheduleChangeRequest extends IChangeTrackedEntity {
    /** The assignedTo property */
    assignedTo?: ScheduleChangeRequestActor | undefined;
    /** The managerActionDateTime property */
    managerActionDateTime?: Date | undefined;
    /** The managerActionMessage property */
    managerActionMessage?: string | undefined;
    /** The managerUserId property */
    managerUserId?: string | undefined;
    /** The senderDateTime property */
    senderDateTime?: Date | undefined;
    /** The senderMessage property */
    senderMessage?: string | undefined;
    /** The senderUserId property */
    senderUserId?: string | undefined;
    /** The state property */
    state?: ScheduleChangeState | undefined;
}

export class OfferShiftRequest extends ScheduleChangeRequest implements IOfferShiftRequest {
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    recipientActionDateTime?: Date | undefined;
    /** Custom message sent by recipient of the offer shift request. */
    recipientActionMessage?: string | undefined;
    /** User ID of the recipient of the offer shift request. */
    recipientUserId?: string | undefined;
    /** User ID of the sender of the offer shift request. */
    senderShiftId?: string | undefined;

    constructor(data?: IOfferShiftRequest) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.recipientActionDateTime = _data["recipientActionDateTime"] ? new Date(_data["recipientActionDateTime"].toString()) : <any>undefined;
            this.recipientActionMessage = _data["recipientActionMessage"];
            this.recipientUserId = _data["recipientUserId"];
            this.senderShiftId = _data["senderShiftId"];
        }
    }

    static override fromJS(data: any): OfferShiftRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OfferShiftRequest();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipientActionDateTime"] = this.recipientActionDateTime ? this.recipientActionDateTime.toISOString() : <any>undefined;
        data["recipientActionMessage"] = this.recipientActionMessage;
        data["recipientUserId"] = this.recipientUserId;
        data["senderShiftId"] = this.senderShiftId;
        super.toJSON(data);
        return data;
    }
}

export interface IOfferShiftRequest extends IScheduleChangeRequest {
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    recipientActionDateTime?: Date | undefined;
    /** Custom message sent by recipient of the offer shift request. */
    recipientActionMessage?: string | undefined;
    /** User ID of the recipient of the offer shift request. */
    recipientUserId?: string | undefined;
    /** User ID of the sender of the offer shift request. */
    senderShiftId?: string | undefined;
}

export enum ScheduleChangeRequestActor {
    Sender = 0,
    Recipient = 1,
    Manager = 2,
    System = 3,
    UnknownFutureValue = 4,
}

export enum ScheduleChangeState {
    Pending = 0,
    Approved = 1,
    Declined = 2,
    UnknownFutureValue = 3,
}

export class OpenShiftChangeRequest extends ScheduleChangeRequest implements IOpenShiftChangeRequest {
    /** ID for the open shift. */
    openShiftId?: string | undefined;

    constructor(data?: IOpenShiftChangeRequest) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.openShiftId = _data["openShiftId"];
        }
    }

    static override fromJS(data: any): OpenShiftChangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new OpenShiftChangeRequest();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["openShiftId"] = this.openShiftId;
        super.toJSON(data);
        return data;
    }
}

export interface IOpenShiftChangeRequest extends IScheduleChangeRequest {
    /** ID for the open shift. */
    openShiftId?: string | undefined;
}

export class OpenShift extends ChangeTrackedEntity implements IOpenShift {
    /** An unpublished open shift. */
    draftOpenShift?: OpenShiftItem | undefined;
    /** ID for the scheduling group that the open shift belongs to. */
    schedulingGroupId?: string | undefined;
    /** A published open shift. */
    sharedOpenShift?: OpenShiftItem | undefined;

    constructor(data?: IOpenShift) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftOpenShift = _data["draftOpenShift"] ? OpenShiftItem.fromJS(_data["draftOpenShift"]) : <any>undefined;
            this.schedulingGroupId = _data["schedulingGroupId"];
            this.sharedOpenShift = _data["sharedOpenShift"] ? OpenShiftItem.fromJS(_data["sharedOpenShift"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): OpenShift {
        data = typeof data === 'object' ? data : {};
        let result = new OpenShift();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftOpenShift"] = this.draftOpenShift ? this.draftOpenShift.toJSON() : <any>undefined;
        data["schedulingGroupId"] = this.schedulingGroupId;
        data["sharedOpenShift"] = this.sharedOpenShift ? this.sharedOpenShift.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IOpenShift extends IChangeTrackedEntity {
    /** An unpublished open shift. */
    draftOpenShift?: OpenShiftItem | undefined;
    /** ID for the scheduling group that the open shift belongs to. */
    schedulingGroupId?: string | undefined;
    /** A published open shift. */
    sharedOpenShift?: OpenShiftItem | undefined;
}

export class ScheduleEntity implements IScheduleEntity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The endDateTime property */
    endDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The startDateTime property */
    startDateTime?: Date | undefined;
    /** The theme property */
    theme?: ScheduleEntityTheme | undefined;

    constructor(data?: IScheduleEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
            this.theme = _data["theme"];
        }
    }

    static fromJS(data: any): ScheduleEntity {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleEntity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        data["theme"] = this.theme;
        return data;
    }
}

export interface IScheduleEntity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The endDateTime property */
    endDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The startDateTime property */
    startDateTime?: Date | undefined;
    /** The theme property */
    theme?: ScheduleEntityTheme | undefined;
}

export class ShiftItem extends ScheduleEntity implements IShiftItem {
    /** An incremental part of a shift which can cover details of when and where an employee is during their shift. For example, an assignment or a scheduled break or lunch. Required. */
    activities?: ShiftActivity[] | undefined;
    /** The shift label of the shiftItem. */
    displayName?: string | undefined;
    /** The shift notes for the shiftItem. */
    notes?: string | undefined;

    constructor(data?: IShiftItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["activities"])) {
                this.activities = [] as any;
                for (let item of _data["activities"])
                    this.activities!.push(ShiftActivity.fromJS(item));
            }
            this.displayName = _data["displayName"];
            this.notes = _data["notes"];
        }
    }

    static override fromJS(data: any): ShiftItem {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.activities)) {
            data["activities"] = [];
            for (let item of this.activities)
                data["activities"].push(item.toJSON());
        }
        data["displayName"] = this.displayName;
        data["notes"] = this.notes;
        super.toJSON(data);
        return data;
    }
}

export interface IShiftItem extends IScheduleEntity {
    /** An incremental part of a shift which can cover details of when and where an employee is during their shift. For example, an assignment or a scheduled break or lunch. Required. */
    activities?: ShiftActivity[] | undefined;
    /** The shift label of the shiftItem. */
    displayName?: string | undefined;
    /** The shift notes for the shiftItem. */
    notes?: string | undefined;
}

export class OpenShiftItem extends ShiftItem implements IOpenShiftItem {
    /** Count of the number of slots for the given open shift. */
    openSlotCount?: number | undefined;

    constructor(data?: IOpenShiftItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.openSlotCount = _data["openSlotCount"];
        }
    }

    static override fromJS(data: any): OpenShiftItem {
        data = typeof data === 'object' ? data : {};
        let result = new OpenShiftItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["openSlotCount"] = this.openSlotCount;
        super.toJSON(data);
        return data;
    }
}

export interface IOpenShiftItem extends IShiftItem {
    /** Count of the number of slots for the given open shift. */
    openSlotCount?: number | undefined;
}

export class ShiftActivity implements IShiftActivity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Customer defined code for the shiftActivity. Required. */
    code?: string | undefined;
    /** The name of the shiftActivity. Required. */
    displayName?: string | undefined;
    /** The end date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required. */
    endDateTime?: Date | undefined;
    /** Indicates whether the microsoft.graph.user should be paid for the activity during their shift. Required. */
    isPaid?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The start date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required. */
    startDateTime?: Date | undefined;
    /** The theme property */
    theme?: ScheduleEntityTheme | undefined;

    constructor(data?: IShiftActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.code = _data["code"];
            this.displayName = _data["displayName"];
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
            this.isPaid = _data["isPaid"];
            this.odataType = _data["odataType"];
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
            this.theme = _data["theme"];
        }
    }

    static fromJS(data: any): ShiftActivity {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        data["isPaid"] = this.isPaid;
        data["odataType"] = this.odataType;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        data["theme"] = this.theme;
        return data;
    }
}

export interface IShiftActivity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Customer defined code for the shiftActivity. Required. */
    code?: string | undefined;
    /** The name of the shiftActivity. Required. */
    displayName?: string | undefined;
    /** The end date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required. */
    endDateTime?: Date | undefined;
    /** Indicates whether the microsoft.graph.user should be paid for the activity during their shift. Required. */
    isPaid?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The start date and time for the shiftActivity. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Required. */
    startDateTime?: Date | undefined;
    /** The theme property */
    theme?: ScheduleEntityTheme | undefined;
}

export enum ScheduleEntityTheme {
    White = 0,
    Blue = 1,
    Green = 2,
    Purple = 3,
    Pink = 4,
    Yellow = 5,
    Gray = 6,
    DarkBlue = 7,
    DarkGreen = 8,
    DarkPurple = 9,
    DarkPink = 10,
    DarkYellow = 11,
    UnknownFutureValue = 12,
}

export class SchedulingGroup extends ChangeTrackedEntity implements ISchedulingGroup {
    /** The display name for the schedulingGroup. Required. */
    displayName?: string | undefined;
    /** Indicates whether the schedulingGroup can be used when creating new entities or updating existing ones. Required. */
    isActive?: boolean | undefined;
    /** The list of user IDs that are a member of the schedulingGroup. Required. */
    userIds?: string[] | undefined;

    constructor(data?: ISchedulingGroup) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.isActive = _data["isActive"];
            if (Array.isArray(_data["userIds"])) {
                this.userIds = [] as any;
                for (let item of _data["userIds"])
                    this.userIds!.push(item);
            }
        }
    }

    static override fromJS(data: any): SchedulingGroup {
        data = typeof data === 'object' ? data : {};
        let result = new SchedulingGroup();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["isActive"] = this.isActive;
        if (Array.isArray(this.userIds)) {
            data["userIds"] = [];
            for (let item of this.userIds)
                data["userIds"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface ISchedulingGroup extends IChangeTrackedEntity {
    /** The display name for the schedulingGroup. Required. */
    displayName?: string | undefined;
    /** Indicates whether the schedulingGroup can be used when creating new entities or updating existing ones. Required. */
    isActive?: boolean | undefined;
    /** The list of user IDs that are a member of the schedulingGroup. Required. */
    userIds?: string[] | undefined;
}

export class Shift extends ChangeTrackedEntity implements IShift {
    /** Draft changes in the shift. Draft changes are only visible to managers. The changes are visible to employees when they are shared, which copies the changes from the draftShift to the sharedShift property. */
    draftShift?: ShiftItem | undefined;
    /** ID of the scheduling group the shift is part of. Required. */
    schedulingGroupId?: string | undefined;
    /** The shared version of this shift that is viewable by both employees and managers. Updates to the sharedShift property send notifications to users in the Teams client. */
    sharedShift?: ShiftItem | undefined;
    /** ID of the user assigned to the shift. Required. */
    userId?: string | undefined;

    constructor(data?: IShift) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftShift = _data["draftShift"] ? ShiftItem.fromJS(_data["draftShift"]) : <any>undefined;
            this.schedulingGroupId = _data["schedulingGroupId"];
            this.sharedShift = _data["sharedShift"] ? ShiftItem.fromJS(_data["sharedShift"]) : <any>undefined;
            this.userId = _data["userId"];
        }
    }

    static override fromJS(data: any): Shift {
        data = typeof data === 'object' ? data : {};
        let result = new Shift();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftShift"] = this.draftShift ? this.draftShift.toJSON() : <any>undefined;
        data["schedulingGroupId"] = this.schedulingGroupId;
        data["sharedShift"] = this.sharedShift ? this.sharedShift.toJSON() : <any>undefined;
        data["userId"] = this.userId;
        super.toJSON(data);
        return data;
    }
}

export interface IShift extends IChangeTrackedEntity {
    /** Draft changes in the shift. Draft changes are only visible to managers. The changes are visible to employees when they are shared, which copies the changes from the draftShift to the sharedShift property. */
    draftShift?: ShiftItem | undefined;
    /** ID of the scheduling group the shift is part of. Required. */
    schedulingGroupId?: string | undefined;
    /** The shared version of this shift that is viewable by both employees and managers. Updates to the sharedShift property send notifications to users in the Teams client. */
    sharedShift?: ShiftItem | undefined;
    /** ID of the user assigned to the shift. Required. */
    userId?: string | undefined;
}

export class SwapShiftsChangeRequest extends OfferShiftRequest implements ISwapShiftsChangeRequest {
    /** ShiftId for the recipient user with whom the request is to swap. */
    recipientShiftId?: string | undefined;

    constructor(data?: ISwapShiftsChangeRequest) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.recipientShiftId = _data["recipientShiftId"];
        }
    }

    static override fromJS(data: any): SwapShiftsChangeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SwapShiftsChangeRequest();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["recipientShiftId"] = this.recipientShiftId;
        super.toJSON(data);
        return data;
    }
}

export interface ISwapShiftsChangeRequest extends IOfferShiftRequest {
    /** ShiftId for the recipient user with whom the request is to swap. */
    recipientShiftId?: string | undefined;
}

export class TimeOffReason extends ChangeTrackedEntity implements ITimeOffReason {
    /** The name of the timeOffReason. Required. */
    displayName?: string | undefined;
    /** Supported icon types are: none, car, calendar, running, plane, firstAid, doctor, notWorking, clock, juryDuty, globe, cup, phone, weather, umbrella, piggyBank, dog, cake, trafficCone, pin, sunny. Required. */
    iconType?: TimeOffReasonIconType | undefined;
    /** Indicates whether the timeOffReason can be used when creating new entities or updating existing ones. Required. */
    isActive?: boolean | undefined;

    constructor(data?: ITimeOffReason) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.iconType = _data["iconType"];
            this.isActive = _data["isActive"];
        }
    }

    static override fromJS(data: any): TimeOffReason {
        data = typeof data === 'object' ? data : {};
        let result = new TimeOffReason();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["iconType"] = this.iconType;
        data["isActive"] = this.isActive;
        super.toJSON(data);
        return data;
    }
}

export interface ITimeOffReason extends IChangeTrackedEntity {
    /** The name of the timeOffReason. Required. */
    displayName?: string | undefined;
    /** Supported icon types are: none, car, calendar, running, plane, firstAid, doctor, notWorking, clock, juryDuty, globe, cup, phone, weather, umbrella, piggyBank, dog, cake, trafficCone, pin, sunny. Required. */
    iconType?: TimeOffReasonIconType | undefined;
    /** Indicates whether the timeOffReason can be used when creating new entities or updating existing ones. Required. */
    isActive?: boolean | undefined;
}

export enum TimeOffReasonIconType {
    None = 0,
    Car = 1,
    Calendar = 2,
    Running = 3,
    Plane = 4,
    FirstAid = 5,
    Doctor = 6,
    NotWorking = 7,
    Clock = 8,
    JuryDuty = 9,
    Globe = 10,
    Cup = 11,
    Phone = 12,
    Weather = 13,
    Umbrella = 14,
    PiggyBank = 15,
    Dog = 16,
    Cake = 17,
    TrafficCone = 18,
    Pin = 19,
    Sunny = 20,
    UnknownFutureValue = 21,
}

export class TimeOffRequest extends ScheduleChangeRequest implements ITimeOffRequest {
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    endDateTime?: Date | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    startDateTime?: Date | undefined;
    /** The reason for the time off. */
    timeOffReasonId?: string | undefined;

    constructor(data?: ITimeOffRequest) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
            this.timeOffReasonId = _data["timeOffReasonId"];
        }
    }

    static override fromJS(data: any): TimeOffRequest {
        data = typeof data === 'object' ? data : {};
        let result = new TimeOffRequest();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        data["timeOffReasonId"] = this.timeOffReasonId;
        super.toJSON(data);
        return data;
    }
}

export interface ITimeOffRequest extends IScheduleChangeRequest {
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    endDateTime?: Date | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z */
    startDateTime?: Date | undefined;
    /** The reason for the time off. */
    timeOffReasonId?: string | undefined;
}

export class TimeOff extends ChangeTrackedEntity implements ITimeOff {
    /** The draft version of this timeOff item that is viewable by managers. It must be shared before it is visible to team members. Required. */
    draftTimeOff?: TimeOffItem | undefined;
    /** The shared version of this timeOff that is viewable by both employees and managers. Updates to the sharedTimeOff property send notifications to users in the Teams client. Required. */
    sharedTimeOff?: TimeOffItem | undefined;
    /** ID of the user assigned to the timeOff. Required. */
    userId?: string | undefined;

    constructor(data?: ITimeOff) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.draftTimeOff = _data["draftTimeOff"] ? TimeOffItem.fromJS(_data["draftTimeOff"]) : <any>undefined;
            this.sharedTimeOff = _data["sharedTimeOff"] ? TimeOffItem.fromJS(_data["sharedTimeOff"]) : <any>undefined;
            this.userId = _data["userId"];
        }
    }

    static override fromJS(data: any): TimeOff {
        data = typeof data === 'object' ? data : {};
        let result = new TimeOff();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["draftTimeOff"] = this.draftTimeOff ? this.draftTimeOff.toJSON() : <any>undefined;
        data["sharedTimeOff"] = this.sharedTimeOff ? this.sharedTimeOff.toJSON() : <any>undefined;
        data["userId"] = this.userId;
        super.toJSON(data);
        return data;
    }
}

export interface ITimeOff extends IChangeTrackedEntity {
    /** The draft version of this timeOff item that is viewable by managers. It must be shared before it is visible to team members. Required. */
    draftTimeOff?: TimeOffItem | undefined;
    /** The shared version of this timeOff that is viewable by both employees and managers. Updates to the sharedTimeOff property send notifications to users in the Teams client. Required. */
    sharedTimeOff?: TimeOffItem | undefined;
    /** ID of the user assigned to the timeOff. Required. */
    userId?: string | undefined;
}

export class TimeOffItem extends ScheduleEntity implements ITimeOffItem {
    /** ID of the timeOffReason for this timeOffItem. Required. */
    timeOffReasonId?: string | undefined;

    constructor(data?: ITimeOffItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.timeOffReasonId = _data["timeOffReasonId"];
        }
    }

    static override fromJS(data: any): TimeOffItem {
        data = typeof data === 'object' ? data : {};
        let result = new TimeOffItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timeOffReasonId"] = this.timeOffReasonId;
        super.toJSON(data);
        return data;
    }
}

export interface ITimeOffItem extends IScheduleEntity {
    /** ID of the timeOffReason for this timeOffItem. Required. */
    timeOffReasonId?: string | undefined;
}

export enum TeamSpecialization {
    None = 0,
    EducationStandard = 1,
    EducationClass = 2,
    EducationProfessionalLearningCommunity = 3,
    EducationStaff = 4,
    HealthcareStandard = 5,
    HealthcareCareCoordination = 6,
    UnknownFutureValue = 7,
}

export class TeamSummary implements ITeamSummary {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Count of guests in a team. */
    guestsCount?: number | undefined;
    /** Count of members in a team. */
    membersCount?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Count of owners in a team. */
    ownersCount?: number | undefined;

    constructor(data?: ITeamSummary) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.guestsCount = _data["guestsCount"];
            this.membersCount = _data["membersCount"];
            this.odataType = _data["odataType"];
            this.ownersCount = _data["ownersCount"];
        }
    }

    static fromJS(data: any): TeamSummary {
        data = typeof data === 'object' ? data : {};
        let result = new TeamSummary();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["guestsCount"] = this.guestsCount;
        data["membersCount"] = this.membersCount;
        data["odataType"] = this.odataType;
        data["ownersCount"] = this.ownersCount;
        return data;
    }
}

export interface ITeamSummary {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Count of guests in a team. */
    guestsCount?: number | undefined;
    /** Count of members in a team. */
    membersCount?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Count of owners in a team. */
    ownersCount?: number | undefined;
}

export class TeamworkTag extends Entity implements ITeamworkTag {
    /** The description of the tag as it appears to the user in Microsoft Teams. A teamworkTag can't have more than 200 teamworkTagMembers. */
    description?: string | undefined;
    /** The name of the tag as it appears to the user in Microsoft Teams. */
    displayName?: string | undefined;
    /** The number of users assigned to the tag. */
    memberCount?: number | undefined;
    /** Users assigned to the tag. */
    members?: TeamworkTagMember[] | undefined;
    /** The type of the tag. Default is standard. */
    tagType?: TeamworkTagType | undefined;
    /** ID of the team in which the tag is defined. */
    teamId?: string | undefined;

    constructor(data?: ITeamworkTag) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.description = _data["description"];
            this.displayName = _data["displayName"];
            this.memberCount = _data["memberCount"];
            if (Array.isArray(_data["members"])) {
                this.members = [] as any;
                for (let item of _data["members"])
                    this.members!.push(TeamworkTagMember.fromJS(item));
            }
            this.tagType = _data["tagType"];
            this.teamId = _data["teamId"];
        }
    }

    static override fromJS(data: any): TeamworkTag {
        data = typeof data === 'object' ? data : {};
        let result = new TeamworkTag();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["memberCount"] = this.memberCount;
        if (Array.isArray(this.members)) {
            data["members"] = [];
            for (let item of this.members)
                data["members"].push(item.toJSON());
        }
        data["tagType"] = this.tagType;
        data["teamId"] = this.teamId;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamworkTag extends IEntity {
    /** The description of the tag as it appears to the user in Microsoft Teams. A teamworkTag can't have more than 200 teamworkTagMembers. */
    description?: string | undefined;
    /** The name of the tag as it appears to the user in Microsoft Teams. */
    displayName?: string | undefined;
    /** The number of users assigned to the tag. */
    memberCount?: number | undefined;
    /** Users assigned to the tag. */
    members?: TeamworkTagMember[] | undefined;
    /** The type of the tag. Default is standard. */
    tagType?: TeamworkTagType | undefined;
    /** ID of the team in which the tag is defined. */
    teamId?: string | undefined;
}

export class TeamworkTagMember extends Entity implements ITeamworkTagMember {
    /** The member's display name. */
    displayName?: string | undefined;
    /** The ID of the tenant that the tag member is a part of. */
    tenantId?: string | undefined;
    /** The user ID of the member. */
    userId?: string | undefined;

    constructor(data?: ITeamworkTagMember) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.tenantId = _data["tenantId"];
            this.userId = _data["userId"];
        }
    }

    static override fromJS(data: any): TeamworkTagMember {
        data = typeof data === 'object' ? data : {};
        let result = new TeamworkTagMember();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        super.toJSON(data);
        return data;
    }
}

export interface ITeamworkTagMember extends IEntity {
    /** The member's display name. */
    displayName?: string | undefined;
    /** The ID of the tenant that the tag member is a part of. */
    tenantId?: string | undefined;
    /** The user ID of the member. */
    userId?: string | undefined;
}

export enum TeamworkTagType {
    Standard = 0,
    UnknownFutureValue = 1,
}

export class TeamsTemplate extends Entity implements ITeamsTemplate {

    constructor(data?: ITeamsTemplate) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): TeamsTemplate {
        data = typeof data === 'object' ? data : {};
        let result = new TeamsTemplate();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface ITeamsTemplate extends IEntity {
}

export enum TeamVisibilityType {
    Private = 0,
    Public = 1,
    HiddenMembership = 2,
    UnknownFutureValue = 3,
}

export class LicenseAssignmentState implements ILicenseAssignmentState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The assignedByGroup property */
    assignedByGroup?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The disabledPlans property */
    disabledPlans?: (string | undefined)[] | undefined;
    /** The error property */
    error?: string | undefined;
    /** The lastUpdatedDateTime property */
    lastUpdatedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The skuId property */
    skuId?: string | undefined;
    /** The state property */
    state?: string | undefined;

    constructor(data?: ILicenseAssignmentState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.assignedByGroup = _data["assignedByGroup"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            if (Array.isArray(_data["disabledPlans"])) {
                this.disabledPlans = [] as any;
                for (let item of _data["disabledPlans"])
                    this.disabledPlans!.push(item);
            }
            this.error = _data["error"];
            this.lastUpdatedDateTime = _data["lastUpdatedDateTime"] ? new Date(_data["lastUpdatedDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
            this.skuId = _data["skuId"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): LicenseAssignmentState {
        data = typeof data === 'object' ? data : {};
        let result = new LicenseAssignmentState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["assignedByGroup"] = this.assignedByGroup;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        if (Array.isArray(this.disabledPlans)) {
            data["disabledPlans"] = [];
            for (let item of this.disabledPlans)
                data["disabledPlans"].push(item);
        }
        data["error"] = this.error;
        data["lastUpdatedDateTime"] = this.lastUpdatedDateTime ? this.lastUpdatedDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        data["skuId"] = this.skuId;
        data["state"] = this.state;
        return data;
    }
}

export interface ILicenseAssignmentState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The assignedByGroup property */
    assignedByGroup?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The disabledPlans property */
    disabledPlans?: (string | undefined)[] | undefined;
    /** The error property */
    error?: string | undefined;
    /** The lastUpdatedDateTime property */
    lastUpdatedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The skuId property */
    skuId?: string | undefined;
    /** The state property */
    state?: string | undefined;
}

export class LicenseDetails extends Entity implements ILicenseDetails {
    /** Information about the service plans assigned with the license. Read-only. Not nullable. */
    servicePlans?: ServicePlanInfo[] | undefined;
    /** Unique identifier (GUID) for the service SKU. Equal to the skuId property on the related subscribedSku object. Read-only. */
    skuId?: string | undefined;
    /** Unique SKU display name. Equal to the skuPartNumber on the related subscribedSku object; for example, AAD_Premium. Read-only. */
    skuPartNumber?: string | undefined;

    constructor(data?: ILicenseDetails) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["servicePlans"])) {
                this.servicePlans = [] as any;
                for (let item of _data["servicePlans"])
                    this.servicePlans!.push(ServicePlanInfo.fromJS(item));
            }
            this.skuId = _data["skuId"];
            this.skuPartNumber = _data["skuPartNumber"];
        }
    }

    static override fromJS(data: any): LicenseDetails {
        data = typeof data === 'object' ? data : {};
        let result = new LicenseDetails();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.servicePlans)) {
            data["servicePlans"] = [];
            for (let item of this.servicePlans)
                data["servicePlans"].push(item.toJSON());
        }
        data["skuId"] = this.skuId;
        data["skuPartNumber"] = this.skuPartNumber;
        super.toJSON(data);
        return data;
    }
}

export interface ILicenseDetails extends IEntity {
    /** Information about the service plans assigned with the license. Read-only. Not nullable. */
    servicePlans?: ServicePlanInfo[] | undefined;
    /** Unique identifier (GUID) for the service SKU. Equal to the skuId property on the related subscribedSku object. Read-only. */
    skuId?: string | undefined;
    /** Unique SKU display name. Equal to the skuPartNumber on the related subscribedSku object; for example, AAD_Premium. Read-only. */
    skuPartNumber?: string | undefined;
}

export class ServicePlanInfo implements IServicePlanInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The object the service plan can be assigned to. The possible values are:User - service plan can be assigned to individual users.Company - service plan can be assigned to the entire tenant. */
    appliesTo?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The provisioning status of the service plan. The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant. */
    provisioningStatus?: string | undefined;
    /** The unique identifier of the service plan. */
    servicePlanId?: string | undefined;
    /** The name of the service plan. */
    servicePlanName?: string | undefined;

    constructor(data?: IServicePlanInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.appliesTo = _data["appliesTo"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.provisioningStatus = _data["provisioningStatus"];
            this.servicePlanId = _data["servicePlanId"];
            this.servicePlanName = _data["servicePlanName"];
        }
    }

    static fromJS(data: any): ServicePlanInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePlanInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["appliesTo"] = this.appliesTo;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["provisioningStatus"] = this.provisioningStatus;
        data["servicePlanId"] = this.servicePlanId;
        data["servicePlanName"] = this.servicePlanName;
        return data;
    }
}

export interface IServicePlanInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The object the service plan can be assigned to. The possible values are:User - service plan can be assigned to individual users.Company - service plan can be assigned to the entire tenant. */
    appliesTo?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The provisioning status of the service plan. The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant. */
    provisioningStatus?: string | undefined;
    /** The unique identifier of the service plan. */
    servicePlanId?: string | undefined;
    /** The name of the service plan. */
    servicePlanName?: string | undefined;
}

export class MailboxSettings implements IMailboxSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Folder ID of an archive folder for the user. */
    archiveFolder?: string | undefined;
    /** Configuration settings to automatically notify the sender of an incoming email with a message from the signed-in user. */
    automaticRepliesSetting?: AutomaticRepliesSetting | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date format for the user's mailbox. */
    dateFormat?: string | undefined;
    /** If the user has a calendar delegate, this specifies whether the delegate, mailbox owner, or both receive meeting messages and meeting responses. Possible values are: sendToDelegateAndInformationToPrincipal, sendToDelegateAndPrincipal, sendToDelegateOnly. */
    delegateMeetingMessageDeliveryOptions?: DelegateMeetingMessageDeliveryOptions | undefined;
    /** The locale information for the user, including the preferred language and country/region. */
    language?: LocaleInfo | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The time format for the user's mailbox. */
    timeFormat?: string | undefined;
    /** The default time zone for the user's mailbox. */
    timeZone?: string | undefined;
    /** The purpose of the mailbox. Differentiates a mailbox for a single user from a shared mailbox and equipment mailbox in Exchange Online. Possible values are: user, linked, shared, room, equipment, others, unknownFutureValue. Read-only. */
    userPurpose?: UserPurpose | undefined;
    /** The days of the week and hours in a specific time zone that the user works. */
    workingHours?: WorkingHours | undefined;

    constructor(data?: IMailboxSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.archiveFolder = _data["archiveFolder"];
            this.automaticRepliesSetting = _data["automaticRepliesSetting"] ? AutomaticRepliesSetting.fromJS(_data["automaticRepliesSetting"]) : <any>undefined;
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.dateFormat = _data["dateFormat"];
            this.delegateMeetingMessageDeliveryOptions = _data["delegateMeetingMessageDeliveryOptions"];
            this.language = _data["language"] ? LocaleInfo.fromJS(_data["language"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.timeFormat = _data["timeFormat"];
            this.timeZone = _data["timeZone"];
            this.userPurpose = _data["userPurpose"];
            this.workingHours = _data["workingHours"] ? WorkingHours.fromJS(_data["workingHours"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MailboxSettings {
        data = typeof data === 'object' ? data : {};
        let result = new MailboxSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["archiveFolder"] = this.archiveFolder;
        data["automaticRepliesSetting"] = this.automaticRepliesSetting ? this.automaticRepliesSetting.toJSON() : <any>undefined;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["dateFormat"] = this.dateFormat;
        data["delegateMeetingMessageDeliveryOptions"] = this.delegateMeetingMessageDeliveryOptions;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["timeFormat"] = this.timeFormat;
        data["timeZone"] = this.timeZone;
        data["userPurpose"] = this.userPurpose;
        data["workingHours"] = this.workingHours ? this.workingHours.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMailboxSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Folder ID of an archive folder for the user. */
    archiveFolder?: string | undefined;
    /** Configuration settings to automatically notify the sender of an incoming email with a message from the signed-in user. */
    automaticRepliesSetting?: AutomaticRepliesSetting | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date format for the user's mailbox. */
    dateFormat?: string | undefined;
    /** If the user has a calendar delegate, this specifies whether the delegate, mailbox owner, or both receive meeting messages and meeting responses. Possible values are: sendToDelegateAndInformationToPrincipal, sendToDelegateAndPrincipal, sendToDelegateOnly. */
    delegateMeetingMessageDeliveryOptions?: DelegateMeetingMessageDeliveryOptions | undefined;
    /** The locale information for the user, including the preferred language and country/region. */
    language?: LocaleInfo | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The time format for the user's mailbox. */
    timeFormat?: string | undefined;
    /** The default time zone for the user's mailbox. */
    timeZone?: string | undefined;
    /** The purpose of the mailbox. Differentiates a mailbox for a single user from a shared mailbox and equipment mailbox in Exchange Online. Possible values are: user, linked, shared, room, equipment, others, unknownFutureValue. Read-only. */
    userPurpose?: UserPurpose | undefined;
    /** The days of the week and hours in a specific time zone that the user works. */
    workingHours?: WorkingHours | undefined;
}

export class AutomaticRepliesSetting implements IAutomaticRepliesSetting {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The set of audience external to the signed-in user's organization who will receive the ExternalReplyMessage, if Status is AlwaysEnabled or Scheduled. The possible values are: none, contactsOnly, all. */
    externalAudience?: ExternalAudienceScope | undefined;
    /** The automatic reply to send to the specified external audience, if Status is AlwaysEnabled or Scheduled. */
    externalReplyMessage?: string | undefined;
    /** The automatic reply to send to the audience internal to the signed-in user's organization, if Status is AlwaysEnabled or Scheduled. */
    internalReplyMessage?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The date and time that automatic replies are set to end, if Status is set to Scheduled. */
    scheduledEndDateTime?: DateTimeTimeZone | undefined;
    /** The date and time that automatic replies are set to begin, if Status is set to Scheduled. */
    scheduledStartDateTime?: DateTimeTimeZone | undefined;
    /** Configurations status for automatic replies. The possible values are: disabled, alwaysEnabled, scheduled. */
    status?: AutomaticRepliesStatus | undefined;

    constructor(data?: IAutomaticRepliesSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.externalAudience = _data["externalAudience"];
            this.externalReplyMessage = _data["externalReplyMessage"];
            this.internalReplyMessage = _data["internalReplyMessage"];
            this.odataType = _data["odataType"];
            this.scheduledEndDateTime = _data["scheduledEndDateTime"] ? DateTimeTimeZone.fromJS(_data["scheduledEndDateTime"]) : <any>undefined;
            this.scheduledStartDateTime = _data["scheduledStartDateTime"] ? DateTimeTimeZone.fromJS(_data["scheduledStartDateTime"]) : <any>undefined;
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): AutomaticRepliesSetting {
        data = typeof data === 'object' ? data : {};
        let result = new AutomaticRepliesSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["externalAudience"] = this.externalAudience;
        data["externalReplyMessage"] = this.externalReplyMessage;
        data["internalReplyMessage"] = this.internalReplyMessage;
        data["odataType"] = this.odataType;
        data["scheduledEndDateTime"] = this.scheduledEndDateTime ? this.scheduledEndDateTime.toJSON() : <any>undefined;
        data["scheduledStartDateTime"] = this.scheduledStartDateTime ? this.scheduledStartDateTime.toJSON() : <any>undefined;
        data["status"] = this.status;
        return data;
    }
}

export interface IAutomaticRepliesSetting {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The set of audience external to the signed-in user's organization who will receive the ExternalReplyMessage, if Status is AlwaysEnabled or Scheduled. The possible values are: none, contactsOnly, all. */
    externalAudience?: ExternalAudienceScope | undefined;
    /** The automatic reply to send to the specified external audience, if Status is AlwaysEnabled or Scheduled. */
    externalReplyMessage?: string | undefined;
    /** The automatic reply to send to the audience internal to the signed-in user's organization, if Status is AlwaysEnabled or Scheduled. */
    internalReplyMessage?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The date and time that automatic replies are set to end, if Status is set to Scheduled. */
    scheduledEndDateTime?: DateTimeTimeZone | undefined;
    /** The date and time that automatic replies are set to begin, if Status is set to Scheduled. */
    scheduledStartDateTime?: DateTimeTimeZone | undefined;
    /** Configurations status for automatic replies. The possible values are: disabled, alwaysEnabled, scheduled. */
    status?: AutomaticRepliesStatus | undefined;
}

export enum ExternalAudienceScope {
    None = 0,
    ContactsOnly = 1,
    All = 2,
}

export enum AutomaticRepliesStatus {
    Disabled = 0,
    AlwaysEnabled = 1,
    Scheduled = 2,
}

export enum DelegateMeetingMessageDeliveryOptions {
    SendToDelegateAndInformationToPrincipal = 0,
    SendToDelegateAndPrincipal = 1,
    SendToDelegateOnly = 2,
}

export class LocaleInfo implements ILocaleInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A name representing the user's locale in natural language, for example, 'English (United States)'. */
    displayName?: string | undefined;
    /** A locale representation for the user, which includes the user's preferred language and country/region. For example, 'en-us'. The language component follows 2-letter codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in ISO 3166-1 alpha-2. */
    locale?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ILocaleInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.locale = _data["locale"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): LocaleInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LocaleInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["locale"] = this.locale;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ILocaleInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A name representing the user's locale in natural language, for example, 'English (United States)'. */
    displayName?: string | undefined;
    /** A locale representation for the user, which includes the user's preferred language and country/region. For example, 'en-us'. The language component follows 2-letter codes as defined in ISO 639-1, and the country component follows 2-letter codes as defined in ISO 3166-1 alpha-2. */
    locale?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum UserPurpose {
    User = 0,
    Linked = 1,
    Shared = 2,
    Room = 3,
    Equipment = 4,
    Others = 5,
    UnknownFutureValue = 6,
}

export class WorkingHours implements IWorkingHours {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The days of the week on which the user works. */
    daysOfWeek?: (DayOfWeekObject | undefined)[] | undefined;
    /** The time of the day that the user stops working. */
    endTime?: Time | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The time of the day that the user starts working. */
    startTime?: Time | undefined;
    /** The time zone to which the working hours apply. */
    timeZone?: TimeZoneBase | undefined;

    constructor(data?: IWorkingHours) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            if (Array.isArray(_data["daysOfWeek"])) {
                this.daysOfWeek = [] as any;
                for (let item of _data["daysOfWeek"])
                    this.daysOfWeek!.push(item);
            }
            this.endTime = _data["endTime"] ? Time.fromJS(_data["endTime"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.startTime = _data["startTime"] ? Time.fromJS(_data["startTime"]) : <any>undefined;
            this.timeZone = _data["timeZone"] ? TimeZoneBase.fromJS(_data["timeZone"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkingHours {
        data = typeof data === 'object' ? data : {};
        let result = new WorkingHours();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        if (Array.isArray(this.daysOfWeek)) {
            data["daysOfWeek"] = [];
            for (let item of this.daysOfWeek)
                data["daysOfWeek"].push(item);
        }
        data["endTime"] = this.endTime ? this.endTime.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["startTime"] = this.startTime ? this.startTime.toJSON() : <any>undefined;
        data["timeZone"] = this.timeZone ? this.timeZone.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkingHours {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The days of the week on which the user works. */
    daysOfWeek?: (DayOfWeekObject | undefined)[] | undefined;
    /** The time of the day that the user stops working. */
    endTime?: Time | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The time of the day that the user starts working. */
    startTime?: Time | undefined;
    /** The time zone to which the working hours apply. */
    timeZone?: TimeZoneBase | undefined;
}

/** Model to represent only the date component of a DateTime */
export class Time implements ITime {
    /** The DateTime representation of the class */
    dateTime?: Date;
    /** The hour. */
    hour?: number;
    /** The minute. */
    minute?: number;
    /** The second. */
    second?: number;

    constructor(data?: ITime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dateTime = _data["dateTime"] ? new Date(_data["dateTime"].toString()) : <any>undefined;
            this.hour = _data["hour"];
            this.minute = _data["minute"];
            this.second = _data["second"];
        }
    }

    static fromJS(data: any): Time {
        data = typeof data === 'object' ? data : {};
        let result = new Time();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        data["hour"] = this.hour;
        data["minute"] = this.minute;
        data["second"] = this.second;
        return data;
    }
}

/** Model to represent only the date component of a DateTime */
export interface ITime {
    /** The DateTime representation of the class */
    dateTime?: Date;
    /** The hour. */
    hour?: number;
    /** The minute. */
    minute?: number;
    /** The second. */
    second?: number;
}

export class TimeZoneBase implements ITimeZoneBase {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The name of a time zone. It can be a standard time zone name such as 'Hawaii-Aleutian Standard Time', or 'Customized Time Zone' for a custom time zone. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ITimeZoneBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.name = _data["name"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): TimeZoneBase {
        data = typeof data === 'object' ? data : {};
        let result = new TimeZoneBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ITimeZoneBase {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The name of a time zone. It can be a standard time zone name such as 'Hawaii-Aleutian Standard Time', or 'Customized Time Zone' for a custom time zone. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class MailFolder extends Entity implements IMailFolder {
    /** The number of immediate child mailFolders in the current mailFolder. */
    childFolderCount?: number | undefined;
    /** The collection of child folders in the mailFolder. */
    childFolders?: MailFolder[] | undefined;
    /** The mailFolder's display name. */
    displayName?: string | undefined;
    /** Indicates whether the mailFolder is hidden. This property can be set only when creating the folder. Find more information in Hidden mail folders. */
    isHidden?: boolean | undefined;
    /** The collection of rules that apply to the user's Inbox folder. */
    messageRules?: MessageRule[] | undefined;
    /** The collection of messages in the mailFolder. */
    messages?: Message[] | undefined;
    /** The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The unique identifier for the mailFolder's parent mailFolder. */
    parentFolderId?: string | undefined;
    /** The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
    /** The number of items in the mailFolder. */
    totalItemCount?: number | undefined;
    /** The number of items in the mailFolder marked as unread. */
    unreadItemCount?: number | undefined;

    constructor(data?: IMailFolder) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.childFolderCount = _data["childFolderCount"];
            if (Array.isArray(_data["childFolders"])) {
                this.childFolders = [] as any;
                for (let item of _data["childFolders"])
                    this.childFolders!.push(MailFolder.fromJS(item));
            }
            this.displayName = _data["displayName"];
            this.isHidden = _data["isHidden"];
            if (Array.isArray(_data["messageRules"])) {
                this.messageRules = [] as any;
                for (let item of _data["messageRules"])
                    this.messageRules!.push(MessageRule.fromJS(item));
            }
            if (Array.isArray(_data["messages"])) {
                this.messages = [] as any;
                for (let item of _data["messages"])
                    this.messages!.push(Message.fromJS(item));
            }
            if (Array.isArray(_data["multiValueExtendedProperties"])) {
                this.multiValueExtendedProperties = [] as any;
                for (let item of _data["multiValueExtendedProperties"])
                    this.multiValueExtendedProperties!.push(MultiValueLegacyExtendedProperty.fromJS(item));
            }
            this.parentFolderId = _data["parentFolderId"];
            if (Array.isArray(_data["singleValueExtendedProperties"])) {
                this.singleValueExtendedProperties = [] as any;
                for (let item of _data["singleValueExtendedProperties"])
                    this.singleValueExtendedProperties!.push(SingleValueLegacyExtendedProperty.fromJS(item));
            }
            this.totalItemCount = _data["totalItemCount"];
            this.unreadItemCount = _data["unreadItemCount"];
        }
    }

    static override fromJS(data: any): MailFolder {
        data = typeof data === 'object' ? data : {};
        let result = new MailFolder();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["childFolderCount"] = this.childFolderCount;
        if (Array.isArray(this.childFolders)) {
            data["childFolders"] = [];
            for (let item of this.childFolders)
                data["childFolders"].push(item.toJSON());
        }
        data["displayName"] = this.displayName;
        data["isHidden"] = this.isHidden;
        if (Array.isArray(this.messageRules)) {
            data["messageRules"] = [];
            for (let item of this.messageRules)
                data["messageRules"].push(item.toJSON());
        }
        if (Array.isArray(this.messages)) {
            data["messages"] = [];
            for (let item of this.messages)
                data["messages"].push(item.toJSON());
        }
        if (Array.isArray(this.multiValueExtendedProperties)) {
            data["multiValueExtendedProperties"] = [];
            for (let item of this.multiValueExtendedProperties)
                data["multiValueExtendedProperties"].push(item.toJSON());
        }
        data["parentFolderId"] = this.parentFolderId;
        if (Array.isArray(this.singleValueExtendedProperties)) {
            data["singleValueExtendedProperties"] = [];
            for (let item of this.singleValueExtendedProperties)
                data["singleValueExtendedProperties"].push(item.toJSON());
        }
        data["totalItemCount"] = this.totalItemCount;
        data["unreadItemCount"] = this.unreadItemCount;
        super.toJSON(data);
        return data;
    }
}

export interface IMailFolder extends IEntity {
    /** The number of immediate child mailFolders in the current mailFolder. */
    childFolderCount?: number | undefined;
    /** The collection of child folders in the mailFolder. */
    childFolders?: MailFolder[] | undefined;
    /** The mailFolder's display name. */
    displayName?: string | undefined;
    /** Indicates whether the mailFolder is hidden. This property can be set only when creating the folder. Find more information in Hidden mail folders. */
    isHidden?: boolean | undefined;
    /** The collection of rules that apply to the user's Inbox folder. */
    messageRules?: MessageRule[] | undefined;
    /** The collection of messages in the mailFolder. */
    messages?: Message[] | undefined;
    /** The collection of multi-value extended properties defined for the mailFolder. Read-only. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The unique identifier for the mailFolder's parent mailFolder. */
    parentFolderId?: string | undefined;
    /** The collection of single-value extended properties defined for the mailFolder. Read-only. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
    /** The number of items in the mailFolder. */
    totalItemCount?: number | undefined;
    /** The number of items in the mailFolder marked as unread. */
    unreadItemCount?: number | undefined;
}

export class MessageRule extends Entity implements IMessageRule {
    /** Actions to be taken on a message when the corresponding conditions are fulfilled. */
    actions?: MessageRuleActions | undefined;
    /** Conditions that when fulfilled trigger the corresponding actions for that rule. */
    conditions?: MessageRulePredicates | undefined;
    /** The display name of the rule. */
    displayName?: string | undefined;
    /** Exception conditions for the rule. */
    exceptions?: MessageRulePredicates | undefined;
    /** Indicates whether the rule is in an error condition. Read-only. */
    hasError?: boolean | undefined;
    /** Indicates whether the rule is enabled to be applied to messages. */
    isEnabled?: boolean | undefined;
    /** Indicates if the rule is read-only and cannot be modified or deleted by the rules REST API. */
    isReadOnly?: boolean | undefined;
    /** Indicates the order in which the rule is executed, among other rules. */
    sequence?: number | undefined;

    constructor(data?: IMessageRule) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.actions = _data["actions"] ? MessageRuleActions.fromJS(_data["actions"]) : <any>undefined;
            this.conditions = _data["conditions"] ? MessageRulePredicates.fromJS(_data["conditions"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.exceptions = _data["exceptions"] ? MessageRulePredicates.fromJS(_data["exceptions"]) : <any>undefined;
            this.hasError = _data["hasError"];
            this.isEnabled = _data["isEnabled"];
            this.isReadOnly = _data["isReadOnly"];
            this.sequence = _data["sequence"];
        }
    }

    static override fromJS(data: any): MessageRule {
        data = typeof data === 'object' ? data : {};
        let result = new MessageRule();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actions"] = this.actions ? this.actions.toJSON() : <any>undefined;
        data["conditions"] = this.conditions ? this.conditions.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["exceptions"] = this.exceptions ? this.exceptions.toJSON() : <any>undefined;
        data["hasError"] = this.hasError;
        data["isEnabled"] = this.isEnabled;
        data["isReadOnly"] = this.isReadOnly;
        data["sequence"] = this.sequence;
        super.toJSON(data);
        return data;
    }
}

export interface IMessageRule extends IEntity {
    /** Actions to be taken on a message when the corresponding conditions are fulfilled. */
    actions?: MessageRuleActions | undefined;
    /** Conditions that when fulfilled trigger the corresponding actions for that rule. */
    conditions?: MessageRulePredicates | undefined;
    /** The display name of the rule. */
    displayName?: string | undefined;
    /** Exception conditions for the rule. */
    exceptions?: MessageRulePredicates | undefined;
    /** Indicates whether the rule is in an error condition. Read-only. */
    hasError?: boolean | undefined;
    /** Indicates whether the rule is enabled to be applied to messages. */
    isEnabled?: boolean | undefined;
    /** Indicates if the rule is read-only and cannot be modified or deleted by the rules REST API. */
    isReadOnly?: boolean | undefined;
    /** Indicates the order in which the rule is executed, among other rules. */
    sequence?: number | undefined;
}

export class MessageRuleActions implements IMessageRuleActions {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** A list of categories to be assigned to a message. */
    assignCategories?: string[] | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The ID of a folder that a message is to be copied to. */
    copyToFolder?: string | undefined;
    /** Indicates whether a message should be moved to the Deleted Items folder. */
    delete?: boolean | undefined;
    /** The email addresses of the recipients to which a message should be forwarded as an attachment. */
    forwardAsAttachmentTo?: Recipient[] | undefined;
    /** The email addresses of the recipients to which a message should be forwarded. */
    forwardTo?: Recipient[] | undefined;
    /** Indicates whether a message should be marked as read. */
    markAsRead?: boolean | undefined;
    /** Sets the importance of the message, which can be: low, normal, high. */
    markImportance?: Importance | undefined;
    /** The ID of the folder that a message will be moved to. */
    moveToFolder?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Indicates whether a message should be permanently deleted and not saved to the Deleted Items folder. */
    permanentDelete?: boolean | undefined;
    /** The email addresses to which a message should be redirected. */
    redirectTo?: Recipient[] | undefined;
    /** Indicates whether subsequent rules should be evaluated. */
    stopProcessingRules?: boolean | undefined;

    constructor(data?: IMessageRuleActions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            if (Array.isArray(_data["assignCategories"])) {
                this.assignCategories = [] as any;
                for (let item of _data["assignCategories"])
                    this.assignCategories!.push(item);
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.copyToFolder = _data["copyToFolder"];
            this.delete = _data["delete"];
            if (Array.isArray(_data["forwardAsAttachmentTo"])) {
                this.forwardAsAttachmentTo = [] as any;
                for (let item of _data["forwardAsAttachmentTo"])
                    this.forwardAsAttachmentTo!.push(Recipient.fromJS(item));
            }
            if (Array.isArray(_data["forwardTo"])) {
                this.forwardTo = [] as any;
                for (let item of _data["forwardTo"])
                    this.forwardTo!.push(Recipient.fromJS(item));
            }
            this.markAsRead = _data["markAsRead"];
            this.markImportance = _data["markImportance"];
            this.moveToFolder = _data["moveToFolder"];
            this.odataType = _data["odataType"];
            this.permanentDelete = _data["permanentDelete"];
            if (Array.isArray(_data["redirectTo"])) {
                this.redirectTo = [] as any;
                for (let item of _data["redirectTo"])
                    this.redirectTo!.push(Recipient.fromJS(item));
            }
            this.stopProcessingRules = _data["stopProcessingRules"];
        }
    }

    static fromJS(data: any): MessageRuleActions {
        data = typeof data === 'object' ? data : {};
        let result = new MessageRuleActions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        if (Array.isArray(this.assignCategories)) {
            data["assignCategories"] = [];
            for (let item of this.assignCategories)
                data["assignCategories"].push(item);
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["copyToFolder"] = this.copyToFolder;
        data["delete"] = this.delete;
        if (Array.isArray(this.forwardAsAttachmentTo)) {
            data["forwardAsAttachmentTo"] = [];
            for (let item of this.forwardAsAttachmentTo)
                data["forwardAsAttachmentTo"].push(item.toJSON());
        }
        if (Array.isArray(this.forwardTo)) {
            data["forwardTo"] = [];
            for (let item of this.forwardTo)
                data["forwardTo"].push(item.toJSON());
        }
        data["markAsRead"] = this.markAsRead;
        data["markImportance"] = this.markImportance;
        data["moveToFolder"] = this.moveToFolder;
        data["odataType"] = this.odataType;
        data["permanentDelete"] = this.permanentDelete;
        if (Array.isArray(this.redirectTo)) {
            data["redirectTo"] = [];
            for (let item of this.redirectTo)
                data["redirectTo"].push(item.toJSON());
        }
        data["stopProcessingRules"] = this.stopProcessingRules;
        return data;
    }
}

export interface IMessageRuleActions {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** A list of categories to be assigned to a message. */
    assignCategories?: string[] | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The ID of a folder that a message is to be copied to. */
    copyToFolder?: string | undefined;
    /** Indicates whether a message should be moved to the Deleted Items folder. */
    delete?: boolean | undefined;
    /** The email addresses of the recipients to which a message should be forwarded as an attachment. */
    forwardAsAttachmentTo?: Recipient[] | undefined;
    /** The email addresses of the recipients to which a message should be forwarded. */
    forwardTo?: Recipient[] | undefined;
    /** Indicates whether a message should be marked as read. */
    markAsRead?: boolean | undefined;
    /** Sets the importance of the message, which can be: low, normal, high. */
    markImportance?: Importance | undefined;
    /** The ID of the folder that a message will be moved to. */
    moveToFolder?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Indicates whether a message should be permanently deleted and not saved to the Deleted Items folder. */
    permanentDelete?: boolean | undefined;
    /** The email addresses to which a message should be redirected. */
    redirectTo?: Recipient[] | undefined;
    /** Indicates whether subsequent rules should be evaluated. */
    stopProcessingRules?: boolean | undefined;
}

export class MessageRulePredicates implements IMessageRulePredicates {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Represents the strings that should appear in the body of an incoming message in order for the condition or exception to apply. */
    bodyContains?: string[] | undefined;
    /** Represents the strings that should appear in the body or subject of an incoming message in order for the condition or exception to apply. */
    bodyOrSubjectContains?: string[] | undefined;
    /** Represents the categories that an incoming message should be labeled with in order for the condition or exception to apply. */
    categories?: string[] | undefined;
    /** Represents the specific sender email addresses of an incoming message in order for the condition or exception to apply. */
    fromAddresses?: Recipient[] | undefined;
    /** Indicates whether an incoming message must have attachments in order for the condition or exception to apply. */
    hasAttachments?: boolean | undefined;
    /** Represents the strings that appear in the headers of an incoming message in order for the condition or exception to apply. */
    headerContains?: string[] | undefined;
    /** The importance that is stamped on an incoming message in order for the condition or exception to apply: low, normal, high. */
    importance?: Importance | undefined;
    /** Indicates whether an incoming message must be an approval request in order for the condition or exception to apply. */
    isApprovalRequest?: boolean | undefined;
    /** Indicates whether an incoming message must be automatically forwarded in order for the condition or exception to apply. */
    isAutomaticForward?: boolean | undefined;
    /** Indicates whether an incoming message must be an auto reply in order for the condition or exception to apply. */
    isAutomaticReply?: boolean | undefined;
    /** Indicates whether an incoming message must be encrypted in order for the condition or exception to apply. */
    isEncrypted?: boolean | undefined;
    /** Indicates whether an incoming message must be a meeting request in order for the condition or exception to apply. */
    isMeetingRequest?: boolean | undefined;
    /** Indicates whether an incoming message must be a meeting response in order for the condition or exception to apply. */
    isMeetingResponse?: boolean | undefined;
    /** Indicates whether an incoming message must be a non-delivery report in order for the condition or exception to apply. */
    isNonDeliveryReport?: boolean | undefined;
    /** Indicates whether an incoming message must be permission controlled (RMS-protected) in order for the condition or exception to apply. */
    isPermissionControlled?: boolean | undefined;
    /** Indicates whether an incoming message must be a read receipt in order for the condition or exception to apply. */
    isReadReceipt?: boolean | undefined;
    /** Indicates whether an incoming message must be S/MIME-signed in order for the condition or exception to apply. */
    isSigned?: boolean | undefined;
    /** Indicates whether an incoming message must be a voice mail in order for the condition or exception to apply. */
    isVoicemail?: boolean | undefined;
    /** Represents the flag-for-action value that appears on an incoming message in order for the condition or exception to apply. The possible values are: any, call, doNotForward, followUp, fyi, forward, noResponseNecessary, read, reply, replyToAll, review. */
    messageActionFlag?: MessageActionFlag | undefined;
    /** Indicates whether the owner of the mailbox must not be a recipient of an incoming message in order for the condition or exception to apply. */
    notSentToMe?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Represents the strings that appear in either the toRecipients or ccRecipients properties of an incoming message in order for the condition or exception to apply. */
    recipientContains?: string[] | undefined;
    /** Represents the strings that appear in the from property of an incoming message in order for the condition or exception to apply. */
    senderContains?: string[] | undefined;
    /** Represents the sensitivity level that must be stamped on an incoming message in order for the condition or exception to apply. The possible values are: normal, personal, private, confidential. */
    sensitivity?: Sensitivity | undefined;
    /** Indicates whether the owner of the mailbox must be in the ccRecipients property of an incoming message in order for the condition or exception to apply. */
    sentCcMe?: boolean | undefined;
    /** Indicates whether the owner of the mailbox must be the only recipient in an incoming message in order for the condition or exception to apply. */
    sentOnlyToMe?: boolean | undefined;
    /** Represents the email addresses that an incoming message must have been sent to in order for the condition or exception to apply. */
    sentToAddresses?: Recipient[] | undefined;
    /** Indicates whether the owner of the mailbox must be in the toRecipients property of an incoming message in order for the condition or exception to apply. */
    sentToMe?: boolean | undefined;
    /** Indicates whether the owner of the mailbox must be in either a toRecipients or ccRecipients property of an incoming message in order for the condition or exception to apply. */
    sentToOrCcMe?: boolean | undefined;
    /** Represents the strings that appear in the subject of an incoming message in order for the condition or exception to apply. */
    subjectContains?: string[] | undefined;
    /** Represents the minimum and maximum sizes (in kilobytes) that an incoming message must fall in between in order for the condition or exception to apply. */
    withinSizeRange?: SizeRange | undefined;

    constructor(data?: IMessageRulePredicates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            if (Array.isArray(_data["bodyContains"])) {
                this.bodyContains = [] as any;
                for (let item of _data["bodyContains"])
                    this.bodyContains!.push(item);
            }
            if (Array.isArray(_data["bodyOrSubjectContains"])) {
                this.bodyOrSubjectContains = [] as any;
                for (let item of _data["bodyOrSubjectContains"])
                    this.bodyOrSubjectContains!.push(item);
            }
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
            if (Array.isArray(_data["fromAddresses"])) {
                this.fromAddresses = [] as any;
                for (let item of _data["fromAddresses"])
                    this.fromAddresses!.push(Recipient.fromJS(item));
            }
            this.hasAttachments = _data["hasAttachments"];
            if (Array.isArray(_data["headerContains"])) {
                this.headerContains = [] as any;
                for (let item of _data["headerContains"])
                    this.headerContains!.push(item);
            }
            this.importance = _data["importance"];
            this.isApprovalRequest = _data["isApprovalRequest"];
            this.isAutomaticForward = _data["isAutomaticForward"];
            this.isAutomaticReply = _data["isAutomaticReply"];
            this.isEncrypted = _data["isEncrypted"];
            this.isMeetingRequest = _data["isMeetingRequest"];
            this.isMeetingResponse = _data["isMeetingResponse"];
            this.isNonDeliveryReport = _data["isNonDeliveryReport"];
            this.isPermissionControlled = _data["isPermissionControlled"];
            this.isReadReceipt = _data["isReadReceipt"];
            this.isSigned = _data["isSigned"];
            this.isVoicemail = _data["isVoicemail"];
            this.messageActionFlag = _data["messageActionFlag"];
            this.notSentToMe = _data["notSentToMe"];
            this.odataType = _data["odataType"];
            if (Array.isArray(_data["recipientContains"])) {
                this.recipientContains = [] as any;
                for (let item of _data["recipientContains"])
                    this.recipientContains!.push(item);
            }
            if (Array.isArray(_data["senderContains"])) {
                this.senderContains = [] as any;
                for (let item of _data["senderContains"])
                    this.senderContains!.push(item);
            }
            this.sensitivity = _data["sensitivity"];
            this.sentCcMe = _data["sentCcMe"];
            this.sentOnlyToMe = _data["sentOnlyToMe"];
            if (Array.isArray(_data["sentToAddresses"])) {
                this.sentToAddresses = [] as any;
                for (let item of _data["sentToAddresses"])
                    this.sentToAddresses!.push(Recipient.fromJS(item));
            }
            this.sentToMe = _data["sentToMe"];
            this.sentToOrCcMe = _data["sentToOrCcMe"];
            if (Array.isArray(_data["subjectContains"])) {
                this.subjectContains = [] as any;
                for (let item of _data["subjectContains"])
                    this.subjectContains!.push(item);
            }
            this.withinSizeRange = _data["withinSizeRange"] ? SizeRange.fromJS(_data["withinSizeRange"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MessageRulePredicates {
        data = typeof data === 'object' ? data : {};
        let result = new MessageRulePredicates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        if (Array.isArray(this.bodyContains)) {
            data["bodyContains"] = [];
            for (let item of this.bodyContains)
                data["bodyContains"].push(item);
        }
        if (Array.isArray(this.bodyOrSubjectContains)) {
            data["bodyOrSubjectContains"] = [];
            for (let item of this.bodyOrSubjectContains)
                data["bodyOrSubjectContains"].push(item);
        }
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        if (Array.isArray(this.fromAddresses)) {
            data["fromAddresses"] = [];
            for (let item of this.fromAddresses)
                data["fromAddresses"].push(item.toJSON());
        }
        data["hasAttachments"] = this.hasAttachments;
        if (Array.isArray(this.headerContains)) {
            data["headerContains"] = [];
            for (let item of this.headerContains)
                data["headerContains"].push(item);
        }
        data["importance"] = this.importance;
        data["isApprovalRequest"] = this.isApprovalRequest;
        data["isAutomaticForward"] = this.isAutomaticForward;
        data["isAutomaticReply"] = this.isAutomaticReply;
        data["isEncrypted"] = this.isEncrypted;
        data["isMeetingRequest"] = this.isMeetingRequest;
        data["isMeetingResponse"] = this.isMeetingResponse;
        data["isNonDeliveryReport"] = this.isNonDeliveryReport;
        data["isPermissionControlled"] = this.isPermissionControlled;
        data["isReadReceipt"] = this.isReadReceipt;
        data["isSigned"] = this.isSigned;
        data["isVoicemail"] = this.isVoicemail;
        data["messageActionFlag"] = this.messageActionFlag;
        data["notSentToMe"] = this.notSentToMe;
        data["odataType"] = this.odataType;
        if (Array.isArray(this.recipientContains)) {
            data["recipientContains"] = [];
            for (let item of this.recipientContains)
                data["recipientContains"].push(item);
        }
        if (Array.isArray(this.senderContains)) {
            data["senderContains"] = [];
            for (let item of this.senderContains)
                data["senderContains"].push(item);
        }
        data["sensitivity"] = this.sensitivity;
        data["sentCcMe"] = this.sentCcMe;
        data["sentOnlyToMe"] = this.sentOnlyToMe;
        if (Array.isArray(this.sentToAddresses)) {
            data["sentToAddresses"] = [];
            for (let item of this.sentToAddresses)
                data["sentToAddresses"].push(item.toJSON());
        }
        data["sentToMe"] = this.sentToMe;
        data["sentToOrCcMe"] = this.sentToOrCcMe;
        if (Array.isArray(this.subjectContains)) {
            data["subjectContains"] = [];
            for (let item of this.subjectContains)
                data["subjectContains"].push(item);
        }
        data["withinSizeRange"] = this.withinSizeRange ? this.withinSizeRange.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMessageRulePredicates {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Represents the strings that should appear in the body of an incoming message in order for the condition or exception to apply. */
    bodyContains?: string[] | undefined;
    /** Represents the strings that should appear in the body or subject of an incoming message in order for the condition or exception to apply. */
    bodyOrSubjectContains?: string[] | undefined;
    /** Represents the categories that an incoming message should be labeled with in order for the condition or exception to apply. */
    categories?: string[] | undefined;
    /** Represents the specific sender email addresses of an incoming message in order for the condition or exception to apply. */
    fromAddresses?: Recipient[] | undefined;
    /** Indicates whether an incoming message must have attachments in order for the condition or exception to apply. */
    hasAttachments?: boolean | undefined;
    /** Represents the strings that appear in the headers of an incoming message in order for the condition or exception to apply. */
    headerContains?: string[] | undefined;
    /** The importance that is stamped on an incoming message in order for the condition or exception to apply: low, normal, high. */
    importance?: Importance | undefined;
    /** Indicates whether an incoming message must be an approval request in order for the condition or exception to apply. */
    isApprovalRequest?: boolean | undefined;
    /** Indicates whether an incoming message must be automatically forwarded in order for the condition or exception to apply. */
    isAutomaticForward?: boolean | undefined;
    /** Indicates whether an incoming message must be an auto reply in order for the condition or exception to apply. */
    isAutomaticReply?: boolean | undefined;
    /** Indicates whether an incoming message must be encrypted in order for the condition or exception to apply. */
    isEncrypted?: boolean | undefined;
    /** Indicates whether an incoming message must be a meeting request in order for the condition or exception to apply. */
    isMeetingRequest?: boolean | undefined;
    /** Indicates whether an incoming message must be a meeting response in order for the condition or exception to apply. */
    isMeetingResponse?: boolean | undefined;
    /** Indicates whether an incoming message must be a non-delivery report in order for the condition or exception to apply. */
    isNonDeliveryReport?: boolean | undefined;
    /** Indicates whether an incoming message must be permission controlled (RMS-protected) in order for the condition or exception to apply. */
    isPermissionControlled?: boolean | undefined;
    /** Indicates whether an incoming message must be a read receipt in order for the condition or exception to apply. */
    isReadReceipt?: boolean | undefined;
    /** Indicates whether an incoming message must be S/MIME-signed in order for the condition or exception to apply. */
    isSigned?: boolean | undefined;
    /** Indicates whether an incoming message must be a voice mail in order for the condition or exception to apply. */
    isVoicemail?: boolean | undefined;
    /** Represents the flag-for-action value that appears on an incoming message in order for the condition or exception to apply. The possible values are: any, call, doNotForward, followUp, fyi, forward, noResponseNecessary, read, reply, replyToAll, review. */
    messageActionFlag?: MessageActionFlag | undefined;
    /** Indicates whether the owner of the mailbox must not be a recipient of an incoming message in order for the condition or exception to apply. */
    notSentToMe?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Represents the strings that appear in either the toRecipients or ccRecipients properties of an incoming message in order for the condition or exception to apply. */
    recipientContains?: string[] | undefined;
    /** Represents the strings that appear in the from property of an incoming message in order for the condition or exception to apply. */
    senderContains?: string[] | undefined;
    /** Represents the sensitivity level that must be stamped on an incoming message in order for the condition or exception to apply. The possible values are: normal, personal, private, confidential. */
    sensitivity?: Sensitivity | undefined;
    /** Indicates whether the owner of the mailbox must be in the ccRecipients property of an incoming message in order for the condition or exception to apply. */
    sentCcMe?: boolean | undefined;
    /** Indicates whether the owner of the mailbox must be the only recipient in an incoming message in order for the condition or exception to apply. */
    sentOnlyToMe?: boolean | undefined;
    /** Represents the email addresses that an incoming message must have been sent to in order for the condition or exception to apply. */
    sentToAddresses?: Recipient[] | undefined;
    /** Indicates whether the owner of the mailbox must be in the toRecipients property of an incoming message in order for the condition or exception to apply. */
    sentToMe?: boolean | undefined;
    /** Indicates whether the owner of the mailbox must be in either a toRecipients or ccRecipients property of an incoming message in order for the condition or exception to apply. */
    sentToOrCcMe?: boolean | undefined;
    /** Represents the strings that appear in the subject of an incoming message in order for the condition or exception to apply. */
    subjectContains?: string[] | undefined;
    /** Represents the minimum and maximum sizes (in kilobytes) that an incoming message must fall in between in order for the condition or exception to apply. */
    withinSizeRange?: SizeRange | undefined;
}

export enum MessageActionFlag {
    Any = 0,
    Call = 1,
    DoNotForward = 2,
    FollowUp = 3,
    Fyi = 4,
    Forward = 5,
    NoResponseNecessary = 6,
    Read = 7,
    Reply = 8,
    ReplyToAll = 9,
    Review = 10,
}

export class SizeRange implements ISizeRange {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The maximum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply. */
    maximumSize?: number | undefined;
    /** The minimum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply. */
    minimumSize?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ISizeRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.maximumSize = _data["maximumSize"];
            this.minimumSize = _data["minimumSize"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): SizeRange {
        data = typeof data === 'object' ? data : {};
        let result = new SizeRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["maximumSize"] = this.maximumSize;
        data["minimumSize"] = this.minimumSize;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ISizeRange {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The maximum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply. */
    maximumSize?: number | undefined;
    /** The minimum size (in kilobytes) that an incoming message must have in order for a condition or exception to apply. */
    minimumSize?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Message extends OutlookItem implements IMessage {
    /** The fileAttachment and itemAttachment attachments for the message. */
    attachments?: Attachment[] | undefined;
    /** The Bcc: recipients for the message. */
    bccRecipients?: Recipient[] | undefined;
    /** The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body. */
    body?: ItemBody | undefined;
    /** The first 255 characters of the message body. It is in text format. */
    bodyPreview?: string | undefined;
    /** The Cc: recipients for the message. */
    ccRecipients?: Recipient[] | undefined;
    /** The ID of the conversation the email belongs to. */
    conversationId?: string | undefined;
    /** Indicates the position of the message within the conversation. */
    conversationIndex?: string | undefined;
    /** The collection of open extensions defined for the message. Nullable. */
    extensions?: Extension[] | undefined;
    /** The flag value that indicates the status, start date, due date, or completion date for the message. */
    flag?: FollowupFlag | undefined;
    /** The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message. */
    from?: Recipient | undefined;
    /** Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>. */
    hasAttachments?: boolean | undefined;
    /** The importance of the message. The possible values are: low, normal, and high. */
    importance?: Importance | undefined;
    /** The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other. */
    inferenceClassification?: InferenceClassificationType | undefined;
    /** A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only. */
    internetMessageHeaders?: InternetMessageHeader[] | undefined;
    /** The message ID in the format specified by RFC2822. */
    internetMessageId?: string | undefined;
    /** Indicates whether a read receipt is requested for the message. */
    isDeliveryReceiptRequested?: boolean | undefined;
    /** Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet. */
    isDraft?: boolean | undefined;
    /** Indicates whether the message has been read. */
    isRead?: boolean | undefined;
    /** Indicates whether a read receipt is requested for the message. */
    isReadReceiptRequested?: boolean | undefined;
    /** The collection of multi-value extended properties defined for the message. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The unique identifier for the message's parent mailFolder. */
    parentFolderId?: string | undefined;
    /** The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    receivedDateTime?: Date | undefined;
    /** The email addresses to use when replying. */
    replyTo?: Recipient[] | undefined;
    /** The account that is actually used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message. */
    sender?: Recipient | undefined;
    /** The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    sentDateTime?: Date | undefined;
    /** The collection of single-value extended properties defined for the message. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
    /** The subject of the message. */
    subject?: string | undefined;
    /** The To: recipients for the message. */
    toRecipients?: Recipient[] | undefined;
    /** The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format. */
    uniqueBody?: ItemBody | undefined;
    /** The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame. */
    webLink?: string | undefined;

    constructor(data?: IMessage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [] as any;
                for (let item of _data["attachments"])
                    this.attachments!.push(Attachment.fromJS(item));
            }
            if (Array.isArray(_data["bccRecipients"])) {
                this.bccRecipients = [] as any;
                for (let item of _data["bccRecipients"])
                    this.bccRecipients!.push(Recipient.fromJS(item));
            }
            this.body = _data["body"] ? ItemBody.fromJS(_data["body"]) : <any>undefined;
            this.bodyPreview = _data["bodyPreview"];
            if (Array.isArray(_data["ccRecipients"])) {
                this.ccRecipients = [] as any;
                for (let item of _data["ccRecipients"])
                    this.ccRecipients!.push(Recipient.fromJS(item));
            }
            this.conversationId = _data["conversationId"];
            this.conversationIndex = _data["conversationIndex"];
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            this.flag = _data["flag"] ? FollowupFlag.fromJS(_data["flag"]) : <any>undefined;
            this.from = _data["from"] ? Recipient.fromJS(_data["from"]) : <any>undefined;
            this.hasAttachments = _data["hasAttachments"];
            this.importance = _data["importance"];
            this.inferenceClassification = _data["inferenceClassification"];
            if (Array.isArray(_data["internetMessageHeaders"])) {
                this.internetMessageHeaders = [] as any;
                for (let item of _data["internetMessageHeaders"])
                    this.internetMessageHeaders!.push(InternetMessageHeader.fromJS(item));
            }
            this.internetMessageId = _data["internetMessageId"];
            this.isDeliveryReceiptRequested = _data["isDeliveryReceiptRequested"];
            this.isDraft = _data["isDraft"];
            this.isRead = _data["isRead"];
            this.isReadReceiptRequested = _data["isReadReceiptRequested"];
            if (Array.isArray(_data["multiValueExtendedProperties"])) {
                this.multiValueExtendedProperties = [] as any;
                for (let item of _data["multiValueExtendedProperties"])
                    this.multiValueExtendedProperties!.push(MultiValueLegacyExtendedProperty.fromJS(item));
            }
            this.parentFolderId = _data["parentFolderId"];
            this.receivedDateTime = _data["receivedDateTime"] ? new Date(_data["receivedDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["replyTo"])) {
                this.replyTo = [] as any;
                for (let item of _data["replyTo"])
                    this.replyTo!.push(Recipient.fromJS(item));
            }
            this.sender = _data["sender"] ? Recipient.fromJS(_data["sender"]) : <any>undefined;
            this.sentDateTime = _data["sentDateTime"] ? new Date(_data["sentDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["singleValueExtendedProperties"])) {
                this.singleValueExtendedProperties = [] as any;
                for (let item of _data["singleValueExtendedProperties"])
                    this.singleValueExtendedProperties!.push(SingleValueLegacyExtendedProperty.fromJS(item));
            }
            this.subject = _data["subject"];
            if (Array.isArray(_data["toRecipients"])) {
                this.toRecipients = [] as any;
                for (let item of _data["toRecipients"])
                    this.toRecipients!.push(Recipient.fromJS(item));
            }
            this.uniqueBody = _data["uniqueBody"] ? ItemBody.fromJS(_data["uniqueBody"]) : <any>undefined;
            this.webLink = _data["webLink"];
        }
    }

    static override fromJS(data: any): Message {
        data = typeof data === 'object' ? data : {};
        let result = new Message();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        if (Array.isArray(this.bccRecipients)) {
            data["bccRecipients"] = [];
            for (let item of this.bccRecipients)
                data["bccRecipients"].push(item.toJSON());
        }
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        data["bodyPreview"] = this.bodyPreview;
        if (Array.isArray(this.ccRecipients)) {
            data["ccRecipients"] = [];
            for (let item of this.ccRecipients)
                data["ccRecipients"].push(item.toJSON());
        }
        data["conversationId"] = this.conversationId;
        data["conversationIndex"] = this.conversationIndex;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        data["flag"] = this.flag ? this.flag.toJSON() : <any>undefined;
        data["from"] = this.from ? this.from.toJSON() : <any>undefined;
        data["hasAttachments"] = this.hasAttachments;
        data["importance"] = this.importance;
        data["inferenceClassification"] = this.inferenceClassification;
        if (Array.isArray(this.internetMessageHeaders)) {
            data["internetMessageHeaders"] = [];
            for (let item of this.internetMessageHeaders)
                data["internetMessageHeaders"].push(item.toJSON());
        }
        data["internetMessageId"] = this.internetMessageId;
        data["isDeliveryReceiptRequested"] = this.isDeliveryReceiptRequested;
        data["isDraft"] = this.isDraft;
        data["isRead"] = this.isRead;
        data["isReadReceiptRequested"] = this.isReadReceiptRequested;
        if (Array.isArray(this.multiValueExtendedProperties)) {
            data["multiValueExtendedProperties"] = [];
            for (let item of this.multiValueExtendedProperties)
                data["multiValueExtendedProperties"].push(item.toJSON());
        }
        data["parentFolderId"] = this.parentFolderId;
        data["receivedDateTime"] = this.receivedDateTime ? this.receivedDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.replyTo)) {
            data["replyTo"] = [];
            for (let item of this.replyTo)
                data["replyTo"].push(item.toJSON());
        }
        data["sender"] = this.sender ? this.sender.toJSON() : <any>undefined;
        data["sentDateTime"] = this.sentDateTime ? this.sentDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.singleValueExtendedProperties)) {
            data["singleValueExtendedProperties"] = [];
            for (let item of this.singleValueExtendedProperties)
                data["singleValueExtendedProperties"].push(item.toJSON());
        }
        data["subject"] = this.subject;
        if (Array.isArray(this.toRecipients)) {
            data["toRecipients"] = [];
            for (let item of this.toRecipients)
                data["toRecipients"].push(item.toJSON());
        }
        data["uniqueBody"] = this.uniqueBody ? this.uniqueBody.toJSON() : <any>undefined;
        data["webLink"] = this.webLink;
        super.toJSON(data);
        return data;
    }
}

export interface IMessage extends IOutlookItem {
    /** The fileAttachment and itemAttachment attachments for the message. */
    attachments?: Attachment[] | undefined;
    /** The Bcc: recipients for the message. */
    bccRecipients?: Recipient[] | undefined;
    /** The body of the message. It can be in HTML or text format. Find out about safe HTML in a message body. */
    body?: ItemBody | undefined;
    /** The first 255 characters of the message body. It is in text format. */
    bodyPreview?: string | undefined;
    /** The Cc: recipients for the message. */
    ccRecipients?: Recipient[] | undefined;
    /** The ID of the conversation the email belongs to. */
    conversationId?: string | undefined;
    /** Indicates the position of the message within the conversation. */
    conversationIndex?: string | undefined;
    /** The collection of open extensions defined for the message. Nullable. */
    extensions?: Extension[] | undefined;
    /** The flag value that indicates the status, start date, due date, or completion date for the message. */
    flag?: FollowupFlag | undefined;
    /** The owner of the mailbox from which the message is sent. In most cases, this value is the same as the sender property, except for sharing or delegation scenarios. The value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message. */
    from?: Recipient | undefined;
    /** Indicates whether the message has attachments. This property doesn't include inline attachments, so if a message contains only inline attachments, this property is false. To verify the existence of inline attachments, parse the body property to look for a src attribute, such as <IMG src='cid:image001.jpg@01D26CD8.6C05F070'>. */
    hasAttachments?: boolean | undefined;
    /** The importance of the message. The possible values are: low, normal, and high. */
    importance?: Importance | undefined;
    /** The classification of the message for the user, based on inferred relevance or importance, or on an explicit override. The possible values are: focused or other. */
    inferenceClassification?: InferenceClassificationType | undefined;
    /** A collection of message headers defined by RFC5322. The set includes message headers indicating the network path taken by a message from the sender to the recipient. It can also contain custom message headers that hold app data for the message.  Returned only on applying a $select query option. Read-only. */
    internetMessageHeaders?: InternetMessageHeader[] | undefined;
    /** The message ID in the format specified by RFC2822. */
    internetMessageId?: string | undefined;
    /** Indicates whether a read receipt is requested for the message. */
    isDeliveryReceiptRequested?: boolean | undefined;
    /** Indicates whether the message is a draft. A message is a draft if it hasn't been sent yet. */
    isDraft?: boolean | undefined;
    /** Indicates whether the message has been read. */
    isRead?: boolean | undefined;
    /** Indicates whether a read receipt is requested for the message. */
    isReadReceiptRequested?: boolean | undefined;
    /** The collection of multi-value extended properties defined for the message. Nullable. */
    multiValueExtendedProperties?: MultiValueLegacyExtendedProperty[] | undefined;
    /** The unique identifier for the message's parent mailFolder. */
    parentFolderId?: string | undefined;
    /** The date and time the message was received.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    receivedDateTime?: Date | undefined;
    /** The email addresses to use when replying. */
    replyTo?: Recipient[] | undefined;
    /** The account that is actually used to generate the message. In most cases, this value is the same as the from property. You can set this property to a different value when sending a message from a shared mailbox, for a shared calendar, or as a delegate. In any case, the value must correspond to the actual mailbox used. Find out more about setting the from and sender properties of a message. */
    sender?: Recipient | undefined;
    /** The date and time the message was sent.  The date and time information uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    sentDateTime?: Date | undefined;
    /** The collection of single-value extended properties defined for the message. Nullable. */
    singleValueExtendedProperties?: SingleValueLegacyExtendedProperty[] | undefined;
    /** The subject of the message. */
    subject?: string | undefined;
    /** The To: recipients for the message. */
    toRecipients?: Recipient[] | undefined;
    /** The part of the body of the message that is unique to the current message. uniqueBody is not returned by default but can be retrieved for a given message by use of the ?$select=uniqueBody query. It can be in HTML or text format. */
    uniqueBody?: ItemBody | undefined;
    /** The URL to open the message in Outlook on the web.You can append an ispopout argument to the end of the URL to change how the message is displayed. If ispopout is not present or if it is set to 1, then the message is shown in a popout window. If ispopout is set to 0, the browser shows the message in the Outlook on the web review pane.The message opens in the browser if you are signed in to your mailbox via Outlook on the web. You are prompted to sign in if you are not already signed in with the browser.This URL cannot be accessed from within an iFrame. */
    webLink?: string | undefined;
}

export class FollowupFlag implements IFollowupFlag {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date and time that the follow-up was finished. */
    completedDateTime?: DateTimeTimeZone | undefined;
    /** The date and time that the follow-up is to be finished. Note: To set the due date, you must also specify the startDateTime; otherwise, you get a 400 Bad Request response. */
    dueDateTime?: DateTimeTimeZone | undefined;
    /** The status for follow-up for an item. Possible values are notFlagged, complete, and flagged. */
    flagStatus?: FollowupFlagStatus | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The date and time that the follow-up is to begin. */
    startDateTime?: DateTimeTimeZone | undefined;

    constructor(data?: IFollowupFlag) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.completedDateTime = _data["completedDateTime"] ? DateTimeTimeZone.fromJS(_data["completedDateTime"]) : <any>undefined;
            this.dueDateTime = _data["dueDateTime"] ? DateTimeTimeZone.fromJS(_data["dueDateTime"]) : <any>undefined;
            this.flagStatus = _data["flagStatus"];
            this.odataType = _data["odataType"];
            this.startDateTime = _data["startDateTime"] ? DateTimeTimeZone.fromJS(_data["startDateTime"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FollowupFlag {
        data = typeof data === 'object' ? data : {};
        let result = new FollowupFlag();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["completedDateTime"] = this.completedDateTime ? this.completedDateTime.toJSON() : <any>undefined;
        data["dueDateTime"] = this.dueDateTime ? this.dueDateTime.toJSON() : <any>undefined;
        data["flagStatus"] = this.flagStatus;
        data["odataType"] = this.odataType;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFollowupFlag {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The date and time that the follow-up was finished. */
    completedDateTime?: DateTimeTimeZone | undefined;
    /** The date and time that the follow-up is to be finished. Note: To set the due date, you must also specify the startDateTime; otherwise, you get a 400 Bad Request response. */
    dueDateTime?: DateTimeTimeZone | undefined;
    /** The status for follow-up for an item. Possible values are notFlagged, complete, and flagged. */
    flagStatus?: FollowupFlagStatus | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The date and time that the follow-up is to begin. */
    startDateTime?: DateTimeTimeZone | undefined;
}

export enum FollowupFlagStatus {
    NotFlagged = 0,
    Complete = 1,
    Flagged = 2,
}

export class InternetMessageHeader implements IInternetMessageHeader {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Represents the key in a key-value pair. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The value in a key-value pair. */
    value?: string | undefined;

    constructor(data?: IInternetMessageHeader) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.name = _data["name"];
            this.odataType = _data["odataType"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): InternetMessageHeader {
        data = typeof data === 'object' ? data : {};
        let result = new InternetMessageHeader();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        data["value"] = this.value;
        return data;
    }
}

export interface IInternetMessageHeader {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Represents the key in a key-value pair. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The value in a key-value pair. */
    value?: string | undefined;
}

/** The ManagedAppEntity is the base entity type for all other entity types under app management workflow. */
export class ManagedAppRegistration extends Entity implements IManagedAppRegistration {
    /** The app package Identifier */
    appIdentifier?: MobileAppIdentifier | undefined;
    /** App version */
    applicationVersion?: string | undefined;
    /** Zero or more policys already applied on the registered app when it last synchronized with managment service. */
    appliedPolicies?: ManagedAppPolicy[] | undefined;
    /** Date and time of creation */
    createdDateTime?: Date | undefined;
    /** Host device name */
    deviceName?: string | undefined;
    /** App management SDK generated tag, which helps relate apps hosted on the same device. Not guaranteed to relate apps in all conditions. */
    deviceTag?: string | undefined;
    /** Host device type */
    deviceType?: string | undefined;
    /** Zero or more reasons an app registration is flagged. E.g. app running on rooted device */
    flaggedReasons?: (ManagedAppFlaggedReason | undefined)[] | undefined;
    /** Zero or more policies admin intended for the app as of now. */
    intendedPolicies?: ManagedAppPolicy[] | undefined;
    /** Date and time of last the app synced with management service. */
    lastSyncDateTime?: Date | undefined;
    /** App management SDK version */
    managementSdkVersion?: string | undefined;
    /** Zero or more long running operations triggered on the app registration. */
    operations?: ManagedAppOperation[] | undefined;
    /** Operating System version */
    platformVersion?: string | undefined;
    /** The user Id to who this app registration belongs. */
    userId?: string | undefined;
    /** Version of the entity. */
    version?: string | undefined;

    constructor(data?: IManagedAppRegistration) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.appIdentifier = _data["appIdentifier"] ? MobileAppIdentifier.fromJS(_data["appIdentifier"]) : <any>undefined;
            this.applicationVersion = _data["applicationVersion"];
            if (Array.isArray(_data["appliedPolicies"])) {
                this.appliedPolicies = [] as any;
                for (let item of _data["appliedPolicies"])
                    this.appliedPolicies!.push(ManagedAppPolicy.fromJS(item));
            }
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.deviceName = _data["deviceName"];
            this.deviceTag = _data["deviceTag"];
            this.deviceType = _data["deviceType"];
            if (Array.isArray(_data["flaggedReasons"])) {
                this.flaggedReasons = [] as any;
                for (let item of _data["flaggedReasons"])
                    this.flaggedReasons!.push(item);
            }
            if (Array.isArray(_data["intendedPolicies"])) {
                this.intendedPolicies = [] as any;
                for (let item of _data["intendedPolicies"])
                    this.intendedPolicies!.push(ManagedAppPolicy.fromJS(item));
            }
            this.lastSyncDateTime = _data["lastSyncDateTime"] ? new Date(_data["lastSyncDateTime"].toString()) : <any>undefined;
            this.managementSdkVersion = _data["managementSdkVersion"];
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(ManagedAppOperation.fromJS(item));
            }
            this.platformVersion = _data["platformVersion"];
            this.userId = _data["userId"];
            this.version = _data["version"];
        }
    }

    static override fromJS(data: any): ManagedAppRegistration {
        data = typeof data === 'object' ? data : {};
        let result = new ManagedAppRegistration();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appIdentifier"] = this.appIdentifier ? this.appIdentifier.toJSON() : <any>undefined;
        data["applicationVersion"] = this.applicationVersion;
        if (Array.isArray(this.appliedPolicies)) {
            data["appliedPolicies"] = [];
            for (let item of this.appliedPolicies)
                data["appliedPolicies"].push(item.toJSON());
        }
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["deviceName"] = this.deviceName;
        data["deviceTag"] = this.deviceTag;
        data["deviceType"] = this.deviceType;
        if (Array.isArray(this.flaggedReasons)) {
            data["flaggedReasons"] = [];
            for (let item of this.flaggedReasons)
                data["flaggedReasons"].push(item);
        }
        if (Array.isArray(this.intendedPolicies)) {
            data["intendedPolicies"] = [];
            for (let item of this.intendedPolicies)
                data["intendedPolicies"].push(item.toJSON());
        }
        data["lastSyncDateTime"] = this.lastSyncDateTime ? this.lastSyncDateTime.toISOString() : <any>undefined;
        data["managementSdkVersion"] = this.managementSdkVersion;
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        data["platformVersion"] = this.platformVersion;
        data["userId"] = this.userId;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }
}

/** The ManagedAppEntity is the base entity type for all other entity types under app management workflow. */
export interface IManagedAppRegistration extends IEntity {
    /** The app package Identifier */
    appIdentifier?: MobileAppIdentifier | undefined;
    /** App version */
    applicationVersion?: string | undefined;
    /** Zero or more policys already applied on the registered app when it last synchronized with managment service. */
    appliedPolicies?: ManagedAppPolicy[] | undefined;
    /** Date and time of creation */
    createdDateTime?: Date | undefined;
    /** Host device name */
    deviceName?: string | undefined;
    /** App management SDK generated tag, which helps relate apps hosted on the same device. Not guaranteed to relate apps in all conditions. */
    deviceTag?: string | undefined;
    /** Host device type */
    deviceType?: string | undefined;
    /** Zero or more reasons an app registration is flagged. E.g. app running on rooted device */
    flaggedReasons?: (ManagedAppFlaggedReason | undefined)[] | undefined;
    /** Zero or more policies admin intended for the app as of now. */
    intendedPolicies?: ManagedAppPolicy[] | undefined;
    /** Date and time of last the app synced with management service. */
    lastSyncDateTime?: Date | undefined;
    /** App management SDK version */
    managementSdkVersion?: string | undefined;
    /** Zero or more long running operations triggered on the app registration. */
    operations?: ManagedAppOperation[] | undefined;
    /** Operating System version */
    platformVersion?: string | undefined;
    /** The user Id to who this app registration belongs. */
    userId?: string | undefined;
    /** Version of the entity. */
    version?: string | undefined;
}

/** The identifier for a mobile app. */
export class MobileAppIdentifier implements IMobileAppIdentifier {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IMobileAppIdentifier) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): MobileAppIdentifier {
        data = typeof data === 'object' ? data : {};
        let result = new MobileAppIdentifier();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

/** The identifier for a mobile app. */
export interface IMobileAppIdentifier {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

/** The ManagedAppPolicy resource represents a base type for platform specific policies. */
export class ManagedAppPolicy extends Entity implements IManagedAppPolicy {
    /** The date and time the policy was created. */
    createdDateTime?: Date | undefined;
    /** The policy's description. */
    description?: string | undefined;
    /** Policy display name. */
    displayName?: string | undefined;
    /** Last time the policy was modified. */
    lastModifiedDateTime?: Date | undefined;
    /** Version of the entity. */
    version?: string | undefined;

    constructor(data?: IManagedAppPolicy) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.displayName = _data["displayName"];
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.version = _data["version"];
        }
    }

    static override fromJS(data: any): ManagedAppPolicy {
        data = typeof data === 'object' ? data : {};
        let result = new ManagedAppPolicy();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }
}

/** The ManagedAppPolicy resource represents a base type for platform specific policies. */
export interface IManagedAppPolicy extends IEntity {
    /** The date and time the policy was created. */
    createdDateTime?: Date | undefined;
    /** The policy's description. */
    description?: string | undefined;
    /** Policy display name. */
    displayName?: string | undefined;
    /** Last time the policy was modified. */
    lastModifiedDateTime?: Date | undefined;
    /** Version of the entity. */
    version?: string | undefined;
}

/** The reason for which a user has been flagged */
export enum ManagedAppFlaggedReason {
    None = 0,
    RootedDevice = 1,
}

/** Represents an operation applied against an app registration. */
export class ManagedAppOperation extends Entity implements IManagedAppOperation {
    /** The operation name. */
    displayName?: string | undefined;
    /** The last time the app operation was modified. */
    lastModifiedDateTime?: Date | undefined;
    /** The current state of the operation */
    state?: string | undefined;
    /** Version of the entity. */
    version?: string | undefined;

    constructor(data?: IManagedAppOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.state = _data["state"];
            this.version = _data["version"];
        }
    }

    static override fromJS(data: any): ManagedAppOperation {
        data = typeof data === 'object' ? data : {};
        let result = new ManagedAppOperation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["state"] = this.state;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }
}

/** Represents an operation applied against an app registration. */
export interface IManagedAppOperation extends IEntity {
    /** The operation name. */
    displayName?: string | undefined;
    /** The last time the app operation was modified. */
    lastModifiedDateTime?: Date | undefined;
    /** The current state of the operation */
    state?: string | undefined;
    /** Version of the entity. */
    version?: string | undefined;
}

/** Devices that are managed or pre-enrolled through Intune */
export class ManagedDevice extends Entity implements IManagedDevice {
    /** The code that allows the Activation Lock on managed device to be bypassed. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity in LIST call. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only. */
    activationLockBypassCode?: string | undefined;
    /** Android security patch level. This property is read-only. */
    androidSecurityPatchLevel?: string | undefined;
    /** The unique identifier for the Azure Active Directory device. Read only. This property is read-only. */
    azureADDeviceId?: string | undefined;
    /** Whether the device is Azure Active Directory registered. This property is read-only. */
    azureADRegistered?: boolean | undefined;
    /** The DateTime when device compliance grace period expires. This property is read-only. */
    complianceGracePeriodExpirationDateTime?: Date | undefined;
    /** Compliance state. */
    complianceState?: ComplianceState | undefined;
    /** ConfigrMgr client enabled features. This property is read-only. */
    configurationManagerClientEnabledFeatures?: ConfigurationManagerClientEnabledFeatures | undefined;
    /** List of ComplexType deviceActionResult objects. This property is read-only. */
    deviceActionResults?: DeviceActionResult[] | undefined;
    /** Device category */
    deviceCategory?: DeviceCategory | undefined;
    /** Device category display name. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only. */
    deviceCategoryDisplayName?: string | undefined;
    /** Device compliance policy states for this device. */
    deviceCompliancePolicyStates?: DeviceCompliancePolicyState[] | undefined;
    /** Device configuration states for this device. */
    deviceConfigurationStates?: DeviceConfigurationState[] | undefined;
    /** Possible ways of adding a mobile device to management. */
    deviceEnrollmentType?: DeviceEnrollmentType | undefined;
    /** The device health attestation state. This property is read-only. */
    deviceHealthAttestationState?: DeviceHealthAttestationState | undefined;
    /** Name of the device. This property is read-only. */
    deviceName?: string | undefined;
    /** Device registration status. */
    deviceRegistrationState?: DeviceRegistrationState | undefined;
    /** Whether the device is Exchange ActiveSync activated. This property is read-only. */
    easActivated?: boolean | undefined;
    /** Exchange ActivationSync activation time of the device. This property is read-only. */
    easActivationDateTime?: Date | undefined;
    /** Exchange ActiveSync Id of the device. This property is read-only. */
    easDeviceId?: string | undefined;
    /** Email(s) for the user associated with the device. This property is read-only. */
    emailAddress?: string | undefined;
    /** Enrollment time of the device. Supports $filter operator 'lt' and 'gt'. This property is read-only. */
    enrolledDateTime?: Date | undefined;
    /** Name of the enrollment profile assigned to the device. Default value is empty string, indicating no enrollment profile was assgined. This property is read-only. */
    enrollmentProfileName?: string | undefined;
    /** Indicates Ethernet MAC Address of the device. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity. Individual get call with select query options is needed to retrieve actual values. Example: deviceManagement/managedDevices({managedDeviceId})?$select=ethernetMacAddress Supports: $select. $Search is not supported. Read-only. This property is read-only. */
    ethernetMacAddress?: string | undefined;
    /** Device Exchange Access State. */
    exchangeAccessState?: DeviceManagementExchangeAccessState | undefined;
    /** Device Exchange Access State Reason. */
    exchangeAccessStateReason?: DeviceManagementExchangeAccessStateReason | undefined;
    /** Last time the device contacted Exchange. This property is read-only. */
    exchangeLastSuccessfulSyncDateTime?: Date | undefined;
    /** Free Storage in Bytes. Default value is 0. Read-only. This property is read-only. */
    freeStorageSpaceInBytes?: number | undefined;
    /** Integrated Circuit Card Identifier, it is A SIM card's unique identification number. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only. */
    iccid?: string | undefined;
    /** IMEI. This property is read-only. */
    imei?: string | undefined;
    /** Device encryption status. This property is read-only. */
    isEncrypted?: boolean | undefined;
    /** Device supervised status. This property is read-only. */
    isSupervised?: boolean | undefined;
    /** Whether the device is jail broken or rooted. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only. */
    jailBroken?: string | undefined;
    /** The date and time that the device last completed a successful sync with Intune. Supports $filter operator 'lt' and 'gt'. This property is read-only. */
    lastSyncDateTime?: Date | undefined;
    /** List of log collection requests */
    logCollectionRequests?: DeviceLogCollectionResponse[] | undefined;
    /** Automatically generated name to identify a device. Can be overwritten to a user friendly name. */
    managedDeviceName?: string | undefined;
    /** Owner type of device. */
    managedDeviceOwnerType?: ManagedDeviceOwnerType | undefined;
    /** The managementAgent property */
    managementAgent?: ManagementAgentType | undefined;
    /** Reports device management certificate expiration date. This property is read-only. */
    managementCertificateExpirationDate?: Date | undefined;
    /** Manufacturer of the device. This property is read-only. */
    manufacturer?: string | undefined;
    /** MEID. This property is read-only. */
    meid?: string | undefined;
    /** Model of the device. This property is read-only. */
    model?: string | undefined;
    /** Notes on the device created by IT Admin. Default is null. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. */
    notes?: string | undefined;
    /** Operating system of the device. Windows, iOS, etc. This property is read-only. */
    operatingSystem?: string | undefined;
    /** Operating system version of the device. This property is read-only. */
    osVersion?: string | undefined;
    /** Available health states for the Device Health API */
    partnerReportedThreatState?: ManagedDevicePartnerReportedHealthState | undefined;
    /** Phone number of the device. This property is read-only. */
    phoneNumber?: string | undefined;
    /** Total Memory in Bytes. Default is 0. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. Read-only. This property is read-only. */
    physicalMemoryInBytes?: number | undefined;
    /** An error string that identifies issues when creating Remote Assistance session objects. This property is read-only. */
    remoteAssistanceSessionErrorDetails?: string | undefined;
    /** Url that allows a Remote Assistance session to be established with the device. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. This property is read-only. */
    remoteAssistanceSessionUrl?: string | undefined;
    /** Reports if the managed iOS device is user approval enrollment. This property is read-only. */
    requireUserEnrollmentApproval?: boolean | undefined;
    /** SerialNumber. This property is read-only. */
    serialNumber?: string | undefined;
    /** Subscriber Carrier. This property is read-only. */
    subscriberCarrier?: string | undefined;
    /** Total Storage in Bytes. This property is read-only. */
    totalStorageSpaceInBytes?: number | undefined;
    /** Unique Device Identifier for iOS and macOS devices. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only. */
    udid?: string | undefined;
    /** User display name. This property is read-only. */
    userDisplayName?: string | undefined;
    /** Unique Identifier for the user associated with the device. This property is read-only. */
    userId?: string | undefined;
    /** Device user principal name. This property is read-only. */
    userPrincipalName?: string | undefined;
    /** The primary users associated with the managed device. */
    users?: User[] | undefined;
    /** Wi-Fi MAC. This property is read-only. */
    wiFiMacAddress?: string | undefined;
    /** The device protection status. This property is read-only. */
    windowsProtectionState?: WindowsProtectionState | undefined;

    constructor(data?: IManagedDevice) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activationLockBypassCode = _data["activationLockBypassCode"];
            this.androidSecurityPatchLevel = _data["androidSecurityPatchLevel"];
            this.azureADDeviceId = _data["azureADDeviceId"];
            this.azureADRegistered = _data["azureADRegistered"];
            this.complianceGracePeriodExpirationDateTime = _data["complianceGracePeriodExpirationDateTime"] ? new Date(_data["complianceGracePeriodExpirationDateTime"].toString()) : <any>undefined;
            this.complianceState = _data["complianceState"];
            this.configurationManagerClientEnabledFeatures = _data["configurationManagerClientEnabledFeatures"] ? ConfigurationManagerClientEnabledFeatures.fromJS(_data["configurationManagerClientEnabledFeatures"]) : <any>undefined;
            if (Array.isArray(_data["deviceActionResults"])) {
                this.deviceActionResults = [] as any;
                for (let item of _data["deviceActionResults"])
                    this.deviceActionResults!.push(DeviceActionResult.fromJS(item));
            }
            this.deviceCategory = _data["deviceCategory"] ? DeviceCategory.fromJS(_data["deviceCategory"]) : <any>undefined;
            this.deviceCategoryDisplayName = _data["deviceCategoryDisplayName"];
            if (Array.isArray(_data["deviceCompliancePolicyStates"])) {
                this.deviceCompliancePolicyStates = [] as any;
                for (let item of _data["deviceCompliancePolicyStates"])
                    this.deviceCompliancePolicyStates!.push(DeviceCompliancePolicyState.fromJS(item));
            }
            if (Array.isArray(_data["deviceConfigurationStates"])) {
                this.deviceConfigurationStates = [] as any;
                for (let item of _data["deviceConfigurationStates"])
                    this.deviceConfigurationStates!.push(DeviceConfigurationState.fromJS(item));
            }
            this.deviceEnrollmentType = _data["deviceEnrollmentType"];
            this.deviceHealthAttestationState = _data["deviceHealthAttestationState"] ? DeviceHealthAttestationState.fromJS(_data["deviceHealthAttestationState"]) : <any>undefined;
            this.deviceName = _data["deviceName"];
            this.deviceRegistrationState = _data["deviceRegistrationState"];
            this.easActivated = _data["easActivated"];
            this.easActivationDateTime = _data["easActivationDateTime"] ? new Date(_data["easActivationDateTime"].toString()) : <any>undefined;
            this.easDeviceId = _data["easDeviceId"];
            this.emailAddress = _data["emailAddress"];
            this.enrolledDateTime = _data["enrolledDateTime"] ? new Date(_data["enrolledDateTime"].toString()) : <any>undefined;
            this.enrollmentProfileName = _data["enrollmentProfileName"];
            this.ethernetMacAddress = _data["ethernetMacAddress"];
            this.exchangeAccessState = _data["exchangeAccessState"];
            this.exchangeAccessStateReason = _data["exchangeAccessStateReason"];
            this.exchangeLastSuccessfulSyncDateTime = _data["exchangeLastSuccessfulSyncDateTime"] ? new Date(_data["exchangeLastSuccessfulSyncDateTime"].toString()) : <any>undefined;
            this.freeStorageSpaceInBytes = _data["freeStorageSpaceInBytes"];
            this.iccid = _data["iccid"];
            this.imei = _data["imei"];
            this.isEncrypted = _data["isEncrypted"];
            this.isSupervised = _data["isSupervised"];
            this.jailBroken = _data["jailBroken"];
            this.lastSyncDateTime = _data["lastSyncDateTime"] ? new Date(_data["lastSyncDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["logCollectionRequests"])) {
                this.logCollectionRequests = [] as any;
                for (let item of _data["logCollectionRequests"])
                    this.logCollectionRequests!.push(DeviceLogCollectionResponse.fromJS(item));
            }
            this.managedDeviceName = _data["managedDeviceName"];
            this.managedDeviceOwnerType = _data["managedDeviceOwnerType"];
            this.managementAgent = _data["managementAgent"];
            this.managementCertificateExpirationDate = _data["managementCertificateExpirationDate"] ? new Date(_data["managementCertificateExpirationDate"].toString()) : <any>undefined;
            this.manufacturer = _data["manufacturer"];
            this.meid = _data["meid"];
            this.model = _data["model"];
            this.notes = _data["notes"];
            this.operatingSystem = _data["operatingSystem"];
            this.osVersion = _data["osVersion"];
            this.partnerReportedThreatState = _data["partnerReportedThreatState"];
            this.phoneNumber = _data["phoneNumber"];
            this.physicalMemoryInBytes = _data["physicalMemoryInBytes"];
            this.remoteAssistanceSessionErrorDetails = _data["remoteAssistanceSessionErrorDetails"];
            this.remoteAssistanceSessionUrl = _data["remoteAssistanceSessionUrl"];
            this.requireUserEnrollmentApproval = _data["requireUserEnrollmentApproval"];
            this.serialNumber = _data["serialNumber"];
            this.subscriberCarrier = _data["subscriberCarrier"];
            this.totalStorageSpaceInBytes = _data["totalStorageSpaceInBytes"];
            this.udid = _data["udid"];
            this.userDisplayName = _data["userDisplayName"];
            this.userId = _data["userId"];
            this.userPrincipalName = _data["userPrincipalName"];
            if (Array.isArray(_data["users"])) {
                this.users = [] as any;
                for (let item of _data["users"])
                    this.users!.push(User.fromJS(item));
            }
            this.wiFiMacAddress = _data["wiFiMacAddress"];
            this.windowsProtectionState = _data["windowsProtectionState"] ? WindowsProtectionState.fromJS(_data["windowsProtectionState"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ManagedDevice {
        data = typeof data === 'object' ? data : {};
        let result = new ManagedDevice();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activationLockBypassCode"] = this.activationLockBypassCode;
        data["androidSecurityPatchLevel"] = this.androidSecurityPatchLevel;
        data["azureADDeviceId"] = this.azureADDeviceId;
        data["azureADRegistered"] = this.azureADRegistered;
        data["complianceGracePeriodExpirationDateTime"] = this.complianceGracePeriodExpirationDateTime ? this.complianceGracePeriodExpirationDateTime.toISOString() : <any>undefined;
        data["complianceState"] = this.complianceState;
        data["configurationManagerClientEnabledFeatures"] = this.configurationManagerClientEnabledFeatures ? this.configurationManagerClientEnabledFeatures.toJSON() : <any>undefined;
        if (Array.isArray(this.deviceActionResults)) {
            data["deviceActionResults"] = [];
            for (let item of this.deviceActionResults)
                data["deviceActionResults"].push(item.toJSON());
        }
        data["deviceCategory"] = this.deviceCategory ? this.deviceCategory.toJSON() : <any>undefined;
        data["deviceCategoryDisplayName"] = this.deviceCategoryDisplayName;
        if (Array.isArray(this.deviceCompliancePolicyStates)) {
            data["deviceCompliancePolicyStates"] = [];
            for (let item of this.deviceCompliancePolicyStates)
                data["deviceCompliancePolicyStates"].push(item.toJSON());
        }
        if (Array.isArray(this.deviceConfigurationStates)) {
            data["deviceConfigurationStates"] = [];
            for (let item of this.deviceConfigurationStates)
                data["deviceConfigurationStates"].push(item.toJSON());
        }
        data["deviceEnrollmentType"] = this.deviceEnrollmentType;
        data["deviceHealthAttestationState"] = this.deviceHealthAttestationState ? this.deviceHealthAttestationState.toJSON() : <any>undefined;
        data["deviceName"] = this.deviceName;
        data["deviceRegistrationState"] = this.deviceRegistrationState;
        data["easActivated"] = this.easActivated;
        data["easActivationDateTime"] = this.easActivationDateTime ? this.easActivationDateTime.toISOString() : <any>undefined;
        data["easDeviceId"] = this.easDeviceId;
        data["emailAddress"] = this.emailAddress;
        data["enrolledDateTime"] = this.enrolledDateTime ? this.enrolledDateTime.toISOString() : <any>undefined;
        data["enrollmentProfileName"] = this.enrollmentProfileName;
        data["ethernetMacAddress"] = this.ethernetMacAddress;
        data["exchangeAccessState"] = this.exchangeAccessState;
        data["exchangeAccessStateReason"] = this.exchangeAccessStateReason;
        data["exchangeLastSuccessfulSyncDateTime"] = this.exchangeLastSuccessfulSyncDateTime ? this.exchangeLastSuccessfulSyncDateTime.toISOString() : <any>undefined;
        data["freeStorageSpaceInBytes"] = this.freeStorageSpaceInBytes;
        data["iccid"] = this.iccid;
        data["imei"] = this.imei;
        data["isEncrypted"] = this.isEncrypted;
        data["isSupervised"] = this.isSupervised;
        data["jailBroken"] = this.jailBroken;
        data["lastSyncDateTime"] = this.lastSyncDateTime ? this.lastSyncDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.logCollectionRequests)) {
            data["logCollectionRequests"] = [];
            for (let item of this.logCollectionRequests)
                data["logCollectionRequests"].push(item.toJSON());
        }
        data["managedDeviceName"] = this.managedDeviceName;
        data["managedDeviceOwnerType"] = this.managedDeviceOwnerType;
        data["managementAgent"] = this.managementAgent;
        data["managementCertificateExpirationDate"] = this.managementCertificateExpirationDate ? this.managementCertificateExpirationDate.toISOString() : <any>undefined;
        data["manufacturer"] = this.manufacturer;
        data["meid"] = this.meid;
        data["model"] = this.model;
        data["notes"] = this.notes;
        data["operatingSystem"] = this.operatingSystem;
        data["osVersion"] = this.osVersion;
        data["partnerReportedThreatState"] = this.partnerReportedThreatState;
        data["phoneNumber"] = this.phoneNumber;
        data["physicalMemoryInBytes"] = this.physicalMemoryInBytes;
        data["remoteAssistanceSessionErrorDetails"] = this.remoteAssistanceSessionErrorDetails;
        data["remoteAssistanceSessionUrl"] = this.remoteAssistanceSessionUrl;
        data["requireUserEnrollmentApproval"] = this.requireUserEnrollmentApproval;
        data["serialNumber"] = this.serialNumber;
        data["subscriberCarrier"] = this.subscriberCarrier;
        data["totalStorageSpaceInBytes"] = this.totalStorageSpaceInBytes;
        data["udid"] = this.udid;
        data["userDisplayName"] = this.userDisplayName;
        data["userId"] = this.userId;
        data["userPrincipalName"] = this.userPrincipalName;
        if (Array.isArray(this.users)) {
            data["users"] = [];
            for (let item of this.users)
                data["users"].push(item.toJSON());
        }
        data["wiFiMacAddress"] = this.wiFiMacAddress;
        data["windowsProtectionState"] = this.windowsProtectionState ? this.windowsProtectionState.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** Devices that are managed or pre-enrolled through Intune */
export interface IManagedDevice extends IEntity {
    /** The code that allows the Activation Lock on managed device to be bypassed. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity in LIST call. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only. */
    activationLockBypassCode?: string | undefined;
    /** Android security patch level. This property is read-only. */
    androidSecurityPatchLevel?: string | undefined;
    /** The unique identifier for the Azure Active Directory device. Read only. This property is read-only. */
    azureADDeviceId?: string | undefined;
    /** Whether the device is Azure Active Directory registered. This property is read-only. */
    azureADRegistered?: boolean | undefined;
    /** The DateTime when device compliance grace period expires. This property is read-only. */
    complianceGracePeriodExpirationDateTime?: Date | undefined;
    /** Compliance state. */
    complianceState?: ComplianceState | undefined;
    /** ConfigrMgr client enabled features. This property is read-only. */
    configurationManagerClientEnabledFeatures?: ConfigurationManagerClientEnabledFeatures | undefined;
    /** List of ComplexType deviceActionResult objects. This property is read-only. */
    deviceActionResults?: DeviceActionResult[] | undefined;
    /** Device category */
    deviceCategory?: DeviceCategory | undefined;
    /** Device category display name. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only. */
    deviceCategoryDisplayName?: string | undefined;
    /** Device compliance policy states for this device. */
    deviceCompliancePolicyStates?: DeviceCompliancePolicyState[] | undefined;
    /** Device configuration states for this device. */
    deviceConfigurationStates?: DeviceConfigurationState[] | undefined;
    /** Possible ways of adding a mobile device to management. */
    deviceEnrollmentType?: DeviceEnrollmentType | undefined;
    /** The device health attestation state. This property is read-only. */
    deviceHealthAttestationState?: DeviceHealthAttestationState | undefined;
    /** Name of the device. This property is read-only. */
    deviceName?: string | undefined;
    /** Device registration status. */
    deviceRegistrationState?: DeviceRegistrationState | undefined;
    /** Whether the device is Exchange ActiveSync activated. This property is read-only. */
    easActivated?: boolean | undefined;
    /** Exchange ActivationSync activation time of the device. This property is read-only. */
    easActivationDateTime?: Date | undefined;
    /** Exchange ActiveSync Id of the device. This property is read-only. */
    easDeviceId?: string | undefined;
    /** Email(s) for the user associated with the device. This property is read-only. */
    emailAddress?: string | undefined;
    /** Enrollment time of the device. Supports $filter operator 'lt' and 'gt'. This property is read-only. */
    enrolledDateTime?: Date | undefined;
    /** Name of the enrollment profile assigned to the device. Default value is empty string, indicating no enrollment profile was assgined. This property is read-only. */
    enrollmentProfileName?: string | undefined;
    /** Indicates Ethernet MAC Address of the device. Default, is Null (Non-Default property) for this property when returned as part of managedDevice entity. Individual get call with select query options is needed to retrieve actual values. Example: deviceManagement/managedDevices({managedDeviceId})?$select=ethernetMacAddress Supports: $select. $Search is not supported. Read-only. This property is read-only. */
    ethernetMacAddress?: string | undefined;
    /** Device Exchange Access State. */
    exchangeAccessState?: DeviceManagementExchangeAccessState | undefined;
    /** Device Exchange Access State Reason. */
    exchangeAccessStateReason?: DeviceManagementExchangeAccessStateReason | undefined;
    /** Last time the device contacted Exchange. This property is read-only. */
    exchangeLastSuccessfulSyncDateTime?: Date | undefined;
    /** Free Storage in Bytes. Default value is 0. Read-only. This property is read-only. */
    freeStorageSpaceInBytes?: number | undefined;
    /** Integrated Circuit Card Identifier, it is A SIM card's unique identification number. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only. */
    iccid?: string | undefined;
    /** IMEI. This property is read-only. */
    imei?: string | undefined;
    /** Device encryption status. This property is read-only. */
    isEncrypted?: boolean | undefined;
    /** Device supervised status. This property is read-only. */
    isSupervised?: boolean | undefined;
    /** Whether the device is jail broken or rooted. Default is an empty string. Supports $filter operator 'eq' and 'or'. This property is read-only. */
    jailBroken?: string | undefined;
    /** The date and time that the device last completed a successful sync with Intune. Supports $filter operator 'lt' and 'gt'. This property is read-only. */
    lastSyncDateTime?: Date | undefined;
    /** List of log collection requests */
    logCollectionRequests?: DeviceLogCollectionResponse[] | undefined;
    /** Automatically generated name to identify a device. Can be overwritten to a user friendly name. */
    managedDeviceName?: string | undefined;
    /** Owner type of device. */
    managedDeviceOwnerType?: ManagedDeviceOwnerType | undefined;
    /** The managementAgent property */
    managementAgent?: ManagementAgentType | undefined;
    /** Reports device management certificate expiration date. This property is read-only. */
    managementCertificateExpirationDate?: Date | undefined;
    /** Manufacturer of the device. This property is read-only. */
    manufacturer?: string | undefined;
    /** MEID. This property is read-only. */
    meid?: string | undefined;
    /** Model of the device. This property is read-only. */
    model?: string | undefined;
    /** Notes on the device created by IT Admin. Default is null. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. */
    notes?: string | undefined;
    /** Operating system of the device. Windows, iOS, etc. This property is read-only. */
    operatingSystem?: string | undefined;
    /** Operating system version of the device. This property is read-only. */
    osVersion?: string | undefined;
    /** Available health states for the Device Health API */
    partnerReportedThreatState?: ManagedDevicePartnerReportedHealthState | undefined;
    /** Phone number of the device. This property is read-only. */
    phoneNumber?: string | undefined;
    /** Total Memory in Bytes. Default is 0. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. Read-only. This property is read-only. */
    physicalMemoryInBytes?: number | undefined;
    /** An error string that identifies issues when creating Remote Assistance session objects. This property is read-only. */
    remoteAssistanceSessionErrorDetails?: string | undefined;
    /** Url that allows a Remote Assistance session to be established with the device. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. This property is read-only. */
    remoteAssistanceSessionUrl?: string | undefined;
    /** Reports if the managed iOS device is user approval enrollment. This property is read-only. */
    requireUserEnrollmentApproval?: boolean | undefined;
    /** SerialNumber. This property is read-only. */
    serialNumber?: string | undefined;
    /** Subscriber Carrier. This property is read-only. */
    subscriberCarrier?: string | undefined;
    /** Total Storage in Bytes. This property is read-only. */
    totalStorageSpaceInBytes?: number | undefined;
    /** Unique Device Identifier for iOS and macOS devices. Default is an empty string. To retrieve actual values GET call needs to be made, with device id and included in select parameter. Supports: $select. $Search is not supported. Read-only. This property is read-only. */
    udid?: string | undefined;
    /** User display name. This property is read-only. */
    userDisplayName?: string | undefined;
    /** Unique Identifier for the user associated with the device. This property is read-only. */
    userId?: string | undefined;
    /** Device user principal name. This property is read-only. */
    userPrincipalName?: string | undefined;
    /** The primary users associated with the managed device. */
    users?: User[] | undefined;
    /** Wi-Fi MAC. This property is read-only. */
    wiFiMacAddress?: string | undefined;
    /** The device protection status. This property is read-only. */
    windowsProtectionState?: WindowsProtectionState | undefined;
}

/** Compliance state. */
export enum ComplianceState {
    Unknown = 0,
    Compliant = 1,
    Noncompliant = 2,
    Conflict = 3,
    Error = 4,
    InGracePeriod = 5,
    ConfigManager = 6,
}

/** configuration Manager client enabled features */
export class ConfigurationManagerClientEnabledFeatures implements IConfigurationManagerClientEnabledFeatures {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Whether compliance policy is managed by Intune */
    compliancePolicy?: boolean | undefined;
    /** Whether device configuration is managed by Intune */
    deviceConfiguration?: boolean | undefined;
    /** Whether inventory is managed by Intune */
    inventory?: boolean | undefined;
    /** Whether modern application is managed by Intune */
    modernApps?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Whether resource access is managed by Intune */
    resourceAccess?: boolean | undefined;
    /** Whether Windows Update for Business is managed by Intune */
    windowsUpdateForBusiness?: boolean | undefined;

    constructor(data?: IConfigurationManagerClientEnabledFeatures) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.compliancePolicy = _data["compliancePolicy"];
            this.deviceConfiguration = _data["deviceConfiguration"];
            this.inventory = _data["inventory"];
            this.modernApps = _data["modernApps"];
            this.odataType = _data["odataType"];
            this.resourceAccess = _data["resourceAccess"];
            this.windowsUpdateForBusiness = _data["windowsUpdateForBusiness"];
        }
    }

    static fromJS(data: any): ConfigurationManagerClientEnabledFeatures {
        data = typeof data === 'object' ? data : {};
        let result = new ConfigurationManagerClientEnabledFeatures();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["compliancePolicy"] = this.compliancePolicy;
        data["deviceConfiguration"] = this.deviceConfiguration;
        data["inventory"] = this.inventory;
        data["modernApps"] = this.modernApps;
        data["odataType"] = this.odataType;
        data["resourceAccess"] = this.resourceAccess;
        data["windowsUpdateForBusiness"] = this.windowsUpdateForBusiness;
        return data;
    }
}

/** configuration Manager client enabled features */
export interface IConfigurationManagerClientEnabledFeatures {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Whether compliance policy is managed by Intune */
    compliancePolicy?: boolean | undefined;
    /** Whether device configuration is managed by Intune */
    deviceConfiguration?: boolean | undefined;
    /** Whether inventory is managed by Intune */
    inventory?: boolean | undefined;
    /** Whether modern application is managed by Intune */
    modernApps?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Whether resource access is managed by Intune */
    resourceAccess?: boolean | undefined;
    /** Whether Windows Update for Business is managed by Intune */
    windowsUpdateForBusiness?: boolean | undefined;
}

/** Device action result */
export class DeviceActionResult implements IDeviceActionResult {
    /** Action name */
    actionName?: string | undefined;
    /** State of the action on the device */
    actionState?: ActionState | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Time the action state was last updated */
    lastUpdatedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Time the action was initiated */
    startDateTime?: Date | undefined;

    constructor(data?: IDeviceActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionName = _data["actionName"];
            this.actionState = _data["actionState"];
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.lastUpdatedDateTime = _data["lastUpdatedDateTime"] ? new Date(_data["lastUpdatedDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): DeviceActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionName"] = this.actionName;
        data["actionState"] = this.actionState;
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["lastUpdatedDateTime"] = this.lastUpdatedDateTime ? this.lastUpdatedDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        return data;
    }
}

/** Device action result */
export interface IDeviceActionResult {
    /** Action name */
    actionName?: string | undefined;
    /** State of the action on the device */
    actionState?: ActionState | undefined;
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Time the action state was last updated */
    lastUpdatedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Time the action was initiated */
    startDateTime?: Date | undefined;
}

/** State of the action on the device */
export enum ActionState {
    None = 0,
    Pending = 1,
    Canceled = 2,
    Active = 3,
    Done = 4,
    Failed = 5,
    NotSupported = 6,
}

/** Device categories provides a way to organize your devices. Using device categories, company administrators can define their own categories that make sense to their company. These categories can then be applied to a device in the Intune Azure console or selected by a user during device enrollment. You can filter reports and create dynamic Azure Active Directory device groups based on device categories. */
export class DeviceCategory extends Entity implements IDeviceCategory {
    /** Optional description for the device category. */
    description?: string | undefined;
    /** Display name for the device category. */
    displayName?: string | undefined;

    constructor(data?: IDeviceCategory) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.description = _data["description"];
            this.displayName = _data["displayName"];
        }
    }

    static override fromJS(data: any): DeviceCategory {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceCategory();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["displayName"] = this.displayName;
        super.toJSON(data);
        return data;
    }
}

/** Device categories provides a way to organize your devices. Using device categories, company administrators can define their own categories that make sense to their company. These categories can then be applied to a device in the Intune Azure console or selected by a user during device enrollment. You can filter reports and create dynamic Azure Active Directory device groups based on device categories. */
export interface IDeviceCategory extends IEntity {
    /** Optional description for the device category. */
    description?: string | undefined;
    /** Display name for the device category. */
    displayName?: string | undefined;
}

/** Device Compliance Policy State for a given device. */
export class DeviceCompliancePolicyState extends Entity implements IDeviceCompliancePolicyState {
    /** The name of the policy for this policyBase */
    displayName?: string | undefined;
    /** Supported platform types for policies. */
    platformType?: PolicyPlatformType | undefined;
    /** Count of how many setting a policy holds */
    settingCount?: number | undefined;
    /** The settingStates property */
    settingStates?: DeviceCompliancePolicySettingState[] | undefined;
    /** The state property */
    state?: ComplianceStatus | undefined;
    /** The version of the policy */
    version?: number | undefined;

    constructor(data?: IDeviceCompliancePolicyState) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.platformType = _data["platformType"];
            this.settingCount = _data["settingCount"];
            if (Array.isArray(_data["settingStates"])) {
                this.settingStates = [] as any;
                for (let item of _data["settingStates"])
                    this.settingStates!.push(DeviceCompliancePolicySettingState.fromJS(item));
            }
            this.state = _data["state"];
            this.version = _data["version"];
        }
    }

    static override fromJS(data: any): DeviceCompliancePolicyState {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceCompliancePolicyState();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["platformType"] = this.platformType;
        data["settingCount"] = this.settingCount;
        if (Array.isArray(this.settingStates)) {
            data["settingStates"] = [];
            for (let item of this.settingStates)
                data["settingStates"].push(item.toJSON());
        }
        data["state"] = this.state;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }
}

/** Device Compliance Policy State for a given device. */
export interface IDeviceCompliancePolicyState extends IEntity {
    /** The name of the policy for this policyBase */
    displayName?: string | undefined;
    /** Supported platform types for policies. */
    platformType?: PolicyPlatformType | undefined;
    /** Count of how many setting a policy holds */
    settingCount?: number | undefined;
    /** The settingStates property */
    settingStates?: DeviceCompliancePolicySettingState[] | undefined;
    /** The state property */
    state?: ComplianceStatus | undefined;
    /** The version of the policy */
    version?: number | undefined;
}

/** Supported platform types for policies. */
export enum PolicyPlatformType {
    Android = 0,
    AndroidForWork = 1,
    IOS = 2,
    MacOS = 3,
    WindowsPhone81 = 4,
    Windows81AndLater = 5,
    Windows10AndLater = 6,
    All = 7,
}

/** Device Compilance Policy Setting State for a given device. */
export class DeviceCompliancePolicySettingState implements IDeviceCompliancePolicySettingState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Current value of setting on device */
    currentValue?: string | undefined;
    /** Error code for the setting */
    errorCode?: number | undefined;
    /** Error description */
    errorDescription?: string | undefined;
    /** Name of setting instance that is being reported. */
    instanceDisplayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The setting that is being reported */
    setting?: string | undefined;
    /** Localized/user friendly setting name that is being reported */
    settingName?: string | undefined;
    /** Contributing policies */
    sources?: SettingSource[] | undefined;
    /** The state property */
    state?: ComplianceStatus | undefined;
    /** UserEmail */
    userEmail?: string | undefined;
    /** UserId */
    userId?: string | undefined;
    /** UserName */
    userName?: string | undefined;
    /** UserPrincipalName. */
    userPrincipalName?: string | undefined;

    constructor(data?: IDeviceCompliancePolicySettingState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.currentValue = _data["currentValue"];
            this.errorCode = _data["errorCode"];
            this.errorDescription = _data["errorDescription"];
            this.instanceDisplayName = _data["instanceDisplayName"];
            this.odataType = _data["odataType"];
            this.setting = _data["setting"];
            this.settingName = _data["settingName"];
            if (Array.isArray(_data["sources"])) {
                this.sources = [] as any;
                for (let item of _data["sources"])
                    this.sources!.push(SettingSource.fromJS(item));
            }
            this.state = _data["state"];
            this.userEmail = _data["userEmail"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.userPrincipalName = _data["userPrincipalName"];
        }
    }

    static fromJS(data: any): DeviceCompliancePolicySettingState {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceCompliancePolicySettingState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["currentValue"] = this.currentValue;
        data["errorCode"] = this.errorCode;
        data["errorDescription"] = this.errorDescription;
        data["instanceDisplayName"] = this.instanceDisplayName;
        data["odataType"] = this.odataType;
        data["setting"] = this.setting;
        data["settingName"] = this.settingName;
        if (Array.isArray(this.sources)) {
            data["sources"] = [];
            for (let item of this.sources)
                data["sources"].push(item.toJSON());
        }
        data["state"] = this.state;
        data["userEmail"] = this.userEmail;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["userPrincipalName"] = this.userPrincipalName;
        return data;
    }
}

/** Device Compilance Policy Setting State for a given device. */
export interface IDeviceCompliancePolicySettingState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Current value of setting on device */
    currentValue?: string | undefined;
    /** Error code for the setting */
    errorCode?: number | undefined;
    /** Error description */
    errorDescription?: string | undefined;
    /** Name of setting instance that is being reported. */
    instanceDisplayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The setting that is being reported */
    setting?: string | undefined;
    /** Localized/user friendly setting name that is being reported */
    settingName?: string | undefined;
    /** Contributing policies */
    sources?: SettingSource[] | undefined;
    /** The state property */
    state?: ComplianceStatus | undefined;
    /** UserEmail */
    userEmail?: string | undefined;
    /** UserId */
    userId?: string | undefined;
    /** UserName */
    userName?: string | undefined;
    /** UserPrincipalName. */
    userPrincipalName?: string | undefined;
}

export class SettingSource implements ISettingSource {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Not yet documented */
    displayName?: string | undefined;
    /** Not yet documented */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The sourceType property */
    sourceType?: SettingSourceType | undefined;

    constructor(data?: ISettingSource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.id = _data["id"];
            this.odataType = _data["odataType"];
            this.sourceType = _data["sourceType"];
        }
    }

    static fromJS(data: any): SettingSource {
        data = typeof data === 'object' ? data : {};
        let result = new SettingSource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["id"] = this.id;
        data["odataType"] = this.odataType;
        data["sourceType"] = this.sourceType;
        return data;
    }
}

export interface ISettingSource {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Not yet documented */
    displayName?: string | undefined;
    /** Not yet documented */
    id?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The sourceType property */
    sourceType?: SettingSourceType | undefined;
}

export enum SettingSourceType {
    DeviceConfiguration = 0,
    DeviceIntent = 1,
}

export enum ComplianceStatus {
    Unknown = 0,
    NotApplicable = 1,
    Compliant = 2,
    Remediated = 3,
    NonCompliant = 4,
    Error = 5,
    Conflict = 6,
    NotAssigned = 7,
}

/** Device Configuration State for a given device. */
export class DeviceConfigurationState extends Entity implements IDeviceConfigurationState {
    /** The name of the policy for this policyBase */
    displayName?: string | undefined;
    /** Supported platform types for policies. */
    platformType?: PolicyPlatformType | undefined;
    /** Count of how many setting a policy holds */
    settingCount?: number | undefined;
    /** The settingStates property */
    settingStates?: DeviceConfigurationSettingState[] | undefined;
    /** The state property */
    state?: ComplianceStatus | undefined;
    /** The version of the policy */
    version?: number | undefined;

    constructor(data?: IDeviceConfigurationState) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.platformType = _data["platformType"];
            this.settingCount = _data["settingCount"];
            if (Array.isArray(_data["settingStates"])) {
                this.settingStates = [] as any;
                for (let item of _data["settingStates"])
                    this.settingStates!.push(DeviceConfigurationSettingState.fromJS(item));
            }
            this.state = _data["state"];
            this.version = _data["version"];
        }
    }

    static override fromJS(data: any): DeviceConfigurationState {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceConfigurationState();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["platformType"] = this.platformType;
        data["settingCount"] = this.settingCount;
        if (Array.isArray(this.settingStates)) {
            data["settingStates"] = [];
            for (let item of this.settingStates)
                data["settingStates"].push(item.toJSON());
        }
        data["state"] = this.state;
        data["version"] = this.version;
        super.toJSON(data);
        return data;
    }
}

/** Device Configuration State for a given device. */
export interface IDeviceConfigurationState extends IEntity {
    /** The name of the policy for this policyBase */
    displayName?: string | undefined;
    /** Supported platform types for policies. */
    platformType?: PolicyPlatformType | undefined;
    /** Count of how many setting a policy holds */
    settingCount?: number | undefined;
    /** The settingStates property */
    settingStates?: DeviceConfigurationSettingState[] | undefined;
    /** The state property */
    state?: ComplianceStatus | undefined;
    /** The version of the policy */
    version?: number | undefined;
}

/** Device Configuration Setting State for a given device. */
export class DeviceConfigurationSettingState implements IDeviceConfigurationSettingState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Current value of setting on device */
    currentValue?: string | undefined;
    /** Error code for the setting */
    errorCode?: number | undefined;
    /** Error description */
    errorDescription?: string | undefined;
    /** Name of setting instance that is being reported. */
    instanceDisplayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The setting that is being reported */
    setting?: string | undefined;
    /** Localized/user friendly setting name that is being reported */
    settingName?: string | undefined;
    /** Contributing policies */
    sources?: SettingSource[] | undefined;
    /** The state property */
    state?: ComplianceStatus | undefined;
    /** UserEmail */
    userEmail?: string | undefined;
    /** UserId */
    userId?: string | undefined;
    /** UserName */
    userName?: string | undefined;
    /** UserPrincipalName. */
    userPrincipalName?: string | undefined;

    constructor(data?: IDeviceConfigurationSettingState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.currentValue = _data["currentValue"];
            this.errorCode = _data["errorCode"];
            this.errorDescription = _data["errorDescription"];
            this.instanceDisplayName = _data["instanceDisplayName"];
            this.odataType = _data["odataType"];
            this.setting = _data["setting"];
            this.settingName = _data["settingName"];
            if (Array.isArray(_data["sources"])) {
                this.sources = [] as any;
                for (let item of _data["sources"])
                    this.sources!.push(SettingSource.fromJS(item));
            }
            this.state = _data["state"];
            this.userEmail = _data["userEmail"];
            this.userId = _data["userId"];
            this.userName = _data["userName"];
            this.userPrincipalName = _data["userPrincipalName"];
        }
    }

    static fromJS(data: any): DeviceConfigurationSettingState {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceConfigurationSettingState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["currentValue"] = this.currentValue;
        data["errorCode"] = this.errorCode;
        data["errorDescription"] = this.errorDescription;
        data["instanceDisplayName"] = this.instanceDisplayName;
        data["odataType"] = this.odataType;
        data["setting"] = this.setting;
        data["settingName"] = this.settingName;
        if (Array.isArray(this.sources)) {
            data["sources"] = [];
            for (let item of this.sources)
                data["sources"].push(item.toJSON());
        }
        data["state"] = this.state;
        data["userEmail"] = this.userEmail;
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["userPrincipalName"] = this.userPrincipalName;
        return data;
    }
}

/** Device Configuration Setting State for a given device. */
export interface IDeviceConfigurationSettingState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Current value of setting on device */
    currentValue?: string | undefined;
    /** Error code for the setting */
    errorCode?: number | undefined;
    /** Error description */
    errorDescription?: string | undefined;
    /** Name of setting instance that is being reported. */
    instanceDisplayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The setting that is being reported */
    setting?: string | undefined;
    /** Localized/user friendly setting name that is being reported */
    settingName?: string | undefined;
    /** Contributing policies */
    sources?: SettingSource[] | undefined;
    /** The state property */
    state?: ComplianceStatus | undefined;
    /** UserEmail */
    userEmail?: string | undefined;
    /** UserId */
    userId?: string | undefined;
    /** UserName */
    userName?: string | undefined;
    /** UserPrincipalName. */
    userPrincipalName?: string | undefined;
}

/** Possible ways of adding a mobile device to management. */
export enum DeviceEnrollmentType {
    Unknown = 0,
    UserEnrollment = 1,
    DeviceEnrollmentManager = 2,
    AppleBulkWithUser = 3,
    AppleBulkWithoutUser = 4,
    WindowsAzureADJoin = 5,
    WindowsBulkUserless = 6,
    WindowsAutoEnrollment = 7,
    WindowsBulkAzureDomainJoin = 8,
    WindowsCoManagement = 9,
    WindowsAzureADJoinUsingDeviceAuth = 10,
    AppleUserEnrollment = 11,
    AppleUserEnrollmentWithServiceAccount = 12,
}

export class DeviceHealthAttestationState implements IDeviceHealthAttestationState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** TWhen an Attestation Identity Key (AIK) is present on a device, it indicates that the device has an endorsement key (EK) certificate. */
    attestationIdentityKey?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** On or Off of BitLocker Drive Encryption */
    bitLockerStatus?: string | undefined;
    /** The security version number of the Boot Application */
    bootAppSecurityVersion?: string | undefined;
    /** When bootDebugging is enabled, the device is used in development and testing */
    bootDebugging?: string | undefined;
    /** The security version number of the Boot Application */
    bootManagerSecurityVersion?: string | undefined;
    /** The version of the Boot Manager */
    bootManagerVersion?: string | undefined;
    /** The Boot Revision List that was loaded during initial boot on the attested device */
    bootRevisionListInfo?: string | undefined;
    /** When code integrity is enabled, code execution is restricted to integrity verified code */
    codeIntegrity?: string | undefined;
    /** The version of the Boot Manager */
    codeIntegrityCheckVersion?: string | undefined;
    /** The Code Integrity policy that is controlling the security of the boot environment */
    codeIntegrityPolicy?: string | undefined;
    /** The DHA report version. (Namespace version) */
    contentNamespaceUrl?: string | undefined;
    /** The HealthAttestation state schema version */
    contentVersion?: string | undefined;
    /** DEP Policy defines a set of hardware and software technologies that perform additional checks on memory */
    dataExcutionPolicy?: string | undefined;
    /** The DHA report version. (Namespace version) */
    deviceHealthAttestationStatus?: string | undefined;
    /** ELAM provides protection for the computers in your network when they start up */
    earlyLaunchAntiMalwareDriverProtection?: string | undefined;
    /** This attribute indicates if DHA is supported for the device */
    healthAttestationSupportedStatus?: string | undefined;
    /** This attribute appears if DHA-Service detects an integrity issue */
    healthStatusMismatchInfo?: string | undefined;
    /** The DateTime when device was evaluated or issued to MDM */
    issuedDateTime?: Date | undefined;
    /** The Timestamp of the last update. */
    lastUpdateDateTime?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** When operatingSystemKernelDebugging is enabled, the device is used in development and testing */
    operatingSystemKernelDebugging?: string | undefined;
    /** The Operating System Revision List that was loaded during initial boot on the attested device */
    operatingSystemRevListInfo?: string | undefined;
    /** The measurement that is captured in PCR[0] */
    pcr0?: string | undefined;
    /** Informational attribute that identifies the HASH algorithm that was used by TPM */
    pcrHashAlgorithm?: string | undefined;
    /** The number of times a PC device has hibernated or resumed */
    resetCount?: number | undefined;
    /** The number of times a PC device has rebooted */
    restartCount?: number | undefined;
    /** Safe mode is a troubleshooting option for Windows that starts your computer in a limited state */
    safeMode?: string | undefined;
    /** When Secure Boot is enabled, the core components must have the correct cryptographic signatures */
    secureBoot?: string | undefined;
    /** Fingerprint of the Custom Secure Boot Configuration Policy */
    secureBootConfigurationPolicyFingerPrint?: string | undefined;
    /** When test signing is allowed, the device does not enforce signature validation during boot */
    testSigning?: string | undefined;
    /** The security version number of the Boot Application */
    tpmVersion?: string | undefined;
    /** VSM is a container that protects high value assets from a compromised kernel */
    virtualSecureMode?: string | undefined;
    /** Operating system running with limited services that is used to prepare a computer for Windows */
    windowsPE?: string | undefined;

    constructor(data?: IDeviceHealthAttestationState) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.attestationIdentityKey = _data["attestationIdentityKey"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.bitLockerStatus = _data["bitLockerStatus"];
            this.bootAppSecurityVersion = _data["bootAppSecurityVersion"];
            this.bootDebugging = _data["bootDebugging"];
            this.bootManagerSecurityVersion = _data["bootManagerSecurityVersion"];
            this.bootManagerVersion = _data["bootManagerVersion"];
            this.bootRevisionListInfo = _data["bootRevisionListInfo"];
            this.codeIntegrity = _data["codeIntegrity"];
            this.codeIntegrityCheckVersion = _data["codeIntegrityCheckVersion"];
            this.codeIntegrityPolicy = _data["codeIntegrityPolicy"];
            this.contentNamespaceUrl = _data["contentNamespaceUrl"];
            this.contentVersion = _data["contentVersion"];
            this.dataExcutionPolicy = _data["dataExcutionPolicy"];
            this.deviceHealthAttestationStatus = _data["deviceHealthAttestationStatus"];
            this.earlyLaunchAntiMalwareDriverProtection = _data["earlyLaunchAntiMalwareDriverProtection"];
            this.healthAttestationSupportedStatus = _data["healthAttestationSupportedStatus"];
            this.healthStatusMismatchInfo = _data["healthStatusMismatchInfo"];
            this.issuedDateTime = _data["issuedDateTime"] ? new Date(_data["issuedDateTime"].toString()) : <any>undefined;
            this.lastUpdateDateTime = _data["lastUpdateDateTime"];
            this.odataType = _data["odataType"];
            this.operatingSystemKernelDebugging = _data["operatingSystemKernelDebugging"];
            this.operatingSystemRevListInfo = _data["operatingSystemRevListInfo"];
            this.pcr0 = _data["pcr0"];
            this.pcrHashAlgorithm = _data["pcrHashAlgorithm"];
            this.resetCount = _data["resetCount"];
            this.restartCount = _data["restartCount"];
            this.safeMode = _data["safeMode"];
            this.secureBoot = _data["secureBoot"];
            this.secureBootConfigurationPolicyFingerPrint = _data["secureBootConfigurationPolicyFingerPrint"];
            this.testSigning = _data["testSigning"];
            this.tpmVersion = _data["tpmVersion"];
            this.virtualSecureMode = _data["virtualSecureMode"];
            this.windowsPE = _data["windowsPE"];
        }
    }

    static fromJS(data: any): DeviceHealthAttestationState {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceHealthAttestationState();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["attestationIdentityKey"] = this.attestationIdentityKey;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["bitLockerStatus"] = this.bitLockerStatus;
        data["bootAppSecurityVersion"] = this.bootAppSecurityVersion;
        data["bootDebugging"] = this.bootDebugging;
        data["bootManagerSecurityVersion"] = this.bootManagerSecurityVersion;
        data["bootManagerVersion"] = this.bootManagerVersion;
        data["bootRevisionListInfo"] = this.bootRevisionListInfo;
        data["codeIntegrity"] = this.codeIntegrity;
        data["codeIntegrityCheckVersion"] = this.codeIntegrityCheckVersion;
        data["codeIntegrityPolicy"] = this.codeIntegrityPolicy;
        data["contentNamespaceUrl"] = this.contentNamespaceUrl;
        data["contentVersion"] = this.contentVersion;
        data["dataExcutionPolicy"] = this.dataExcutionPolicy;
        data["deviceHealthAttestationStatus"] = this.deviceHealthAttestationStatus;
        data["earlyLaunchAntiMalwareDriverProtection"] = this.earlyLaunchAntiMalwareDriverProtection;
        data["healthAttestationSupportedStatus"] = this.healthAttestationSupportedStatus;
        data["healthStatusMismatchInfo"] = this.healthStatusMismatchInfo;
        data["issuedDateTime"] = this.issuedDateTime ? this.issuedDateTime.toISOString() : <any>undefined;
        data["lastUpdateDateTime"] = this.lastUpdateDateTime;
        data["odataType"] = this.odataType;
        data["operatingSystemKernelDebugging"] = this.operatingSystemKernelDebugging;
        data["operatingSystemRevListInfo"] = this.operatingSystemRevListInfo;
        data["pcr0"] = this.pcr0;
        data["pcrHashAlgorithm"] = this.pcrHashAlgorithm;
        data["resetCount"] = this.resetCount;
        data["restartCount"] = this.restartCount;
        data["safeMode"] = this.safeMode;
        data["secureBoot"] = this.secureBoot;
        data["secureBootConfigurationPolicyFingerPrint"] = this.secureBootConfigurationPolicyFingerPrint;
        data["testSigning"] = this.testSigning;
        data["tpmVersion"] = this.tpmVersion;
        data["virtualSecureMode"] = this.virtualSecureMode;
        data["windowsPE"] = this.windowsPE;
        return data;
    }
}

export interface IDeviceHealthAttestationState {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** TWhen an Attestation Identity Key (AIK) is present on a device, it indicates that the device has an endorsement key (EK) certificate. */
    attestationIdentityKey?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** On or Off of BitLocker Drive Encryption */
    bitLockerStatus?: string | undefined;
    /** The security version number of the Boot Application */
    bootAppSecurityVersion?: string | undefined;
    /** When bootDebugging is enabled, the device is used in development and testing */
    bootDebugging?: string | undefined;
    /** The security version number of the Boot Application */
    bootManagerSecurityVersion?: string | undefined;
    /** The version of the Boot Manager */
    bootManagerVersion?: string | undefined;
    /** The Boot Revision List that was loaded during initial boot on the attested device */
    bootRevisionListInfo?: string | undefined;
    /** When code integrity is enabled, code execution is restricted to integrity verified code */
    codeIntegrity?: string | undefined;
    /** The version of the Boot Manager */
    codeIntegrityCheckVersion?: string | undefined;
    /** The Code Integrity policy that is controlling the security of the boot environment */
    codeIntegrityPolicy?: string | undefined;
    /** The DHA report version. (Namespace version) */
    contentNamespaceUrl?: string | undefined;
    /** The HealthAttestation state schema version */
    contentVersion?: string | undefined;
    /** DEP Policy defines a set of hardware and software technologies that perform additional checks on memory */
    dataExcutionPolicy?: string | undefined;
    /** The DHA report version. (Namespace version) */
    deviceHealthAttestationStatus?: string | undefined;
    /** ELAM provides protection for the computers in your network when they start up */
    earlyLaunchAntiMalwareDriverProtection?: string | undefined;
    /** This attribute indicates if DHA is supported for the device */
    healthAttestationSupportedStatus?: string | undefined;
    /** This attribute appears if DHA-Service detects an integrity issue */
    healthStatusMismatchInfo?: string | undefined;
    /** The DateTime when device was evaluated or issued to MDM */
    issuedDateTime?: Date | undefined;
    /** The Timestamp of the last update. */
    lastUpdateDateTime?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** When operatingSystemKernelDebugging is enabled, the device is used in development and testing */
    operatingSystemKernelDebugging?: string | undefined;
    /** The Operating System Revision List that was loaded during initial boot on the attested device */
    operatingSystemRevListInfo?: string | undefined;
    /** The measurement that is captured in PCR[0] */
    pcr0?: string | undefined;
    /** Informational attribute that identifies the HASH algorithm that was used by TPM */
    pcrHashAlgorithm?: string | undefined;
    /** The number of times a PC device has hibernated or resumed */
    resetCount?: number | undefined;
    /** The number of times a PC device has rebooted */
    restartCount?: number | undefined;
    /** Safe mode is a troubleshooting option for Windows that starts your computer in a limited state */
    safeMode?: string | undefined;
    /** When Secure Boot is enabled, the core components must have the correct cryptographic signatures */
    secureBoot?: string | undefined;
    /** Fingerprint of the Custom Secure Boot Configuration Policy */
    secureBootConfigurationPolicyFingerPrint?: string | undefined;
    /** When test signing is allowed, the device does not enforce signature validation during boot */
    testSigning?: string | undefined;
    /** The security version number of the Boot Application */
    tpmVersion?: string | undefined;
    /** VSM is a container that protects high value assets from a compromised kernel */
    virtualSecureMode?: string | undefined;
    /** Operating system running with limited services that is used to prepare a computer for Windows */
    windowsPE?: string | undefined;
}

/** Device registration status. */
export enum DeviceRegistrationState {
    NotRegistered = 0,
    Registered = 1,
    Revoked = 2,
    KeyConflict = 3,
    ApprovalPending = 4,
    CertificateReset = 5,
    NotRegisteredPendingEnrollment = 6,
    Unknown = 7,
}

/** Device Exchange Access State. */
export enum DeviceManagementExchangeAccessState {
    None = 0,
    Unknown = 1,
    Allowed = 2,
    Blocked = 3,
    Quarantined = 4,
}

/** Device Exchange Access State Reason. */
export enum DeviceManagementExchangeAccessStateReason {
    None = 0,
    Unknown = 1,
    ExchangeGlobalRule = 2,
    ExchangeIndividualRule = 3,
    ExchangeDeviceRule = 4,
    ExchangeUpgrade = 5,
    ExchangeMailboxPolicy = 6,
    Other = 7,
    Compliant = 8,
    NotCompliant = 9,
    NotEnrolled = 10,
    UnknownLocation = 11,
    MfaRequired = 12,
    AzureADBlockDueToAccessPolicy = 13,
    CompromisedPassword = 14,
    DeviceNotKnownWithManagedApp = 15,
}

/** Windows Log Collection request entity. */
export class DeviceLogCollectionResponse extends Entity implements IDeviceLogCollectionResponse {
    /** The User Principal Name (UPN) of the user that enrolled the device. */
    enrolledByUser?: string | undefined;
    /** The DateTime of the expiration of the logs. */
    expirationDateTimeUTC?: Date | undefined;
    /** The UPN for who initiated the request. */
    initiatedByUserPrincipalName?: string | undefined;
    /** Indicates Intune device unique identifier. */
    managedDeviceId?: string | undefined;
    /** The DateTime the request was received. */
    receivedDateTimeUTC?: Date | undefined;
    /** The DateTime of the request. */
    requestedDateTimeUTC?: Date | undefined;
    /** The size of the logs in KB. Valid values -1.79769313486232E+308 to 1.79769313486232E+308 */
    sizeInKB?: number | undefined;
    /** AppLogUploadStatus */
    status?: AppLogUploadState | undefined;

    constructor(data?: IDeviceLogCollectionResponse) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.enrolledByUser = _data["enrolledByUser"];
            this.expirationDateTimeUTC = _data["expirationDateTimeUTC"] ? new Date(_data["expirationDateTimeUTC"].toString()) : <any>undefined;
            this.initiatedByUserPrincipalName = _data["initiatedByUserPrincipalName"];
            this.managedDeviceId = _data["managedDeviceId"];
            this.receivedDateTimeUTC = _data["receivedDateTimeUTC"] ? new Date(_data["receivedDateTimeUTC"].toString()) : <any>undefined;
            this.requestedDateTimeUTC = _data["requestedDateTimeUTC"] ? new Date(_data["requestedDateTimeUTC"].toString()) : <any>undefined;
            this.sizeInKB = _data["sizeInKB"];
            this.status = _data["status"];
        }
    }

    static override fromJS(data: any): DeviceLogCollectionResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceLogCollectionResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["enrolledByUser"] = this.enrolledByUser;
        data["expirationDateTimeUTC"] = this.expirationDateTimeUTC ? this.expirationDateTimeUTC.toISOString() : <any>undefined;
        data["initiatedByUserPrincipalName"] = this.initiatedByUserPrincipalName;
        data["managedDeviceId"] = this.managedDeviceId;
        data["receivedDateTimeUTC"] = this.receivedDateTimeUTC ? this.receivedDateTimeUTC.toISOString() : <any>undefined;
        data["requestedDateTimeUTC"] = this.requestedDateTimeUTC ? this.requestedDateTimeUTC.toISOString() : <any>undefined;
        data["sizeInKB"] = this.sizeInKB;
        data["status"] = this.status;
        super.toJSON(data);
        return data;
    }
}

/** Windows Log Collection request entity. */
export interface IDeviceLogCollectionResponse extends IEntity {
    /** The User Principal Name (UPN) of the user that enrolled the device. */
    enrolledByUser?: string | undefined;
    /** The DateTime of the expiration of the logs. */
    expirationDateTimeUTC?: Date | undefined;
    /** The UPN for who initiated the request. */
    initiatedByUserPrincipalName?: string | undefined;
    /** Indicates Intune device unique identifier. */
    managedDeviceId?: string | undefined;
    /** The DateTime the request was received. */
    receivedDateTimeUTC?: Date | undefined;
    /** The DateTime of the request. */
    requestedDateTimeUTC?: Date | undefined;
    /** The size of the logs in KB. Valid values -1.79769313486232E+308 to 1.79769313486232E+308 */
    sizeInKB?: number | undefined;
    /** AppLogUploadStatus */
    status?: AppLogUploadState | undefined;
}

/** AppLogUploadStatus */
export enum AppLogUploadState {
    Pending = 0,
    Completed = 1,
    Failed = 2,
    UnknownFutureValue = 3,
}

/** Owner type of device. */
export enum ManagedDeviceOwnerType {
    Unknown = 0,
    Company = 1,
    Personal = 2,
}

export enum ManagementAgentType {
    Eas = 0,
    Mdm = 1,
    EasMdm = 2,
    IntuneClient = 3,
    EasIntuneClient = 4,
    ConfigurationManagerClient = 5,
    ConfigurationManagerClientMdm = 6,
    ConfigurationManagerClientMdmEas = 7,
    Unknown = 8,
    Jamf = 9,
    GoogleCloudDevicePolicyController = 10,
    Microsoft365ManagedMdm = 11,
    MsSense = 12,
}

/** Available health states for the Device Health API */
export enum ManagedDevicePartnerReportedHealthState {
    Unknown = 0,
    Activated = 1,
    Deactivated = 2,
    Secured = 3,
    LowSeverity = 4,
    MediumSeverity = 5,
    HighSeverity = 6,
    Unresponsive = 7,
    Compromised = 8,
    Misconfigured = 9,
}

/** Device protection status entity. */
export class WindowsProtectionState extends Entity implements IWindowsProtectionState {
    /** Current anti malware version */
    antiMalwareVersion?: string | undefined;
    /** Device malware list */
    detectedMalwareState?: WindowsDeviceMalwareState[] | undefined;
    /** Indicates device's health state. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. */
    deviceState?: WindowsDeviceHealthState | undefined;
    /** Current endpoint protection engine's version */
    engineVersion?: string | undefined;
    /** When TRUE indicates full scan is overdue, when FALSE indicates full scan is not overdue. Defaults to setting on client device. */
    fullScanOverdue?: boolean | undefined;
    /** When TRUE indicates full scan is required, when FALSE indicates full scan is not required. Defaults to setting on client device. */
    fullScanRequired?: boolean | undefined;
    /** When TRUE indicates the device is a virtual machine, when FALSE indicates the device is not a virtual machine. Defaults to setting on client device. */
    isVirtualMachine?: boolean | undefined;
    /** Last quick scan datetime */
    lastFullScanDateTime?: Date | undefined;
    /** Last full scan signature version */
    lastFullScanSignatureVersion?: string | undefined;
    /** Last quick scan datetime */
    lastQuickScanDateTime?: Date | undefined;
    /** Last quick scan signature version */
    lastQuickScanSignatureVersion?: string | undefined;
    /** Last device health status reported time */
    lastReportedDateTime?: Date | undefined;
    /** When TRUE indicates anti malware is enabled when FALSE indicates anti malware is not enabled. */
    malwareProtectionEnabled?: boolean | undefined;
    /** When TRUE indicates network inspection system enabled, when FALSE indicates network inspection system is not enabled. Defaults to setting on client device. */
    networkInspectionSystemEnabled?: boolean | undefined;
    /** Product Status of Windows Defender Antivirus. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. */
    productStatus?: WindowsDefenderProductStatus | undefined;
    /** When TRUE indicates quick scan is overdue, when FALSE indicates quick scan is not overdue. Defaults to setting on client device. */
    quickScanOverdue?: boolean | undefined;
    /** When TRUE indicates real time protection is enabled, when FALSE indicates real time protection is not enabled. Defaults to setting on client device. */
    realTimeProtectionEnabled?: boolean | undefined;
    /** When TRUE indicates reboot is required, when FALSE indicates when TRUE indicates reboot is not required. Defaults to setting on client device. */
    rebootRequired?: boolean | undefined;
    /** When TRUE indicates signature is out of date, when FALSE indicates signature is not out of date. Defaults to setting on client device. */
    signatureUpdateOverdue?: boolean | undefined;
    /** Current malware definitions version */
    signatureVersion?: string | undefined;
    /** When TRUE indicates the Windows Defender tamper protection feature is enabled, when FALSE indicates the Windows Defender tamper protection feature is not enabled. Defaults to setting on client device. */
    tamperProtectionEnabled?: boolean | undefined;

    constructor(data?: IWindowsProtectionState) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.antiMalwareVersion = _data["antiMalwareVersion"];
            if (Array.isArray(_data["detectedMalwareState"])) {
                this.detectedMalwareState = [] as any;
                for (let item of _data["detectedMalwareState"])
                    this.detectedMalwareState!.push(WindowsDeviceMalwareState.fromJS(item));
            }
            this.deviceState = _data["deviceState"];
            this.engineVersion = _data["engineVersion"];
            this.fullScanOverdue = _data["fullScanOverdue"];
            this.fullScanRequired = _data["fullScanRequired"];
            this.isVirtualMachine = _data["isVirtualMachine"];
            this.lastFullScanDateTime = _data["lastFullScanDateTime"] ? new Date(_data["lastFullScanDateTime"].toString()) : <any>undefined;
            this.lastFullScanSignatureVersion = _data["lastFullScanSignatureVersion"];
            this.lastQuickScanDateTime = _data["lastQuickScanDateTime"] ? new Date(_data["lastQuickScanDateTime"].toString()) : <any>undefined;
            this.lastQuickScanSignatureVersion = _data["lastQuickScanSignatureVersion"];
            this.lastReportedDateTime = _data["lastReportedDateTime"] ? new Date(_data["lastReportedDateTime"].toString()) : <any>undefined;
            this.malwareProtectionEnabled = _data["malwareProtectionEnabled"];
            this.networkInspectionSystemEnabled = _data["networkInspectionSystemEnabled"];
            this.productStatus = _data["productStatus"];
            this.quickScanOverdue = _data["quickScanOverdue"];
            this.realTimeProtectionEnabled = _data["realTimeProtectionEnabled"];
            this.rebootRequired = _data["rebootRequired"];
            this.signatureUpdateOverdue = _data["signatureUpdateOverdue"];
            this.signatureVersion = _data["signatureVersion"];
            this.tamperProtectionEnabled = _data["tamperProtectionEnabled"];
        }
    }

    static override fromJS(data: any): WindowsProtectionState {
        data = typeof data === 'object' ? data : {};
        let result = new WindowsProtectionState();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["antiMalwareVersion"] = this.antiMalwareVersion;
        if (Array.isArray(this.detectedMalwareState)) {
            data["detectedMalwareState"] = [];
            for (let item of this.detectedMalwareState)
                data["detectedMalwareState"].push(item.toJSON());
        }
        data["deviceState"] = this.deviceState;
        data["engineVersion"] = this.engineVersion;
        data["fullScanOverdue"] = this.fullScanOverdue;
        data["fullScanRequired"] = this.fullScanRequired;
        data["isVirtualMachine"] = this.isVirtualMachine;
        data["lastFullScanDateTime"] = this.lastFullScanDateTime ? this.lastFullScanDateTime.toISOString() : <any>undefined;
        data["lastFullScanSignatureVersion"] = this.lastFullScanSignatureVersion;
        data["lastQuickScanDateTime"] = this.lastQuickScanDateTime ? this.lastQuickScanDateTime.toISOString() : <any>undefined;
        data["lastQuickScanSignatureVersion"] = this.lastQuickScanSignatureVersion;
        data["lastReportedDateTime"] = this.lastReportedDateTime ? this.lastReportedDateTime.toISOString() : <any>undefined;
        data["malwareProtectionEnabled"] = this.malwareProtectionEnabled;
        data["networkInspectionSystemEnabled"] = this.networkInspectionSystemEnabled;
        data["productStatus"] = this.productStatus;
        data["quickScanOverdue"] = this.quickScanOverdue;
        data["realTimeProtectionEnabled"] = this.realTimeProtectionEnabled;
        data["rebootRequired"] = this.rebootRequired;
        data["signatureUpdateOverdue"] = this.signatureUpdateOverdue;
        data["signatureVersion"] = this.signatureVersion;
        data["tamperProtectionEnabled"] = this.tamperProtectionEnabled;
        super.toJSON(data);
        return data;
    }
}

/** Device protection status entity. */
export interface IWindowsProtectionState extends IEntity {
    /** Current anti malware version */
    antiMalwareVersion?: string | undefined;
    /** Device malware list */
    detectedMalwareState?: WindowsDeviceMalwareState[] | undefined;
    /** Indicates device's health state. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. Possible values are: clean, fullScanPending, rebootPending, manualStepsPending, offlineScanPending, critical. */
    deviceState?: WindowsDeviceHealthState | undefined;
    /** Current endpoint protection engine's version */
    engineVersion?: string | undefined;
    /** When TRUE indicates full scan is overdue, when FALSE indicates full scan is not overdue. Defaults to setting on client device. */
    fullScanOverdue?: boolean | undefined;
    /** When TRUE indicates full scan is required, when FALSE indicates full scan is not required. Defaults to setting on client device. */
    fullScanRequired?: boolean | undefined;
    /** When TRUE indicates the device is a virtual machine, when FALSE indicates the device is not a virtual machine. Defaults to setting on client device. */
    isVirtualMachine?: boolean | undefined;
    /** Last quick scan datetime */
    lastFullScanDateTime?: Date | undefined;
    /** Last full scan signature version */
    lastFullScanSignatureVersion?: string | undefined;
    /** Last quick scan datetime */
    lastQuickScanDateTime?: Date | undefined;
    /** Last quick scan signature version */
    lastQuickScanSignatureVersion?: string | undefined;
    /** Last device health status reported time */
    lastReportedDateTime?: Date | undefined;
    /** When TRUE indicates anti malware is enabled when FALSE indicates anti malware is not enabled. */
    malwareProtectionEnabled?: boolean | undefined;
    /** When TRUE indicates network inspection system enabled, when FALSE indicates network inspection system is not enabled. Defaults to setting on client device. */
    networkInspectionSystemEnabled?: boolean | undefined;
    /** Product Status of Windows Defender Antivirus. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. Possible values are: noStatus, serviceNotRunning, serviceStartedWithoutMalwareProtection, pendingFullScanDueToThreatAction, pendingRebootDueToThreatAction, pendingManualStepsDueToThreatAction, avSignaturesOutOfDate, asSignaturesOutOfDate, noQuickScanHappenedForSpecifiedPeriod, noFullScanHappenedForSpecifiedPeriod, systemInitiatedScanInProgress, systemInitiatedCleanInProgress, samplesPendingSubmission, productRunningInEvaluationMode, productRunningInNonGenuineMode, productExpired, offlineScanRequired, serviceShutdownAsPartOfSystemShutdown, threatRemediationFailedCritically, threatRemediationFailedNonCritically, noStatusFlagsSet, platformOutOfDate, platformUpdateInProgress, platformAboutToBeOutdated, signatureOrPlatformEndOfLifeIsPastOrIsImpending, windowsSModeSignaturesInUseOnNonWin10SInstall. */
    productStatus?: WindowsDefenderProductStatus | undefined;
    /** When TRUE indicates quick scan is overdue, when FALSE indicates quick scan is not overdue. Defaults to setting on client device. */
    quickScanOverdue?: boolean | undefined;
    /** When TRUE indicates real time protection is enabled, when FALSE indicates real time protection is not enabled. Defaults to setting on client device. */
    realTimeProtectionEnabled?: boolean | undefined;
    /** When TRUE indicates reboot is required, when FALSE indicates when TRUE indicates reboot is not required. Defaults to setting on client device. */
    rebootRequired?: boolean | undefined;
    /** When TRUE indicates signature is out of date, when FALSE indicates signature is not out of date. Defaults to setting on client device. */
    signatureUpdateOverdue?: boolean | undefined;
    /** Current malware definitions version */
    signatureVersion?: string | undefined;
    /** When TRUE indicates the Windows Defender tamper protection feature is enabled, when FALSE indicates the Windows Defender tamper protection feature is not enabled. Defaults to setting on client device. */
    tamperProtectionEnabled?: boolean | undefined;
}

/** Malware detection entity. */
export class WindowsDeviceMalwareState extends Entity implements IWindowsDeviceMalwareState {
    /** Information URL to learn more about the malware */
    additionalInformationUrl?: string | undefined;
    /** Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule. */
    category?: WindowsMalwareCategory | undefined;
    /** Number of times the malware is detected */
    detectionCount?: number | undefined;
    /** Malware name */
    displayName?: string | undefined;
    /** Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning. */
    executionState?: WindowsMalwareExecutionState | undefined;
    /** Initial detection datetime of the malware */
    initialDetectionDateTime?: Date | undefined;
    /** The last time this particular threat was changed */
    lastStateChangeDateTime?: Date | undefined;
    /** Severity of the malware. Possible values are: unknown, low, moderate, high, severe. */
    severity?: WindowsMalwareSeverity | undefined;
    /** Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed. */
    state?: WindowsMalwareState | undefined;
    /** Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. */
    threatState?: WindowsMalwareThreatState | undefined;

    constructor(data?: IWindowsDeviceMalwareState) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.additionalInformationUrl = _data["additionalInformationUrl"];
            this.category = _data["category"];
            this.detectionCount = _data["detectionCount"];
            this.displayName = _data["displayName"];
            this.executionState = _data["executionState"];
            this.initialDetectionDateTime = _data["initialDetectionDateTime"] ? new Date(_data["initialDetectionDateTime"].toString()) : <any>undefined;
            this.lastStateChangeDateTime = _data["lastStateChangeDateTime"] ? new Date(_data["lastStateChangeDateTime"].toString()) : <any>undefined;
            this.severity = _data["severity"];
            this.state = _data["state"];
            this.threatState = _data["threatState"];
        }
    }

    static override fromJS(data: any): WindowsDeviceMalwareState {
        data = typeof data === 'object' ? data : {};
        let result = new WindowsDeviceMalwareState();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["additionalInformationUrl"] = this.additionalInformationUrl;
        data["category"] = this.category;
        data["detectionCount"] = this.detectionCount;
        data["displayName"] = this.displayName;
        data["executionState"] = this.executionState;
        data["initialDetectionDateTime"] = this.initialDetectionDateTime ? this.initialDetectionDateTime.toISOString() : <any>undefined;
        data["lastStateChangeDateTime"] = this.lastStateChangeDateTime ? this.lastStateChangeDateTime.toISOString() : <any>undefined;
        data["severity"] = this.severity;
        data["state"] = this.state;
        data["threatState"] = this.threatState;
        super.toJSON(data);
        return data;
    }
}

/** Malware detection entity. */
export interface IWindowsDeviceMalwareState extends IEntity {
    /** Information URL to learn more about the malware */
    additionalInformationUrl?: string | undefined;
    /** Category of the malware. Possible values are: invalid, adware, spyware, passwordStealer, trojanDownloader, worm, backdoor, remoteAccessTrojan, trojan, emailFlooder, keylogger, dialer, monitoringSoftware, browserModifier, cookie, browserPlugin, aolExploit, nuker, securityDisabler, jokeProgram, hostileActiveXControl, softwareBundler, stealthNotifier, settingsModifier, toolBar, remoteControlSoftware, trojanFtp, potentialUnwantedSoftware, icqExploit, trojanTelnet, exploit, filesharingProgram, malwareCreationTool, remoteControlSoftware, tool, trojanDenialOfService, trojanDropper, trojanMassMailer, trojanMonitoringSoftware, trojanProxyServer, virus, known, unknown, spp, behavior, vulnerability, policy, enterpriseUnwantedSoftware, ransom, hipsRule. */
    category?: WindowsMalwareCategory | undefined;
    /** Number of times the malware is detected */
    detectionCount?: number | undefined;
    /** Malware name */
    displayName?: string | undefined;
    /** Execution status of the malware like blocked/executing etc. Possible values are: unknown, blocked, allowed, running, notRunning. */
    executionState?: WindowsMalwareExecutionState | undefined;
    /** Initial detection datetime of the malware */
    initialDetectionDateTime?: Date | undefined;
    /** The last time this particular threat was changed */
    lastStateChangeDateTime?: Date | undefined;
    /** Severity of the malware. Possible values are: unknown, low, moderate, high, severe. */
    severity?: WindowsMalwareSeverity | undefined;
    /** Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: unknown, detected, cleaned, quarantined, removed, allowed, blocked, cleanFailed, quarantineFailed, removeFailed, allowFailed, abandoned, blockFailed. */
    state?: WindowsMalwareState | undefined;
    /** Current status of the malware like cleaned/quarantined/allowed etc. Possible values are: active, actionFailed, manualStepsRequired, fullScanRequired, rebootRequired, remediatedWithNonCriticalFailures, quarantined, removed, cleaned, allowed, noStatusCleared. */
    threatState?: WindowsMalwareThreatState | undefined;
}

/** Malware category id */
export enum WindowsMalwareCategory {
    Invalid = 0,
    Adware = 1,
    Spyware = 2,
    PasswordStealer = 3,
    TrojanDownloader = 4,
    Worm = 5,
    Backdoor = 6,
    RemoteAccessTrojan = 7,
    Trojan = 8,
    EmailFlooder = 9,
    Keylogger = 10,
    Dialer = 11,
    MonitoringSoftware = 12,
    BrowserModifier = 13,
    Cookie = 14,
    BrowserPlugin = 15,
    AolExploit = 16,
    Nuker = 17,
    SecurityDisabler = 18,
    JokeProgram = 19,
    HostileActiveXControl = 20,
    SoftwareBundler = 21,
    StealthNotifier = 22,
    SettingsModifier = 23,
    ToolBar = 24,
    RemoteControlSoftware = 25,
    TrojanFtp = 26,
    PotentialUnwantedSoftware = 27,
    IcqExploit = 28,
    TrojanTelnet = 29,
    Exploit = 30,
    FilesharingProgram = 31,
    MalwareCreationTool = 32,
    Remote_Control_Software = 33,
    Tool = 34,
    TrojanDenialOfService = 35,
    TrojanDropper = 36,
    TrojanMassMailer = 37,
    TrojanMonitoringSoftware = 38,
    TrojanProxyServer = 39,
    Virus = 40,
    Known = 41,
    Unknown = 42,
    Spp = 43,
    Behavior = 44,
    Vulnerability = 45,
    Policy = 46,
    EnterpriseUnwantedSoftware = 47,
    Ransom = 48,
    HipsRule = 49,
}

/** Malware execution status */
export enum WindowsMalwareExecutionState {
    Unknown = 0,
    Blocked = 1,
    Allowed = 2,
    Running = 3,
    NotRunning = 4,
}

/** Malware severity */
export enum WindowsMalwareSeverity {
    Unknown = 0,
    Low = 1,
    Moderate = 2,
    High = 3,
    Severe = 4,
}

/** Malware current status */
export enum WindowsMalwareState {
    Unknown = 0,
    Detected = 1,
    Cleaned = 2,
    Quarantined = 3,
    Removed = 4,
    Allowed = 5,
    Blocked = 6,
    CleanFailed = 7,
    QuarantineFailed = 8,
    RemoveFailed = 9,
    AllowFailed = 10,
    Abandoned = 11,
    BlockFailed = 12,
}

/** Malware threat status */
export enum WindowsMalwareThreatState {
    Active = 0,
    ActionFailed = 1,
    ManualStepsRequired = 2,
    FullScanRequired = 3,
    RebootRequired = 4,
    RemediatedWithNonCriticalFailures = 5,
    Quarantined = 6,
    Removed = 7,
    Cleaned = 8,
    Allowed = 9,
    NoStatusCleared = 10,
}

/** Computer endpoint protection state */
export enum WindowsDeviceHealthState {
    Clean = 1,
    FullScanPending = 2,
    RebootPending = 4,
    ManualStepsPending = 8,
    OfflineScanPending = 16,
    Critical = 32,
}

/** Product Status of Windows Defender */
export enum WindowsDefenderProductStatus {
    NoStatus = 1,
    ServiceNotRunning = 2,
    ServiceStartedWithoutMalwareProtection = 4,
    PendingFullScanDueToThreatAction = 8,
    PendingRebootDueToThreatAction = 16,
    PendingManualStepsDueToThreatAction = 32,
    AvSignaturesOutOfDate = 64,
    AsSignaturesOutOfDate = 128,
    NoQuickScanHappenedForSpecifiedPeriod = 256,
    NoFullScanHappenedForSpecifiedPeriod = 512,
    SystemInitiatedScanInProgress = 1024,
    SystemInitiatedCleanInProgress = 2048,
    SamplesPendingSubmission = 4096,
    ProductRunningInEvaluationMode = 8192,
    ProductRunningInNonGenuineMode = 16384,
    ProductExpired = 32768,
    OfflineScanRequired = 65536,
    ServiceShutdownAsPartOfSystemShutdown = 131072,
    ThreatRemediationFailedCritically = 262144,
    ThreatRemediationFailedNonCritically = 524288,
    NoStatusFlagsSet = 1048576,
    PlatformOutOfDate = 2097152,
    PlatformUpdateInProgress = 4194304,
    PlatformAboutToBeOutdated = 8388608,
    SignatureOrPlatformEndOfLifeIsPastOrIsImpending = 16777216,
    WindowsSModeSignaturesInUseOnNonWin10SInstall = 33554432,
}

export class OAuth2PermissionGrant extends Entity implements IOAuth2PermissionGrant {
    /** The object id (not appId) of the client service principal for the application that's authorized to act on behalf of a signed-in user when accessing an API. Required. Supports $filter (eq only). */
    clientId?: string | undefined;
    /** Indicates if authorization is granted for the client application to impersonate all users or only a specific user. AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific user. Consent on behalf of all users can be granted by an administrator. Nonadmin users might be authorized to consent on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only). */
    consentType?: string | undefined;
    /** The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If consentType is AllPrincipals this value is null. Required when consentType is Principal. Supports $filter (eq only). */
    principalId?: string | undefined;
    /** The id of the resource service principal to which access is authorized. This identifies the API that the client is authorized to attempt to call on behalf of a signed-in user. Supports $filter (eq only). */
    resourceId?: string | undefined;
    /** A space-separated list of the claim values for delegated permissions that should be included in access tokens for the resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the value field of one of the delegated permissions defined by the API, listed in the oauth2PermissionScopes property of the resource service principal. Must not exceed 3,850 characters in length. */
    scope?: string | undefined;

    constructor(data?: IOAuth2PermissionGrant) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.clientId = _data["clientId"];
            this.consentType = _data["consentType"];
            this.principalId = _data["principalId"];
            this.resourceId = _data["resourceId"];
            this.scope = _data["scope"];
        }
    }

    static override fromJS(data: any): OAuth2PermissionGrant {
        data = typeof data === 'object' ? data : {};
        let result = new OAuth2PermissionGrant();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clientId"] = this.clientId;
        data["consentType"] = this.consentType;
        data["principalId"] = this.principalId;
        data["resourceId"] = this.resourceId;
        data["scope"] = this.scope;
        super.toJSON(data);
        return data;
    }
}

export interface IOAuth2PermissionGrant extends IEntity {
    /** The object id (not appId) of the client service principal for the application that's authorized to act on behalf of a signed-in user when accessing an API. Required. Supports $filter (eq only). */
    clientId?: string | undefined;
    /** Indicates if authorization is granted for the client application to impersonate all users or only a specific user. AllPrincipals indicates authorization to impersonate all users. Principal indicates authorization to impersonate a specific user. Consent on behalf of all users can be granted by an administrator. Nonadmin users might be authorized to consent on behalf of themselves in some cases, for some delegated permissions. Required. Supports $filter (eq only). */
    consentType?: string | undefined;
    /** The id of the user on behalf of whom the client is authorized to access the resource, when consentType is Principal. If consentType is AllPrincipals this value is null. Required when consentType is Principal. Supports $filter (eq only). */
    principalId?: string | undefined;
    /** The id of the resource service principal to which access is authorized. This identifies the API that the client is authorized to attempt to call on behalf of a signed-in user. Supports $filter (eq only). */
    resourceId?: string | undefined;
    /** A space-separated list of the claim values for delegated permissions that should be included in access tokens for the resource application (the API). For example, openid User.Read GroupMember.Read.All. Each claim value should match the value field of one of the delegated permissions defined by the API, listed in the oauth2PermissionScopes property of the resource service principal. Must not exceed 3,850 characters in length. */
    scope?: string | undefined;
}

export class OnlineMeetingBase extends Entity implements IOnlineMeetingBase {
    /** Indicates whether attendees can turn on their camera. */
    allowAttendeeToEnableCamera?: boolean | undefined;
    /** Indicates whether attendees can turn on their microphone. */
    allowAttendeeToEnableMic?: boolean | undefined;
    /** Specifies who can be a presenter in a meeting. */
    allowedPresenters?: OnlineMeetingPresenters | undefined;
    /** Specifies the mode of the meeting chat. */
    allowMeetingChat?: MeetingChatMode | undefined;
    /** Specifies if participants are allowed to rename themselves in an instance of the meeting. */
    allowParticipantsToChangeName?: boolean | undefined;
    /** Indicates if Teams reactions are enabled for the meeting. */
    allowTeamworkReactions?: boolean | undefined;
    /** The attendance reports of an online meeting. Read-only. */
    attendanceReports?: MeetingAttendanceReport[] | undefined;
    /** The phone access (dial-in) information for an online meeting. Read-only. */
    audioConferencing?: AudioConferencing | undefined;
    /** The chat information associated with this online meeting. */
    chatInfo?: ChatInfo | undefined;
    /** Indicates whether to announce when callers join or leave. */
    isEntryExitAnnounced?: boolean | undefined;
    /** The join information in the language and locale variant specified in 'Accept-Language' request HTTP header. Read-only. */
    joinInformation?: ItemBody | undefined;
    /** Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings can't be modified. To make any changes to this property, you must cancel this meeting and create a new one. */
    joinMeetingIdSettings?: JoinMeetingIdSettings | undefined;
    /** The join URL of the online meeting. Read-only. */
    joinWebUrl?: string | undefined;
    /** Specifies which participants can bypass the meeting lobby. */
    lobbyBypassSettings?: LobbyBypassSettings | undefined;
    /** Indicates whether to record the meeting automatically. */
    recordAutomatically?: boolean | undefined;
    /** Specifies whether meeting chat history is shared with participants.  Possible values are: all, none, unknownFutureValue. */
    shareMeetingChatHistoryDefault?: MeetingChatHistoryDefaultMode | undefined;
    /** The subject of the online meeting. */
    subject?: string | undefined;
    /** The video teleconferencing ID. Read-only. */
    videoTeleconferenceId?: string | undefined;
    /** Specifies whether the client application should apply a watermark to a content type. */
    watermarkProtection?: WatermarkProtectionValues | undefined;

    constructor(data?: IOnlineMeetingBase) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.allowAttendeeToEnableCamera = _data["allowAttendeeToEnableCamera"];
            this.allowAttendeeToEnableMic = _data["allowAttendeeToEnableMic"];
            this.allowedPresenters = _data["allowedPresenters"];
            this.allowMeetingChat = _data["allowMeetingChat"];
            this.allowParticipantsToChangeName = _data["allowParticipantsToChangeName"];
            this.allowTeamworkReactions = _data["allowTeamworkReactions"];
            if (Array.isArray(_data["attendanceReports"])) {
                this.attendanceReports = [] as any;
                for (let item of _data["attendanceReports"])
                    this.attendanceReports!.push(MeetingAttendanceReport.fromJS(item));
            }
            this.audioConferencing = _data["audioConferencing"] ? AudioConferencing.fromJS(_data["audioConferencing"]) : <any>undefined;
            this.chatInfo = _data["chatInfo"] ? ChatInfo.fromJS(_data["chatInfo"]) : <any>undefined;
            this.isEntryExitAnnounced = _data["isEntryExitAnnounced"];
            this.joinInformation = _data["joinInformation"] ? ItemBody.fromJS(_data["joinInformation"]) : <any>undefined;
            this.joinMeetingIdSettings = _data["joinMeetingIdSettings"] ? JoinMeetingIdSettings.fromJS(_data["joinMeetingIdSettings"]) : <any>undefined;
            this.joinWebUrl = _data["joinWebUrl"];
            this.lobbyBypassSettings = _data["lobbyBypassSettings"] ? LobbyBypassSettings.fromJS(_data["lobbyBypassSettings"]) : <any>undefined;
            this.recordAutomatically = _data["recordAutomatically"];
            this.shareMeetingChatHistoryDefault = _data["shareMeetingChatHistoryDefault"];
            this.subject = _data["subject"];
            this.videoTeleconferenceId = _data["videoTeleconferenceId"];
            this.watermarkProtection = _data["watermarkProtection"] ? WatermarkProtectionValues.fromJS(_data["watermarkProtection"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): OnlineMeetingBase {
        data = typeof data === 'object' ? data : {};
        let result = new OnlineMeetingBase();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowAttendeeToEnableCamera"] = this.allowAttendeeToEnableCamera;
        data["allowAttendeeToEnableMic"] = this.allowAttendeeToEnableMic;
        data["allowedPresenters"] = this.allowedPresenters;
        data["allowMeetingChat"] = this.allowMeetingChat;
        data["allowParticipantsToChangeName"] = this.allowParticipantsToChangeName;
        data["allowTeamworkReactions"] = this.allowTeamworkReactions;
        if (Array.isArray(this.attendanceReports)) {
            data["attendanceReports"] = [];
            for (let item of this.attendanceReports)
                data["attendanceReports"].push(item.toJSON());
        }
        data["audioConferencing"] = this.audioConferencing ? this.audioConferencing.toJSON() : <any>undefined;
        data["chatInfo"] = this.chatInfo ? this.chatInfo.toJSON() : <any>undefined;
        data["isEntryExitAnnounced"] = this.isEntryExitAnnounced;
        data["joinInformation"] = this.joinInformation ? this.joinInformation.toJSON() : <any>undefined;
        data["joinMeetingIdSettings"] = this.joinMeetingIdSettings ? this.joinMeetingIdSettings.toJSON() : <any>undefined;
        data["joinWebUrl"] = this.joinWebUrl;
        data["lobbyBypassSettings"] = this.lobbyBypassSettings ? this.lobbyBypassSettings.toJSON() : <any>undefined;
        data["recordAutomatically"] = this.recordAutomatically;
        data["shareMeetingChatHistoryDefault"] = this.shareMeetingChatHistoryDefault;
        data["subject"] = this.subject;
        data["videoTeleconferenceId"] = this.videoTeleconferenceId;
        data["watermarkProtection"] = this.watermarkProtection ? this.watermarkProtection.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IOnlineMeetingBase extends IEntity {
    /** Indicates whether attendees can turn on their camera. */
    allowAttendeeToEnableCamera?: boolean | undefined;
    /** Indicates whether attendees can turn on their microphone. */
    allowAttendeeToEnableMic?: boolean | undefined;
    /** Specifies who can be a presenter in a meeting. */
    allowedPresenters?: OnlineMeetingPresenters | undefined;
    /** Specifies the mode of the meeting chat. */
    allowMeetingChat?: MeetingChatMode | undefined;
    /** Specifies if participants are allowed to rename themselves in an instance of the meeting. */
    allowParticipantsToChangeName?: boolean | undefined;
    /** Indicates if Teams reactions are enabled for the meeting. */
    allowTeamworkReactions?: boolean | undefined;
    /** The attendance reports of an online meeting. Read-only. */
    attendanceReports?: MeetingAttendanceReport[] | undefined;
    /** The phone access (dial-in) information for an online meeting. Read-only. */
    audioConferencing?: AudioConferencing | undefined;
    /** The chat information associated with this online meeting. */
    chatInfo?: ChatInfo | undefined;
    /** Indicates whether to announce when callers join or leave. */
    isEntryExitAnnounced?: boolean | undefined;
    /** The join information in the language and locale variant specified in 'Accept-Language' request HTTP header. Read-only. */
    joinInformation?: ItemBody | undefined;
    /** Specifies the joinMeetingId, the meeting passcode, and the requirement for the passcode. Once an onlineMeeting is created, the joinMeetingIdSettings can't be modified. To make any changes to this property, you must cancel this meeting and create a new one. */
    joinMeetingIdSettings?: JoinMeetingIdSettings | undefined;
    /** The join URL of the online meeting. Read-only. */
    joinWebUrl?: string | undefined;
    /** Specifies which participants can bypass the meeting lobby. */
    lobbyBypassSettings?: LobbyBypassSettings | undefined;
    /** Indicates whether to record the meeting automatically. */
    recordAutomatically?: boolean | undefined;
    /** Specifies whether meeting chat history is shared with participants.  Possible values are: all, none, unknownFutureValue. */
    shareMeetingChatHistoryDefault?: MeetingChatHistoryDefaultMode | undefined;
    /** The subject of the online meeting. */
    subject?: string | undefined;
    /** The video teleconferencing ID. Read-only. */
    videoTeleconferenceId?: string | undefined;
    /** Specifies whether the client application should apply a watermark to a content type. */
    watermarkProtection?: WatermarkProtectionValues | undefined;
}

export class OnlineMeeting extends OnlineMeetingBase implements IOnlineMeeting {
    /** The content stream of the attendee report of a Microsoft Teams live event. Read-only. */
    attendeeReport?: string | undefined;
    /** Settings related to a live event. */
    broadcastSettings?: BroadcastMeetingSettings | undefined;
    /** The meeting creation time in UTC. Read-only. */
    creationDateTime?: Date | undefined;
    /** The meeting end time in UTC. Required when you create an online meeting. */
    endDateTime?: Date | undefined;
    /** The externalId property */
    externalId?: string | undefined;
    /** Indicates whether this meeting is a Teams live event. */
    isBroadcast?: boolean | undefined;
    /** The participants associated with the online meeting, including the organizer and the attendees. */
    participants?: MeetingParticipants | undefined;
    /** The recordings of an online meeting. Read-only. */
    recordings?: CallRecording[] | undefined;
    /** The meeting start time in UTC. */
    startDateTime?: Date | undefined;
    /** The transcripts of an online meeting. Read-only. */
    transcripts?: CallTranscript[] | undefined;

    constructor(data?: IOnlineMeeting) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.attendeeReport = _data["attendeeReport"];
            this.broadcastSettings = _data["broadcastSettings"] ? BroadcastMeetingSettings.fromJS(_data["broadcastSettings"]) : <any>undefined;
            this.creationDateTime = _data["creationDateTime"] ? new Date(_data["creationDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
            this.externalId = _data["externalId"];
            this.isBroadcast = _data["isBroadcast"];
            this.participants = _data["participants"] ? MeetingParticipants.fromJS(_data["participants"]) : <any>undefined;
            if (Array.isArray(_data["recordings"])) {
                this.recordings = [] as any;
                for (let item of _data["recordings"])
                    this.recordings!.push(CallRecording.fromJS(item));
            }
            this.startDateTime = _data["startDateTime"] ? new Date(_data["startDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["transcripts"])) {
                this.transcripts = [] as any;
                for (let item of _data["transcripts"])
                    this.transcripts!.push(CallTranscript.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): OnlineMeeting {
        data = typeof data === 'object' ? data : {};
        let result = new OnlineMeeting();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attendeeReport"] = this.attendeeReport;
        data["broadcastSettings"] = this.broadcastSettings ? this.broadcastSettings.toJSON() : <any>undefined;
        data["creationDateTime"] = this.creationDateTime ? this.creationDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        data["externalId"] = this.externalId;
        data["isBroadcast"] = this.isBroadcast;
        data["participants"] = this.participants ? this.participants.toJSON() : <any>undefined;
        if (Array.isArray(this.recordings)) {
            data["recordings"] = [];
            for (let item of this.recordings)
                data["recordings"].push(item.toJSON());
        }
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.transcripts)) {
            data["transcripts"] = [];
            for (let item of this.transcripts)
                data["transcripts"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IOnlineMeeting extends IOnlineMeetingBase {
    /** The content stream of the attendee report of a Microsoft Teams live event. Read-only. */
    attendeeReport?: string | undefined;
    /** Settings related to a live event. */
    broadcastSettings?: BroadcastMeetingSettings | undefined;
    /** The meeting creation time in UTC. Read-only. */
    creationDateTime?: Date | undefined;
    /** The meeting end time in UTC. Required when you create an online meeting. */
    endDateTime?: Date | undefined;
    /** The externalId property */
    externalId?: string | undefined;
    /** Indicates whether this meeting is a Teams live event. */
    isBroadcast?: boolean | undefined;
    /** The participants associated with the online meeting, including the organizer and the attendees. */
    participants?: MeetingParticipants | undefined;
    /** The recordings of an online meeting. Read-only. */
    recordings?: CallRecording[] | undefined;
    /** The meeting start time in UTC. */
    startDateTime?: Date | undefined;
    /** The transcripts of an online meeting. Read-only. */
    transcripts?: CallTranscript[] | undefined;
}

export class BroadcastMeetingSettings implements IBroadcastMeetingSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Defines who can join the Teams live event. Possible values are listed in the following table. */
    allowedAudience?: BroadcastMeetingAudience | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Caption settings of a Teams live event. */
    captions?: BroadcastMeetingCaptionSettings | undefined;
    /** Indicates whether attendee report is enabled for this Teams live event. Default value is false. */
    isAttendeeReportEnabled?: boolean | undefined;
    /** Indicates whether Q&A is enabled for this Teams live event. Default value is false. */
    isQuestionAndAnswerEnabled?: boolean | undefined;
    /** Indicates whether recording is enabled for this Teams live event. Default value is false. */
    isRecordingEnabled?: boolean | undefined;
    /** Indicates whether video on demand is enabled for this Teams live event. Default value is false. */
    isVideoOnDemandEnabled?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IBroadcastMeetingSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowedAudience = _data["allowedAudience"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.captions = _data["captions"] ? BroadcastMeetingCaptionSettings.fromJS(_data["captions"]) : <any>undefined;
            this.isAttendeeReportEnabled = _data["isAttendeeReportEnabled"];
            this.isQuestionAndAnswerEnabled = _data["isQuestionAndAnswerEnabled"];
            this.isRecordingEnabled = _data["isRecordingEnabled"];
            this.isVideoOnDemandEnabled = _data["isVideoOnDemandEnabled"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): BroadcastMeetingSettings {
        data = typeof data === 'object' ? data : {};
        let result = new BroadcastMeetingSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowedAudience"] = this.allowedAudience;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["captions"] = this.captions ? this.captions.toJSON() : <any>undefined;
        data["isAttendeeReportEnabled"] = this.isAttendeeReportEnabled;
        data["isQuestionAndAnswerEnabled"] = this.isQuestionAndAnswerEnabled;
        data["isRecordingEnabled"] = this.isRecordingEnabled;
        data["isVideoOnDemandEnabled"] = this.isVideoOnDemandEnabled;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IBroadcastMeetingSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Defines who can join the Teams live event. Possible values are listed in the following table. */
    allowedAudience?: BroadcastMeetingAudience | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Caption settings of a Teams live event. */
    captions?: BroadcastMeetingCaptionSettings | undefined;
    /** Indicates whether attendee report is enabled for this Teams live event. Default value is false. */
    isAttendeeReportEnabled?: boolean | undefined;
    /** Indicates whether Q&A is enabled for this Teams live event. Default value is false. */
    isQuestionAndAnswerEnabled?: boolean | undefined;
    /** Indicates whether recording is enabled for this Teams live event. Default value is false. */
    isRecordingEnabled?: boolean | undefined;
    /** Indicates whether video on demand is enabled for this Teams live event. Default value is false. */
    isVideoOnDemandEnabled?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum BroadcastMeetingAudience {
    RoleIsAttendee = 0,
    Organization = 1,
    Everyone = 2,
    UnknownFutureValue = 3,
}

export class BroadcastMeetingCaptionSettings implements IBroadcastMeetingCaptionSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether captions are enabled for this Teams live event. */
    isCaptionEnabled?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The spoken language. */
    spokenLanguage?: string | undefined;
    /** The translation languages (choose up to 6). */
    translationLanguages?: string[] | undefined;

    constructor(data?: IBroadcastMeetingCaptionSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.isCaptionEnabled = _data["isCaptionEnabled"];
            this.odataType = _data["odataType"];
            this.spokenLanguage = _data["spokenLanguage"];
            if (Array.isArray(_data["translationLanguages"])) {
                this.translationLanguages = [] as any;
                for (let item of _data["translationLanguages"])
                    this.translationLanguages!.push(item);
            }
        }
    }

    static fromJS(data: any): BroadcastMeetingCaptionSettings {
        data = typeof data === 'object' ? data : {};
        let result = new BroadcastMeetingCaptionSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["isCaptionEnabled"] = this.isCaptionEnabled;
        data["odataType"] = this.odataType;
        data["spokenLanguage"] = this.spokenLanguage;
        if (Array.isArray(this.translationLanguages)) {
            data["translationLanguages"] = [];
            for (let item of this.translationLanguages)
                data["translationLanguages"].push(item);
        }
        return data;
    }
}

export interface IBroadcastMeetingCaptionSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether captions are enabled for this Teams live event. */
    isCaptionEnabled?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The spoken language. */
    spokenLanguage?: string | undefined;
    /** The translation languages (choose up to 6). */
    translationLanguages?: string[] | undefined;
}

export class MeetingParticipants implements IMeetingParticipants {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Information about the meeting attendees. */
    attendees?: MeetingParticipantInfo[] | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Information about the meeting organizer. */
    organizer?: MeetingParticipantInfo | undefined;

    constructor(data?: IMeetingParticipants) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            if (Array.isArray(_data["attendees"])) {
                this.attendees = [] as any;
                for (let item of _data["attendees"])
                    this.attendees!.push(MeetingParticipantInfo.fromJS(item));
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.organizer = _data["organizer"] ? MeetingParticipantInfo.fromJS(_data["organizer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MeetingParticipants {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingParticipants();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        if (Array.isArray(this.attendees)) {
            data["attendees"] = [];
            for (let item of this.attendees)
                data["attendees"].push(item.toJSON());
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["organizer"] = this.organizer ? this.organizer.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMeetingParticipants {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Information about the meeting attendees. */
    attendees?: MeetingParticipantInfo[] | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Information about the meeting organizer. */
    organizer?: MeetingParticipantInfo | undefined;
}

export class MeetingParticipantInfo implements IMeetingParticipantInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Identity information of the participant. */
    identity?: IdentitySet | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the participant's role in the meeting. */
    role?: OnlineMeetingRole | undefined;
    /** User principal name of the participant. */
    upn?: string | undefined;

    constructor(data?: IMeetingParticipantInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.identity = _data["identity"] ? IdentitySet.fromJS(_data["identity"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.role = _data["role"];
            this.upn = _data["upn"];
        }
    }

    static fromJS(data: any): MeetingParticipantInfo {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingParticipantInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["identity"] = this.identity ? this.identity.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["role"] = this.role;
        data["upn"] = this.upn;
        return data;
    }
}

export interface IMeetingParticipantInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Identity information of the participant. */
    identity?: IdentitySet | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the participant's role in the meeting. */
    role?: OnlineMeetingRole | undefined;
    /** User principal name of the participant. */
    upn?: string | undefined;
}

export enum OnlineMeetingRole {
    Attendee = 0,
    Presenter = 1,
    UnknownFutureValue = 2,
    Producer = 3,
    Coorganizer = 4,
}

export class CallRecording extends Entity implements ICallRecording {
    /** The unique identifier for the call that is related to this recording. Read-only. */
    callId?: string | undefined;
    /** The content of the recording. Read-only. */
    content?: string | undefined;
    /** The unique identifier that links the transcript with its corresponding recording. Read-only. */
    contentCorrelationId?: string | undefined;
    /** Date and time at which the recording was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    createdDateTime?: Date | undefined;
    /** Date and time at which the recording ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    endDateTime?: Date | undefined;
    /** The unique identifier of the onlineMeeting related to this recording. Read-only. */
    meetingId?: string | undefined;
    /** The identity information of the organizer of the onlineMeeting related to this recording. Read-only. */
    meetingOrganizer?: IdentitySet | undefined;
    /** The URL that can be used to access the content of the recording. Read-only. */
    recordingContentUrl?: string | undefined;

    constructor(data?: ICallRecording) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.callId = _data["callId"];
            this.content = _data["content"];
            this.contentCorrelationId = _data["contentCorrelationId"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
            this.meetingId = _data["meetingId"];
            this.meetingOrganizer = _data["meetingOrganizer"] ? IdentitySet.fromJS(_data["meetingOrganizer"]) : <any>undefined;
            this.recordingContentUrl = _data["recordingContentUrl"];
        }
    }

    static override fromJS(data: any): CallRecording {
        data = typeof data === 'object' ? data : {};
        let result = new CallRecording();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["callId"] = this.callId;
        data["content"] = this.content;
        data["contentCorrelationId"] = this.contentCorrelationId;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        data["meetingId"] = this.meetingId;
        data["meetingOrganizer"] = this.meetingOrganizer ? this.meetingOrganizer.toJSON() : <any>undefined;
        data["recordingContentUrl"] = this.recordingContentUrl;
        super.toJSON(data);
        return data;
    }
}

export interface ICallRecording extends IEntity {
    /** The unique identifier for the call that is related to this recording. Read-only. */
    callId?: string | undefined;
    /** The content of the recording. Read-only. */
    content?: string | undefined;
    /** The unique identifier that links the transcript with its corresponding recording. Read-only. */
    contentCorrelationId?: string | undefined;
    /** Date and time at which the recording was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    createdDateTime?: Date | undefined;
    /** Date and time at which the recording ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    endDateTime?: Date | undefined;
    /** The unique identifier of the onlineMeeting related to this recording. Read-only. */
    meetingId?: string | undefined;
    /** The identity information of the organizer of the onlineMeeting related to this recording. Read-only. */
    meetingOrganizer?: IdentitySet | undefined;
    /** The URL that can be used to access the content of the recording. Read-only. */
    recordingContentUrl?: string | undefined;
}

export class CallTranscript extends Entity implements ICallTranscript {
    /** The unique identifier for the call that is related to this transcript. Read-only. */
    callId?: string | undefined;
    /** The content of the transcript. Read-only. */
    content?: string | undefined;
    /** The unique identifier that links the transcript with its corresponding recording. Read-only. */
    contentCorrelationId?: string | undefined;
    /** Date and time at which the transcript was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    createdDateTime?: Date | undefined;
    /** Date and time at which the transcription ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    endDateTime?: Date | undefined;
    /** The unique identifier of the online meeting related to this transcript. Read-only. */
    meetingId?: string | undefined;
    /** The identity information of the organizer of the onlineMeeting related to this transcript. Read-only. */
    meetingOrganizer?: IdentitySet | undefined;
    /** The time-aligned metadata of the utterances in the transcript. Read-only. */
    metadataContent?: string | undefined;
    /** The URL that can be used to access the content of the transcript. Read-only. */
    transcriptContentUrl?: string | undefined;

    constructor(data?: ICallTranscript) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.callId = _data["callId"];
            this.content = _data["content"];
            this.contentCorrelationId = _data["contentCorrelationId"];
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.endDateTime = _data["endDateTime"] ? new Date(_data["endDateTime"].toString()) : <any>undefined;
            this.meetingId = _data["meetingId"];
            this.meetingOrganizer = _data["meetingOrganizer"] ? IdentitySet.fromJS(_data["meetingOrganizer"]) : <any>undefined;
            this.metadataContent = _data["metadataContent"];
            this.transcriptContentUrl = _data["transcriptContentUrl"];
        }
    }

    static override fromJS(data: any): CallTranscript {
        data = typeof data === 'object' ? data : {};
        let result = new CallTranscript();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["callId"] = this.callId;
        data["content"] = this.content;
        data["contentCorrelationId"] = this.contentCorrelationId;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["endDateTime"] = this.endDateTime ? this.endDateTime.toISOString() : <any>undefined;
        data["meetingId"] = this.meetingId;
        data["meetingOrganizer"] = this.meetingOrganizer ? this.meetingOrganizer.toJSON() : <any>undefined;
        data["metadataContent"] = this.metadataContent;
        data["transcriptContentUrl"] = this.transcriptContentUrl;
        super.toJSON(data);
        return data;
    }
}

export interface ICallTranscript extends IEntity {
    /** The unique identifier for the call that is related to this transcript. Read-only. */
    callId?: string | undefined;
    /** The content of the transcript. Read-only. */
    content?: string | undefined;
    /** The unique identifier that links the transcript with its corresponding recording. Read-only. */
    contentCorrelationId?: string | undefined;
    /** Date and time at which the transcript was created. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    createdDateTime?: Date | undefined;
    /** Date and time at which the transcription ends. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    endDateTime?: Date | undefined;
    /** The unique identifier of the online meeting related to this transcript. Read-only. */
    meetingId?: string | undefined;
    /** The identity information of the organizer of the onlineMeeting related to this transcript. Read-only. */
    meetingOrganizer?: IdentitySet | undefined;
    /** The time-aligned metadata of the utterances in the transcript. Read-only. */
    metadataContent?: string | undefined;
    /** The URL that can be used to access the content of the transcript. Read-only. */
    transcriptContentUrl?: string | undefined;
}

export enum OnlineMeetingPresenters {
    Everyone = 0,
    Organization = 1,
    RoleIsPresenter = 2,
    Organizer = 3,
    UnknownFutureValue = 4,
}

export enum MeetingChatMode {
    Enabled = 0,
    Disabled = 1,
    Limited = 2,
    UnknownFutureValue = 3,
}

export class MeetingAttendanceReport extends Entity implements IMeetingAttendanceReport {
    /** List of attendance records of an attendance report. Read-only. */
    attendanceRecords?: AttendanceRecord[] | undefined;
    /** UTC time when the meeting ended. Read-only. */
    meetingEndDateTime?: Date | undefined;
    /** UTC time when the meeting started. Read-only. */
    meetingStartDateTime?: Date | undefined;
    /** Total number of participants. Read-only. */
    totalParticipantCount?: number | undefined;

    constructor(data?: IMeetingAttendanceReport) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["attendanceRecords"])) {
                this.attendanceRecords = [] as any;
                for (let item of _data["attendanceRecords"])
                    this.attendanceRecords!.push(AttendanceRecord.fromJS(item));
            }
            this.meetingEndDateTime = _data["meetingEndDateTime"] ? new Date(_data["meetingEndDateTime"].toString()) : <any>undefined;
            this.meetingStartDateTime = _data["meetingStartDateTime"] ? new Date(_data["meetingStartDateTime"].toString()) : <any>undefined;
            this.totalParticipantCount = _data["totalParticipantCount"];
        }
    }

    static override fromJS(data: any): MeetingAttendanceReport {
        data = typeof data === 'object' ? data : {};
        let result = new MeetingAttendanceReport();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.attendanceRecords)) {
            data["attendanceRecords"] = [];
            for (let item of this.attendanceRecords)
                data["attendanceRecords"].push(item.toJSON());
        }
        data["meetingEndDateTime"] = this.meetingEndDateTime ? this.meetingEndDateTime.toISOString() : <any>undefined;
        data["meetingStartDateTime"] = this.meetingStartDateTime ? this.meetingStartDateTime.toISOString() : <any>undefined;
        data["totalParticipantCount"] = this.totalParticipantCount;
        super.toJSON(data);
        return data;
    }
}

export interface IMeetingAttendanceReport extends IEntity {
    /** List of attendance records of an attendance report. Read-only. */
    attendanceRecords?: AttendanceRecord[] | undefined;
    /** UTC time when the meeting ended. Read-only. */
    meetingEndDateTime?: Date | undefined;
    /** UTC time when the meeting started. Read-only. */
    meetingStartDateTime?: Date | undefined;
    /** Total number of participants. Read-only. */
    totalParticipantCount?: number | undefined;
}

export class AttendanceRecord extends Entity implements IAttendanceRecord {
    /** List of time periods between joining and leaving a meeting. */
    attendanceIntervals?: AttendanceInterval[] | undefined;
    /** Email address of the user associated with this attendance record. */
    emailAddress?: string | undefined;
    /** Identity of the user associated with this attendance record. */
    identity?: Identity | undefined;
    /** Role of the attendee. Possible values are: None, Attendee, Presenter, and Organizer. */
    role?: string | undefined;
    /** Total duration of the attendances in seconds. */
    totalAttendanceInSeconds?: number | undefined;

    constructor(data?: IAttendanceRecord) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["attendanceIntervals"])) {
                this.attendanceIntervals = [] as any;
                for (let item of _data["attendanceIntervals"])
                    this.attendanceIntervals!.push(AttendanceInterval.fromJS(item));
            }
            this.emailAddress = _data["emailAddress"];
            this.identity = _data["identity"] ? Identity.fromJS(_data["identity"]) : <any>undefined;
            this.role = _data["role"];
            this.totalAttendanceInSeconds = _data["totalAttendanceInSeconds"];
        }
    }

    static override fromJS(data: any): AttendanceRecord {
        data = typeof data === 'object' ? data : {};
        let result = new AttendanceRecord();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.attendanceIntervals)) {
            data["attendanceIntervals"] = [];
            for (let item of this.attendanceIntervals)
                data["attendanceIntervals"].push(item.toJSON());
        }
        data["emailAddress"] = this.emailAddress;
        data["identity"] = this.identity ? this.identity.toJSON() : <any>undefined;
        data["role"] = this.role;
        data["totalAttendanceInSeconds"] = this.totalAttendanceInSeconds;
        super.toJSON(data);
        return data;
    }
}

export interface IAttendanceRecord extends IEntity {
    /** List of time periods between joining and leaving a meeting. */
    attendanceIntervals?: AttendanceInterval[] | undefined;
    /** Email address of the user associated with this attendance record. */
    emailAddress?: string | undefined;
    /** Identity of the user associated with this attendance record. */
    identity?: Identity | undefined;
    /** Role of the attendee. Possible values are: None, Attendee, Presenter, and Organizer. */
    role?: string | undefined;
    /** Total duration of the attendances in seconds. */
    totalAttendanceInSeconds?: number | undefined;
}

export class AttendanceInterval implements IAttendanceInterval {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Duration of the meeting interval in seconds; that is, the difference between joinDateTime and leaveDateTime. */
    durationInSeconds?: number | undefined;
    /** The time the attendee joined in UTC. */
    joinDateTime?: Date | undefined;
    /** The time the attendee left in UTC. */
    leaveDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IAttendanceInterval) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.durationInSeconds = _data["durationInSeconds"];
            this.joinDateTime = _data["joinDateTime"] ? new Date(_data["joinDateTime"].toString()) : <any>undefined;
            this.leaveDateTime = _data["leaveDateTime"] ? new Date(_data["leaveDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): AttendanceInterval {
        data = typeof data === 'object' ? data : {};
        let result = new AttendanceInterval();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["durationInSeconds"] = this.durationInSeconds;
        data["joinDateTime"] = this.joinDateTime ? this.joinDateTime.toISOString() : <any>undefined;
        data["leaveDateTime"] = this.leaveDateTime ? this.leaveDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IAttendanceInterval {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Duration of the meeting interval in seconds; that is, the difference between joinDateTime and leaveDateTime. */
    durationInSeconds?: number | undefined;
    /** The time the attendee joined in UTC. */
    joinDateTime?: Date | undefined;
    /** The time the attendee left in UTC. */
    leaveDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class AudioConferencing implements IAudioConferencing {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The conference id of the online meeting. */
    conferenceId?: string | undefined;
    /** A URL to the externally-accessible web page that contains dial-in information. */
    dialinUrl?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The toll-free number that connects to the Audio Conference Provider. */
    tollFreeNumber?: string | undefined;
    /** List of toll-free numbers that are displayed in the meeting invite. */
    tollFreeNumbers?: string[] | undefined;
    /** The toll number that connects to the Audio Conference Provider. */
    tollNumber?: string | undefined;
    /** List of toll numbers that are displayed in the meeting invite. */
    tollNumbers?: string[] | undefined;

    constructor(data?: IAudioConferencing) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.conferenceId = _data["conferenceId"];
            this.dialinUrl = _data["dialinUrl"];
            this.odataType = _data["odataType"];
            this.tollFreeNumber = _data["tollFreeNumber"];
            if (Array.isArray(_data["tollFreeNumbers"])) {
                this.tollFreeNumbers = [] as any;
                for (let item of _data["tollFreeNumbers"])
                    this.tollFreeNumbers!.push(item);
            }
            this.tollNumber = _data["tollNumber"];
            if (Array.isArray(_data["tollNumbers"])) {
                this.tollNumbers = [] as any;
                for (let item of _data["tollNumbers"])
                    this.tollNumbers!.push(item);
            }
        }
    }

    static fromJS(data: any): AudioConferencing {
        data = typeof data === 'object' ? data : {};
        let result = new AudioConferencing();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["conferenceId"] = this.conferenceId;
        data["dialinUrl"] = this.dialinUrl;
        data["odataType"] = this.odataType;
        data["tollFreeNumber"] = this.tollFreeNumber;
        if (Array.isArray(this.tollFreeNumbers)) {
            data["tollFreeNumbers"] = [];
            for (let item of this.tollFreeNumbers)
                data["tollFreeNumbers"].push(item);
        }
        data["tollNumber"] = this.tollNumber;
        if (Array.isArray(this.tollNumbers)) {
            data["tollNumbers"] = [];
            for (let item of this.tollNumbers)
                data["tollNumbers"].push(item);
        }
        return data;
    }
}

export interface IAudioConferencing {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The conference id of the online meeting. */
    conferenceId?: string | undefined;
    /** A URL to the externally-accessible web page that contains dial-in information. */
    dialinUrl?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The toll-free number that connects to the Audio Conference Provider. */
    tollFreeNumber?: string | undefined;
    /** List of toll-free numbers that are displayed in the meeting invite. */
    tollFreeNumbers?: string[] | undefined;
    /** The toll number that connects to the Audio Conference Provider. */
    tollNumber?: string | undefined;
    /** List of toll numbers that are displayed in the meeting invite. */
    tollNumbers?: string[] | undefined;
}

export class ChatInfo implements IChatInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier of a message in a Microsoft Teams channel. */
    messageId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The ID of the reply message. */
    replyChainMessageId?: string | undefined;
    /** The unique identifier for a thread in Microsoft Teams. */
    threadId?: string | undefined;

    constructor(data?: IChatInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.messageId = _data["messageId"];
            this.odataType = _data["odataType"];
            this.replyChainMessageId = _data["replyChainMessageId"];
            this.threadId = _data["threadId"];
        }
    }

    static fromJS(data: any): ChatInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ChatInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["messageId"] = this.messageId;
        data["odataType"] = this.odataType;
        data["replyChainMessageId"] = this.replyChainMessageId;
        data["threadId"] = this.threadId;
        return data;
    }
}

export interface IChatInfo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier of a message in a Microsoft Teams channel. */
    messageId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The ID of the reply message. */
    replyChainMessageId?: string | undefined;
    /** The unique identifier for a thread in Microsoft Teams. */
    threadId?: string | undefined;
}

export class JoinMeetingIdSettings implements IJoinMeetingIdSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether a passcode is required to join a meeting when using joinMeetingId. Optional. */
    isPasscodeRequired?: boolean | undefined;
    /** The meeting ID to be used to join a meeting. Optional. Read-only. */
    joinMeetingId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The passcode to join a meeting.  Optional. Read-only. */
    passcode?: string | undefined;

    constructor(data?: IJoinMeetingIdSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.isPasscodeRequired = _data["isPasscodeRequired"];
            this.joinMeetingId = _data["joinMeetingId"];
            this.odataType = _data["odataType"];
            this.passcode = _data["passcode"];
        }
    }

    static fromJS(data: any): JoinMeetingIdSettings {
        data = typeof data === 'object' ? data : {};
        let result = new JoinMeetingIdSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["isPasscodeRequired"] = this.isPasscodeRequired;
        data["joinMeetingId"] = this.joinMeetingId;
        data["odataType"] = this.odataType;
        data["passcode"] = this.passcode;
        return data;
    }
}

export interface IJoinMeetingIdSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether a passcode is required to join a meeting when using joinMeetingId. Optional. */
    isPasscodeRequired?: boolean | undefined;
    /** The meeting ID to be used to join a meeting. Optional. Read-only. */
    joinMeetingId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The passcode to join a meeting.  Optional. Read-only. */
    passcode?: string | undefined;
}

export class LobbyBypassSettings implements ILobbyBypassSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Specifies whether or not to always let dial-in callers bypass the lobby. Optional. */
    isDialInBypassEnabled?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the type of participants that are automatically admitted into a meeting, bypassing the lobby. Optional. */
    scope?: LobbyBypassScope | undefined;

    constructor(data?: ILobbyBypassSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.isDialInBypassEnabled = _data["isDialInBypassEnabled"];
            this.odataType = _data["odataType"];
            this.scope = _data["scope"];
        }
    }

    static fromJS(data: any): LobbyBypassSettings {
        data = typeof data === 'object' ? data : {};
        let result = new LobbyBypassSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["isDialInBypassEnabled"] = this.isDialInBypassEnabled;
        data["odataType"] = this.odataType;
        data["scope"] = this.scope;
        return data;
    }
}

export interface ILobbyBypassSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Specifies whether or not to always let dial-in callers bypass the lobby. Optional. */
    isDialInBypassEnabled?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the type of participants that are automatically admitted into a meeting, bypassing the lobby. Optional. */
    scope?: LobbyBypassScope | undefined;
}

export enum LobbyBypassScope {
    Organizer = 0,
    Organization = 1,
    OrganizationAndFederated = 2,
    Everyone = 3,
    UnknownFutureValue = 4,
    Invited = 5,
    OrganizationExcludingGuests = 6,
}

export enum MeetingChatHistoryDefaultMode {
    None = 0,
    All = 1,
    UnknownFutureValue = 2,
}

export class WatermarkProtectionValues implements IWatermarkProtectionValues {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether to apply a watermark to any shared content. */
    isEnabledForContentSharing?: boolean | undefined;
    /** Indicates whether to apply a watermark to everyone's video feed. */
    isEnabledForVideo?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IWatermarkProtectionValues) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.isEnabledForContentSharing = _data["isEnabledForContentSharing"];
            this.isEnabledForVideo = _data["isEnabledForVideo"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): WatermarkProtectionValues {
        data = typeof data === 'object' ? data : {};
        let result = new WatermarkProtectionValues();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["isEnabledForContentSharing"] = this.isEnabledForContentSharing;
        data["isEnabledForVideo"] = this.isEnabledForVideo;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IWatermarkProtectionValues {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Indicates whether to apply a watermark to any shared content. */
    isEnabledForContentSharing?: boolean | undefined;
    /** Indicates whether to apply a watermark to everyone's video feed. */
    isEnabledForVideo?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class OnPremisesExtensionAttributes implements IOnPremisesExtensionAttributes {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** First customizable extension attribute. */
    extensionAttribute1?: string | undefined;
    /** Tenth customizable extension attribute. */
    extensionAttribute10?: string | undefined;
    /** Eleventh customizable extension attribute. */
    extensionAttribute11?: string | undefined;
    /** Twelfth customizable extension attribute. */
    extensionAttribute12?: string | undefined;
    /** Thirteenth customizable extension attribute. */
    extensionAttribute13?: string | undefined;
    /** Fourteenth customizable extension attribute. */
    extensionAttribute14?: string | undefined;
    /** Fifteenth customizable extension attribute. */
    extensionAttribute15?: string | undefined;
    /** Second customizable extension attribute. */
    extensionAttribute2?: string | undefined;
    /** Third customizable extension attribute. */
    extensionAttribute3?: string | undefined;
    /** Fourth customizable extension attribute. */
    extensionAttribute4?: string | undefined;
    /** Fifth customizable extension attribute. */
    extensionAttribute5?: string | undefined;
    /** Sixth customizable extension attribute. */
    extensionAttribute6?: string | undefined;
    /** Seventh customizable extension attribute. */
    extensionAttribute7?: string | undefined;
    /** Eighth customizable extension attribute. */
    extensionAttribute8?: string | undefined;
    /** Ninth customizable extension attribute. */
    extensionAttribute9?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IOnPremisesExtensionAttributes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.extensionAttribute1 = _data["extensionAttribute1"];
            this.extensionAttribute10 = _data["extensionAttribute10"];
            this.extensionAttribute11 = _data["extensionAttribute11"];
            this.extensionAttribute12 = _data["extensionAttribute12"];
            this.extensionAttribute13 = _data["extensionAttribute13"];
            this.extensionAttribute14 = _data["extensionAttribute14"];
            this.extensionAttribute15 = _data["extensionAttribute15"];
            this.extensionAttribute2 = _data["extensionAttribute2"];
            this.extensionAttribute3 = _data["extensionAttribute3"];
            this.extensionAttribute4 = _data["extensionAttribute4"];
            this.extensionAttribute5 = _data["extensionAttribute5"];
            this.extensionAttribute6 = _data["extensionAttribute6"];
            this.extensionAttribute7 = _data["extensionAttribute7"];
            this.extensionAttribute8 = _data["extensionAttribute8"];
            this.extensionAttribute9 = _data["extensionAttribute9"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): OnPremisesExtensionAttributes {
        data = typeof data === 'object' ? data : {};
        let result = new OnPremisesExtensionAttributes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["extensionAttribute1"] = this.extensionAttribute1;
        data["extensionAttribute10"] = this.extensionAttribute10;
        data["extensionAttribute11"] = this.extensionAttribute11;
        data["extensionAttribute12"] = this.extensionAttribute12;
        data["extensionAttribute13"] = this.extensionAttribute13;
        data["extensionAttribute14"] = this.extensionAttribute14;
        data["extensionAttribute15"] = this.extensionAttribute15;
        data["extensionAttribute2"] = this.extensionAttribute2;
        data["extensionAttribute3"] = this.extensionAttribute3;
        data["extensionAttribute4"] = this.extensionAttribute4;
        data["extensionAttribute5"] = this.extensionAttribute5;
        data["extensionAttribute6"] = this.extensionAttribute6;
        data["extensionAttribute7"] = this.extensionAttribute7;
        data["extensionAttribute8"] = this.extensionAttribute8;
        data["extensionAttribute9"] = this.extensionAttribute9;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IOnPremisesExtensionAttributes {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** First customizable extension attribute. */
    extensionAttribute1?: string | undefined;
    /** Tenth customizable extension attribute. */
    extensionAttribute10?: string | undefined;
    /** Eleventh customizable extension attribute. */
    extensionAttribute11?: string | undefined;
    /** Twelfth customizable extension attribute. */
    extensionAttribute12?: string | undefined;
    /** Thirteenth customizable extension attribute. */
    extensionAttribute13?: string | undefined;
    /** Fourteenth customizable extension attribute. */
    extensionAttribute14?: string | undefined;
    /** Fifteenth customizable extension attribute. */
    extensionAttribute15?: string | undefined;
    /** Second customizable extension attribute. */
    extensionAttribute2?: string | undefined;
    /** Third customizable extension attribute. */
    extensionAttribute3?: string | undefined;
    /** Fourth customizable extension attribute. */
    extensionAttribute4?: string | undefined;
    /** Fifth customizable extension attribute. */
    extensionAttribute5?: string | undefined;
    /** Sixth customizable extension attribute. */
    extensionAttribute6?: string | undefined;
    /** Seventh customizable extension attribute. */
    extensionAttribute7?: string | undefined;
    /** Eighth customizable extension attribute. */
    extensionAttribute8?: string | undefined;
    /** Ninth customizable extension attribute. */
    extensionAttribute9?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class OutlookUser extends Entity implements IOutlookUser {
    /** A list of categories defined for the user. */
    masterCategories?: OutlookCategory[] | undefined;

    constructor(data?: IOutlookUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["masterCategories"])) {
                this.masterCategories = [] as any;
                for (let item of _data["masterCategories"])
                    this.masterCategories!.push(OutlookCategory.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): OutlookUser {
        data = typeof data === 'object' ? data : {};
        let result = new OutlookUser();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.masterCategories)) {
            data["masterCategories"] = [];
            for (let item of this.masterCategories)
                data["masterCategories"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IOutlookUser extends IEntity {
    /** A list of categories defined for the user. */
    masterCategories?: OutlookCategory[] | undefined;
}

export class OutlookCategory extends Entity implements IOutlookCategory {
    /** A pre-set color constant that characterizes a category, and that is mapped to one of 25 predefined colors. For more details, see the following note. */
    color?: CategoryColor | undefined;
    /** A unique name that identifies a category in the user's mailbox. After a category is created, the name cannot be changed. Read-only. */
    displayName?: string | undefined;

    constructor(data?: IOutlookCategory) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.color = _data["color"];
            this.displayName = _data["displayName"];
        }
    }

    static override fromJS(data: any): OutlookCategory {
        data = typeof data === 'object' ? data : {};
        let result = new OutlookCategory();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["color"] = this.color;
        data["displayName"] = this.displayName;
        super.toJSON(data);
        return data;
    }
}

export interface IOutlookCategory extends IEntity {
    /** A pre-set color constant that characterizes a category, and that is mapped to one of 25 predefined colors. For more details, see the following note. */
    color?: CategoryColor | undefined;
    /** A unique name that identifies a category in the user's mailbox. After a category is created, the name cannot be changed. Read-only. */
    displayName?: string | undefined;
}

export enum CategoryColor {
    None = 0,
    Preset0 = 1,
    Preset1 = 2,
    Preset2 = 3,
    Preset3 = 4,
    Preset4 = 5,
    Preset5 = 6,
    Preset6 = 7,
    Preset7 = 8,
    Preset8 = 9,
    Preset9 = 10,
    Preset10 = 11,
    Preset11 = 12,
    Preset12 = 13,
    Preset13 = 14,
    Preset14 = 15,
    Preset15 = 16,
    Preset16 = 17,
    Preset17 = 18,
    Preset18 = 19,
    Preset19 = 20,
    Preset20 = 21,
    Preset21 = 22,
    Preset22 = 23,
    Preset23 = 24,
    Preset24 = 25,
}

export class PasswordProfile implements IPasswordProfile {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** true if the user must change their password on the next sign-in; otherwise false. */
    forceChangePasswordNextSignIn?: boolean | undefined;
    /** If true, at next sign-in, the user must perform a multifactor authentication (MFA) before being forced to change their password. The behavior is identical to forceChangePasswordNextSignIn except that the user is required to first perform a multifactor authentication before password change. After a password change, this property will be automatically reset to false. If not set, default is false. */
    forceChangePasswordNextSignInWithMfa?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The password for the user. This property is required when a user is created. It can be updated, but the user will be required to change the password on the next sign-in. The password must satisfy minimum requirements as specified by the user's passwordPolicies property. By default, a strong password is required. */
    password?: string | undefined;

    constructor(data?: IPasswordProfile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.forceChangePasswordNextSignIn = _data["forceChangePasswordNextSignIn"];
            this.forceChangePasswordNextSignInWithMfa = _data["forceChangePasswordNextSignInWithMfa"];
            this.odataType = _data["odataType"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): PasswordProfile {
        data = typeof data === 'object' ? data : {};
        let result = new PasswordProfile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["forceChangePasswordNextSignIn"] = this.forceChangePasswordNextSignIn;
        data["forceChangePasswordNextSignInWithMfa"] = this.forceChangePasswordNextSignInWithMfa;
        data["odataType"] = this.odataType;
        data["password"] = this.password;
        return data;
    }
}

export interface IPasswordProfile {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** true if the user must change their password on the next sign-in; otherwise false. */
    forceChangePasswordNextSignIn?: boolean | undefined;
    /** If true, at next sign-in, the user must perform a multifactor authentication (MFA) before being forced to change their password. The behavior is identical to forceChangePasswordNextSignIn except that the user is required to first perform a multifactor authentication before password change. After a password change, this property will be automatically reset to false. If not set, default is false. */
    forceChangePasswordNextSignInWithMfa?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The password for the user. This property is required when a user is created. It can be updated, but the user will be required to change the password on the next sign-in. The password must satisfy minimum requirements as specified by the user's passwordPolicies property. By default, a strong password is required. */
    password?: string | undefined;
}

export class Person extends Entity implements IPerson {
    /** The person's birthday. */
    birthday?: string | undefined;
    /** The name of the person's company. */
    companyName?: string | undefined;
    /** The person's department. */
    department?: string | undefined;
    /** The person's display name. */
    displayName?: string | undefined;
    /** The person's given name. */
    givenName?: string | undefined;
    /** The instant message voice over IP (VOIP) session initiation protocol (SIP) address for the user. Read-only. */
    imAddress?: string | undefined;
    /** True if the user has flagged this person as a favorite. */
    isFavorite?: boolean | undefined;
    /** The person's job title. */
    jobTitle?: string | undefined;
    /** The location of the person's office. */
    officeLocation?: string | undefined;
    /** Free-form notes that the user has taken about this person. */
    personNotes?: string | undefined;
    /** The type of person. */
    personType?: PersonType | undefined;
    /** The person's phone numbers. */
    phones?: Phone[] | undefined;
    /** The person's addresses. */
    postalAddresses?: Location[] | undefined;
    /** The person's profession. */
    profession?: string | undefined;
    /** The person's email addresses. */
    scoredEmailAddresses?: ScoredEmailAddress[] | undefined;
    /** The person's surname. */
    surname?: string | undefined;
    /** The user principal name (UPN) of the person. The UPN is an Internet-style login name for the person based on the Internet standard RFC 822. By convention, this should map to the person's email name. The general format is alias@domain. */
    userPrincipalName?: string | undefined;
    /** The person's websites. */
    websites?: Website[] | undefined;
    /** The phonetic Japanese name of the person's company. */
    yomiCompany?: string | undefined;

    constructor(data?: IPerson) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.birthday = _data["birthday"];
            this.companyName = _data["companyName"];
            this.department = _data["department"];
            this.displayName = _data["displayName"];
            this.givenName = _data["givenName"];
            this.imAddress = _data["imAddress"];
            this.isFavorite = _data["isFavorite"];
            this.jobTitle = _data["jobTitle"];
            this.officeLocation = _data["officeLocation"];
            this.personNotes = _data["personNotes"];
            this.personType = _data["personType"] ? PersonType.fromJS(_data["personType"]) : <any>undefined;
            if (Array.isArray(_data["phones"])) {
                this.phones = [] as any;
                for (let item of _data["phones"])
                    this.phones!.push(Phone.fromJS(item));
            }
            if (Array.isArray(_data["postalAddresses"])) {
                this.postalAddresses = [] as any;
                for (let item of _data["postalAddresses"])
                    this.postalAddresses!.push(Location.fromJS(item));
            }
            this.profession = _data["profession"];
            if (Array.isArray(_data["scoredEmailAddresses"])) {
                this.scoredEmailAddresses = [] as any;
                for (let item of _data["scoredEmailAddresses"])
                    this.scoredEmailAddresses!.push(ScoredEmailAddress.fromJS(item));
            }
            this.surname = _data["surname"];
            this.userPrincipalName = _data["userPrincipalName"];
            if (Array.isArray(_data["websites"])) {
                this.websites = [] as any;
                for (let item of _data["websites"])
                    this.websites!.push(Website.fromJS(item));
            }
            this.yomiCompany = _data["yomiCompany"];
        }
    }

    static override fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["birthday"] = this.birthday;
        data["companyName"] = this.companyName;
        data["department"] = this.department;
        data["displayName"] = this.displayName;
        data["givenName"] = this.givenName;
        data["imAddress"] = this.imAddress;
        data["isFavorite"] = this.isFavorite;
        data["jobTitle"] = this.jobTitle;
        data["officeLocation"] = this.officeLocation;
        data["personNotes"] = this.personNotes;
        data["personType"] = this.personType ? this.personType.toJSON() : <any>undefined;
        if (Array.isArray(this.phones)) {
            data["phones"] = [];
            for (let item of this.phones)
                data["phones"].push(item.toJSON());
        }
        if (Array.isArray(this.postalAddresses)) {
            data["postalAddresses"] = [];
            for (let item of this.postalAddresses)
                data["postalAddresses"].push(item.toJSON());
        }
        data["profession"] = this.profession;
        if (Array.isArray(this.scoredEmailAddresses)) {
            data["scoredEmailAddresses"] = [];
            for (let item of this.scoredEmailAddresses)
                data["scoredEmailAddresses"].push(item.toJSON());
        }
        data["surname"] = this.surname;
        data["userPrincipalName"] = this.userPrincipalName;
        if (Array.isArray(this.websites)) {
            data["websites"] = [];
            for (let item of this.websites)
                data["websites"].push(item.toJSON());
        }
        data["yomiCompany"] = this.yomiCompany;
        super.toJSON(data);
        return data;
    }
}

export interface IPerson extends IEntity {
    /** The person's birthday. */
    birthday?: string | undefined;
    /** The name of the person's company. */
    companyName?: string | undefined;
    /** The person's department. */
    department?: string | undefined;
    /** The person's display name. */
    displayName?: string | undefined;
    /** The person's given name. */
    givenName?: string | undefined;
    /** The instant message voice over IP (VOIP) session initiation protocol (SIP) address for the user. Read-only. */
    imAddress?: string | undefined;
    /** True if the user has flagged this person as a favorite. */
    isFavorite?: boolean | undefined;
    /** The person's job title. */
    jobTitle?: string | undefined;
    /** The location of the person's office. */
    officeLocation?: string | undefined;
    /** Free-form notes that the user has taken about this person. */
    personNotes?: string | undefined;
    /** The type of person. */
    personType?: PersonType | undefined;
    /** The person's phone numbers. */
    phones?: Phone[] | undefined;
    /** The person's addresses. */
    postalAddresses?: Location[] | undefined;
    /** The person's profession. */
    profession?: string | undefined;
    /** The person's email addresses. */
    scoredEmailAddresses?: ScoredEmailAddress[] | undefined;
    /** The person's surname. */
    surname?: string | undefined;
    /** The user principal name (UPN) of the person. The UPN is an Internet-style login name for the person based on the Internet standard RFC 822. By convention, this should map to the person's email name. The general format is alias@domain. */
    userPrincipalName?: string | undefined;
    /** The person's websites. */
    websites?: Website[] | undefined;
    /** The phonetic Japanese name of the person's company. */
    yomiCompany?: string | undefined;
}

export class PersonType implements IPersonType {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The type of data source, such as Person. */
    class?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The secondary type of data source, such as OrganizationUser. */
    subclass?: string | undefined;

    constructor(data?: IPersonType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.class = _data["class"];
            this.odataType = _data["odataType"];
            this.subclass = _data["subclass"];
        }
    }

    static fromJS(data: any): PersonType {
        data = typeof data === 'object' ? data : {};
        let result = new PersonType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["class"] = this.class;
        data["odataType"] = this.odataType;
        data["subclass"] = this.subclass;
        return data;
    }
}

export interface IPersonType {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The type of data source, such as Person. */
    class?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The secondary type of data source, such as OrganizationUser. */
    subclass?: string | undefined;
}

export class ScoredEmailAddress implements IScoredEmailAddress {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The email address. */
    address?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The itemId property */
    itemId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The relevance score of the email address. A relevance score is used as a sort key, in relation to the other returned results. A higher relevance score value corresponds to a more relevant result. Relevance is determined by the user’s communication and collaboration patterns and business relationships. */
    relevanceScore?: number | undefined;
    /** The selectionLikelihood property */
    selectionLikelihood?: SelectionLikelihoodInfo | undefined;

    constructor(data?: IScoredEmailAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.address = _data["address"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.itemId = _data["itemId"];
            this.odataType = _data["odataType"];
            this.relevanceScore = _data["relevanceScore"];
            this.selectionLikelihood = _data["selectionLikelihood"];
        }
    }

    static fromJS(data: any): ScoredEmailAddress {
        data = typeof data === 'object' ? data : {};
        let result = new ScoredEmailAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["address"] = this.address;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["itemId"] = this.itemId;
        data["odataType"] = this.odataType;
        data["relevanceScore"] = this.relevanceScore;
        data["selectionLikelihood"] = this.selectionLikelihood;
        return data;
    }
}

export interface IScoredEmailAddress {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The email address. */
    address?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The itemId property */
    itemId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The relevance score of the email address. A relevance score is used as a sort key, in relation to the other returned results. A higher relevance score value corresponds to a more relevant result. Relevance is determined by the user’s communication and collaboration patterns and business relationships. */
    relevanceScore?: number | undefined;
    /** The selectionLikelihood property */
    selectionLikelihood?: SelectionLikelihoodInfo | undefined;
}

export enum SelectionLikelihoodInfo {
    NotSpecified = 0,
    High = 1,
}

export class Website implements IWebsite {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The URL of the website. */
    address?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the web site. */
    displayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The possible values are: other, home, work, blog, profile. */
    type?: WebsiteType | undefined;

    constructor(data?: IWebsite) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.address = _data["address"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.odataType = _data["odataType"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Website {
        data = typeof data === 'object' ? data : {};
        let result = new Website();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["address"] = this.address;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["odataType"] = this.odataType;
        data["type"] = this.type;
        return data;
    }
}

export interface IWebsite {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The URL of the website. */
    address?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The display name of the web site. */
    displayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The possible values are: other, home, work, blog, profile. */
    type?: WebsiteType | undefined;
}

export enum WebsiteType {
    Other = 0,
    Home = 1,
    Work = 2,
    Blog = 3,
    Profile = 4,
}

export class PlannerUser extends Entity implements IPlannerUser {
    /** Read-only. Nullable. Returns the plannerTasks assigned to the user. */
    plans?: PlannerPlan[] | undefined;
    /** Read-only. Nullable. Returns the plannerPlans shared with the user. */
    tasks?: PlannerTask[] | undefined;

    constructor(data?: IPlannerUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["plans"])) {
                this.plans = [] as any;
                for (let item of _data["plans"])
                    this.plans!.push(PlannerPlan.fromJS(item));
            }
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(PlannerTask.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): PlannerUser {
        data = typeof data === 'object' ? data : {};
        let result = new PlannerUser();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.plans)) {
            data["plans"] = [];
            for (let item of this.plans)
                data["plans"].push(item.toJSON());
        }
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPlannerUser extends IEntity {
    /** Read-only. Nullable. Returns the plannerTasks assigned to the user. */
    plans?: PlannerPlan[] | undefined;
    /** Read-only. Nullable. Returns the plannerPlans shared with the user. */
    tasks?: PlannerTask[] | undefined;
}

export class Presence extends Entity implements IPresence {
    /** The supplemental information to a user's availability. Possible values are Available, Away, BeRightBack, Busy, DoNotDisturb, InACall, InAConferenceCall, Inactive, InAMeeting, Offline, OffWork, OutOfOffice, PresenceUnknown, Presenting, UrgentInterruptionsOnly. */
    activity?: string | undefined;
    /** The base presence information for a user. Possible values are Available, AvailableIdle,  Away, BeRightBack, Busy, BusyIdle, DoNotDisturb, Offline, PresenceUnknown */
    availability?: string | undefined;
    /** The presence status message of a user. */
    statusMessage?: PresenceStatusMessage | undefined;

    constructor(data?: IPresence) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.activity = _data["activity"];
            this.availability = _data["availability"];
            this.statusMessage = _data["statusMessage"] ? PresenceStatusMessage.fromJS(_data["statusMessage"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Presence {
        data = typeof data === 'object' ? data : {};
        let result = new Presence();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activity"] = this.activity;
        data["availability"] = this.availability;
        data["statusMessage"] = this.statusMessage ? this.statusMessage.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPresence extends IEntity {
    /** The supplemental information to a user's availability. Possible values are Available, Away, BeRightBack, Busy, DoNotDisturb, InACall, InAConferenceCall, Inactive, InAMeeting, Offline, OffWork, OutOfOffice, PresenceUnknown, Presenting, UrgentInterruptionsOnly. */
    activity?: string | undefined;
    /** The base presence information for a user. Possible values are Available, AvailableIdle,  Away, BeRightBack, Busy, BusyIdle, DoNotDisturb, Offline, PresenceUnknown */
    availability?: string | undefined;
    /** The presence status message of a user. */
    statusMessage?: PresenceStatusMessage | undefined;
}

export class PresenceStatusMessage implements IPresenceStatusMessage {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Time in which the status message expires.If not provided, the status message doesn't expire.expiryDateTime.dateTime shouldn't include time zone.expiryDateTime isn't available when you request the presence of another user. */
    expiryDateTime?: DateTimeTimeZone | undefined;
    /** Status message item. The only supported format currently is message.contentType = 'text'. */
    message?: ItemBody | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Time in which the status message was published.Read-only.publishedDateTime isn't available when you request the presence of another user. */
    publishedDateTime?: Date | undefined;

    constructor(data?: IPresenceStatusMessage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.expiryDateTime = _data["expiryDateTime"] ? DateTimeTimeZone.fromJS(_data["expiryDateTime"]) : <any>undefined;
            this.message = _data["message"] ? ItemBody.fromJS(_data["message"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.publishedDateTime = _data["publishedDateTime"] ? new Date(_data["publishedDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PresenceStatusMessage {
        data = typeof data === 'object' ? data : {};
        let result = new PresenceStatusMessage();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["expiryDateTime"] = this.expiryDateTime ? this.expiryDateTime.toJSON() : <any>undefined;
        data["message"] = this.message ? this.message.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["publishedDateTime"] = this.publishedDateTime ? this.publishedDateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPresenceStatusMessage {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Time in which the status message expires.If not provided, the status message doesn't expire.expiryDateTime.dateTime shouldn't include time zone.expiryDateTime isn't available when you request the presence of another user. */
    expiryDateTime?: DateTimeTimeZone | undefined;
    /** Status message item. The only supported format currently is message.contentType = 'text'. */
    message?: ItemBody | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Time in which the status message was published.Read-only.publishedDateTime isn't available when you request the presence of another user. */
    publishedDateTime?: Date | undefined;
}

export class UserPrint implements IUserPrint {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The recentPrinterShares property */
    recentPrinterShares?: PrinterShare[] | undefined;

    constructor(data?: IUserPrint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            if (Array.isArray(_data["recentPrinterShares"])) {
                this.recentPrinterShares = [] as any;
                for (let item of _data["recentPrinterShares"])
                    this.recentPrinterShares!.push(PrinterShare.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserPrint {
        data = typeof data === 'object' ? data : {};
        let result = new UserPrint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        if (Array.isArray(this.recentPrinterShares)) {
            data["recentPrinterShares"] = [];
            for (let item of this.recentPrinterShares)
                data["recentPrinterShares"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserPrint {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The recentPrinterShares property */
    recentPrinterShares?: PrinterShare[] | undefined;
}

export class PrinterBase extends Entity implements IPrinterBase {
    /** The capabilities of the printer/printerShare. */
    capabilities?: PrinterCapabilities | undefined;
    /** The default print settings of printer/printerShare. */
    defaults?: PrinterDefaults | undefined;
    /** The name of the printer/printerShare. */
    displayName?: string | undefined;
    /** Specifies whether the printer/printerShare is currently accepting new print jobs. */
    isAcceptingJobs?: boolean | undefined;
    /** The list of jobs that are queued for printing by the printer/printerShare. */
    jobs?: PrintJob[] | undefined;
    /** The physical and/or organizational location of the printer/printerShare. */
    location?: PrinterLocation | undefined;
    /** The manufacturer of the printer/printerShare. */
    manufacturer?: string | undefined;
    /** The model name of the printer/printerShare. */
    model?: string | undefined;
    /** The status property */
    status?: PrinterStatus | undefined;

    constructor(data?: IPrinterBase) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.capabilities = _data["capabilities"] ? PrinterCapabilities.fromJS(_data["capabilities"]) : <any>undefined;
            this.defaults = _data["defaults"] ? PrinterDefaults.fromJS(_data["defaults"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.isAcceptingJobs = _data["isAcceptingJobs"];
            if (Array.isArray(_data["jobs"])) {
                this.jobs = [] as any;
                for (let item of _data["jobs"])
                    this.jobs!.push(PrintJob.fromJS(item));
            }
            this.location = _data["location"] ? PrinterLocation.fromJS(_data["location"]) : <any>undefined;
            this.manufacturer = _data["manufacturer"];
            this.model = _data["model"];
            this.status = _data["status"] ? PrinterStatus.fromJS(_data["status"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): PrinterBase {
        data = typeof data === 'object' ? data : {};
        let result = new PrinterBase();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["capabilities"] = this.capabilities ? this.capabilities.toJSON() : <any>undefined;
        data["defaults"] = this.defaults ? this.defaults.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["isAcceptingJobs"] = this.isAcceptingJobs;
        if (Array.isArray(this.jobs)) {
            data["jobs"] = [];
            for (let item of this.jobs)
                data["jobs"].push(item.toJSON());
        }
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["manufacturer"] = this.manufacturer;
        data["model"] = this.model;
        data["status"] = this.status ? this.status.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPrinterBase extends IEntity {
    /** The capabilities of the printer/printerShare. */
    capabilities?: PrinterCapabilities | undefined;
    /** The default print settings of printer/printerShare. */
    defaults?: PrinterDefaults | undefined;
    /** The name of the printer/printerShare. */
    displayName?: string | undefined;
    /** Specifies whether the printer/printerShare is currently accepting new print jobs. */
    isAcceptingJobs?: boolean | undefined;
    /** The list of jobs that are queued for printing by the printer/printerShare. */
    jobs?: PrintJob[] | undefined;
    /** The physical and/or organizational location of the printer/printerShare. */
    location?: PrinterLocation | undefined;
    /** The manufacturer of the printer/printerShare. */
    manufacturer?: string | undefined;
    /** The model name of the printer/printerShare. */
    model?: string | undefined;
    /** The status property */
    status?: PrinterStatus | undefined;
}

export class PrinterShare extends PrinterBase implements IPrinterShare {
    /** If true, all users and groups will be granted access to this printer share. This supersedes the allow lists defined by the allowedUsers and allowedGroups navigation properties. */
    allowAllUsers?: boolean | undefined;
    /** The groups whose users have access to print using the printer. */
    allowedGroups?: Group2[] | undefined;
    /** The users who have access to print using the printer. */
    allowedUsers?: User[] | undefined;
    /** The DateTimeOffset when the printer share was created. Read-only. */
    createdDateTime?: Date | undefined;
    /** The printer that this printer share is related to. */
    printer?: Printer | undefined;
    /** Additional data for a printer share as viewed by the signed-in user. */
    viewPoint?: PrinterShareViewpoint | undefined;

    constructor(data?: IPrinterShare) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.allowAllUsers = _data["allowAllUsers"];
            if (Array.isArray(_data["allowedGroups"])) {
                this.allowedGroups = [] as any;
                for (let item of _data["allowedGroups"])
                    this.allowedGroups!.push(Group2.fromJS(item));
            }
            if (Array.isArray(_data["allowedUsers"])) {
                this.allowedUsers = [] as any;
                for (let item of _data["allowedUsers"])
                    this.allowedUsers!.push(User.fromJS(item));
            }
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.printer = _data["printer"] ? Printer.fromJS(_data["printer"]) : <any>undefined;
            this.viewPoint = _data["viewPoint"] ? PrinterShareViewpoint.fromJS(_data["viewPoint"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): PrinterShare {
        data = typeof data === 'object' ? data : {};
        let result = new PrinterShare();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["allowAllUsers"] = this.allowAllUsers;
        if (Array.isArray(this.allowedGroups)) {
            data["allowedGroups"] = [];
            for (let item of this.allowedGroups)
                data["allowedGroups"].push(item.toJSON());
        }
        if (Array.isArray(this.allowedUsers)) {
            data["allowedUsers"] = [];
            for (let item of this.allowedUsers)
                data["allowedUsers"].push(item.toJSON());
        }
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["printer"] = this.printer ? this.printer.toJSON() : <any>undefined;
        data["viewPoint"] = this.viewPoint ? this.viewPoint.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPrinterShare extends IPrinterBase {
    /** If true, all users and groups will be granted access to this printer share. This supersedes the allow lists defined by the allowedUsers and allowedGroups navigation properties. */
    allowAllUsers?: boolean | undefined;
    /** The groups whose users have access to print using the printer. */
    allowedGroups?: Group2[] | undefined;
    /** The users who have access to print using the printer. */
    allowedUsers?: User[] | undefined;
    /** The DateTimeOffset when the printer share was created. Read-only. */
    createdDateTime?: Date | undefined;
    /** The printer that this printer share is related to. */
    printer?: Printer | undefined;
    /** Additional data for a printer share as viewed by the signed-in user. */
    viewPoint?: PrinterShareViewpoint | undefined;
}

export class Printer extends PrinterBase implements IPrinter {
    /** The connectors that are associated with the printer. */
    connectors?: PrintConnector[] | undefined;
    /** True if the printer has a physical device for printing. Read-only. */
    hasPhysicalDevice?: boolean | undefined;
    /** True if the printer is shared; false otherwise. Read-only. */
    isShared?: boolean | undefined;
    /** The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only. */
    lastSeenDateTime?: Date | undefined;
    /** The DateTimeOffset when the printer was registered. Read-only. */
    registeredDateTime?: Date | undefined;
    /** The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable. */
    shares?: PrinterShare[] | undefined;
    /** A list of task triggers that are associated with the printer. */
    taskTriggers?: PrintTaskTrigger[] | undefined;

    constructor(data?: IPrinter) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["connectors"])) {
                this.connectors = [] as any;
                for (let item of _data["connectors"])
                    this.connectors!.push(PrintConnector.fromJS(item));
            }
            this.hasPhysicalDevice = _data["hasPhysicalDevice"];
            this.isShared = _data["isShared"];
            this.lastSeenDateTime = _data["lastSeenDateTime"] ? new Date(_data["lastSeenDateTime"].toString()) : <any>undefined;
            this.registeredDateTime = _data["registeredDateTime"] ? new Date(_data["registeredDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["shares"])) {
                this.shares = [] as any;
                for (let item of _data["shares"])
                    this.shares!.push(PrinterShare.fromJS(item));
            }
            if (Array.isArray(_data["taskTriggers"])) {
                this.taskTriggers = [] as any;
                for (let item of _data["taskTriggers"])
                    this.taskTriggers!.push(PrintTaskTrigger.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Printer {
        data = typeof data === 'object' ? data : {};
        let result = new Printer();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.connectors)) {
            data["connectors"] = [];
            for (let item of this.connectors)
                data["connectors"].push(item.toJSON());
        }
        data["hasPhysicalDevice"] = this.hasPhysicalDevice;
        data["isShared"] = this.isShared;
        data["lastSeenDateTime"] = this.lastSeenDateTime ? this.lastSeenDateTime.toISOString() : <any>undefined;
        data["registeredDateTime"] = this.registeredDateTime ? this.registeredDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.shares)) {
            data["shares"] = [];
            for (let item of this.shares)
                data["shares"].push(item.toJSON());
        }
        if (Array.isArray(this.taskTriggers)) {
            data["taskTriggers"] = [];
            for (let item of this.taskTriggers)
                data["taskTriggers"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPrinter extends IPrinterBase {
    /** The connectors that are associated with the printer. */
    connectors?: PrintConnector[] | undefined;
    /** True if the printer has a physical device for printing. Read-only. */
    hasPhysicalDevice?: boolean | undefined;
    /** True if the printer is shared; false otherwise. Read-only. */
    isShared?: boolean | undefined;
    /** The most recent dateTimeOffset when a printer interacted with Universal Print. Read-only. */
    lastSeenDateTime?: Date | undefined;
    /** The DateTimeOffset when the printer was registered. Read-only. */
    registeredDateTime?: Date | undefined;
    /** The list of printerShares that are associated with the printer. Currently, only one printerShare can be associated with the printer. Read-only. Nullable. */
    shares?: PrinterShare[] | undefined;
    /** A list of task triggers that are associated with the printer. */
    taskTriggers?: PrintTaskTrigger[] | undefined;
}

export class PrintConnector extends Entity implements IPrintConnector {
    /** The connector's version. */
    appVersion?: string | undefined;
    /** The name of the connector. */
    displayName?: string | undefined;
    /** The connector machine's hostname. */
    fullyQualifiedDomainName?: string | undefined;
    /** The physical and/or organizational location of the connector. */
    location?: PrinterLocation | undefined;
    /** The connector machine's operating system version. */
    operatingSystem?: string | undefined;
    /** The DateTimeOffset when the connector was registered. */
    registeredDateTime?: Date | undefined;

    constructor(data?: IPrintConnector) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.appVersion = _data["appVersion"];
            this.displayName = _data["displayName"];
            this.fullyQualifiedDomainName = _data["fullyQualifiedDomainName"];
            this.location = _data["location"] ? PrinterLocation.fromJS(_data["location"]) : <any>undefined;
            this.operatingSystem = _data["operatingSystem"];
            this.registeredDateTime = _data["registeredDateTime"] ? new Date(_data["registeredDateTime"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): PrintConnector {
        data = typeof data === 'object' ? data : {};
        let result = new PrintConnector();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["appVersion"] = this.appVersion;
        data["displayName"] = this.displayName;
        data["fullyQualifiedDomainName"] = this.fullyQualifiedDomainName;
        data["location"] = this.location ? this.location.toJSON() : <any>undefined;
        data["operatingSystem"] = this.operatingSystem;
        data["registeredDateTime"] = this.registeredDateTime ? this.registeredDateTime.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPrintConnector extends IEntity {
    /** The connector's version. */
    appVersion?: string | undefined;
    /** The name of the connector. */
    displayName?: string | undefined;
    /** The connector machine's hostname. */
    fullyQualifiedDomainName?: string | undefined;
    /** The physical and/or organizational location of the connector. */
    location?: PrinterLocation | undefined;
    /** The connector machine's operating system version. */
    operatingSystem?: string | undefined;
    /** The DateTimeOffset when the connector was registered. */
    registeredDateTime?: Date | undefined;
}

export class PrinterLocation implements IPrinterLocation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The altitude, in meters, that the printer is located at. */
    altitudeInMeters?: number | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The building that the printer is located in. */
    building?: string | undefined;
    /** The city that the printer is located in. */
    city?: string | undefined;
    /** The country or region that the printer is located in. */
    countryOrRegion?: string | undefined;
    /** The floor that the printer is located on. Only numerical values are supported right now. */
    floor?: string | undefined;
    /** The description of the floor that the printer is located on. */
    floorDescription?: string | undefined;
    /** The latitude that the printer is located at. */
    latitude?: number | undefined;
    /** The longitude that the printer is located at. */
    longitude?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The organizational hierarchy that the printer belongs to. The elements should be in hierarchical order. */
    organization?: string[] | undefined;
    /** The postal code that the printer is located in. */
    postalCode?: string | undefined;
    /** The description of the room that the printer is located in. */
    roomDescription?: string | undefined;
    /** The room that the printer is located in. Only numerical values are supported right now. */
    roomName?: string | undefined;
    /** The site that the printer is located in. */
    site?: string | undefined;
    /** The state or province that the printer is located in. */
    stateOrProvince?: string | undefined;
    /** The street address where the printer is located. */
    streetAddress?: string | undefined;
    /** The subdivision that the printer is located in. The elements should be in hierarchical order. */
    subdivision?: string[] | undefined;
    /** The subunit property */
    subunit?: string[] | undefined;

    constructor(data?: IPrinterLocation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.altitudeInMeters = _data["altitudeInMeters"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.building = _data["building"];
            this.city = _data["city"];
            this.countryOrRegion = _data["countryOrRegion"];
            this.floor = _data["floor"];
            this.floorDescription = _data["floorDescription"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.odataType = _data["odataType"];
            if (Array.isArray(_data["organization"])) {
                this.organization = [] as any;
                for (let item of _data["organization"])
                    this.organization!.push(item);
            }
            this.postalCode = _data["postalCode"];
            this.roomDescription = _data["roomDescription"];
            this.roomName = _data["roomName"];
            this.site = _data["site"];
            this.stateOrProvince = _data["stateOrProvince"];
            this.streetAddress = _data["streetAddress"];
            if (Array.isArray(_data["subdivision"])) {
                this.subdivision = [] as any;
                for (let item of _data["subdivision"])
                    this.subdivision!.push(item);
            }
            if (Array.isArray(_data["subunit"])) {
                this.subunit = [] as any;
                for (let item of _data["subunit"])
                    this.subunit!.push(item);
            }
        }
    }

    static fromJS(data: any): PrinterLocation {
        data = typeof data === 'object' ? data : {};
        let result = new PrinterLocation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["altitudeInMeters"] = this.altitudeInMeters;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["building"] = this.building;
        data["city"] = this.city;
        data["countryOrRegion"] = this.countryOrRegion;
        data["floor"] = this.floor;
        data["floorDescription"] = this.floorDescription;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["odataType"] = this.odataType;
        if (Array.isArray(this.organization)) {
            data["organization"] = [];
            for (let item of this.organization)
                data["organization"].push(item);
        }
        data["postalCode"] = this.postalCode;
        data["roomDescription"] = this.roomDescription;
        data["roomName"] = this.roomName;
        data["site"] = this.site;
        data["stateOrProvince"] = this.stateOrProvince;
        data["streetAddress"] = this.streetAddress;
        if (Array.isArray(this.subdivision)) {
            data["subdivision"] = [];
            for (let item of this.subdivision)
                data["subdivision"].push(item);
        }
        if (Array.isArray(this.subunit)) {
            data["subunit"] = [];
            for (let item of this.subunit)
                data["subunit"].push(item);
        }
        return data;
    }
}

export interface IPrinterLocation {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** The altitude, in meters, that the printer is located at. */
    altitudeInMeters?: number | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The building that the printer is located in. */
    building?: string | undefined;
    /** The city that the printer is located in. */
    city?: string | undefined;
    /** The country or region that the printer is located in. */
    countryOrRegion?: string | undefined;
    /** The floor that the printer is located on. Only numerical values are supported right now. */
    floor?: string | undefined;
    /** The description of the floor that the printer is located on. */
    floorDescription?: string | undefined;
    /** The latitude that the printer is located at. */
    latitude?: number | undefined;
    /** The longitude that the printer is located at. */
    longitude?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The organizational hierarchy that the printer belongs to. The elements should be in hierarchical order. */
    organization?: string[] | undefined;
    /** The postal code that the printer is located in. */
    postalCode?: string | undefined;
    /** The description of the room that the printer is located in. */
    roomDescription?: string | undefined;
    /** The room that the printer is located in. Only numerical values are supported right now. */
    roomName?: string | undefined;
    /** The site that the printer is located in. */
    site?: string | undefined;
    /** The state or province that the printer is located in. */
    stateOrProvince?: string | undefined;
    /** The street address where the printer is located. */
    streetAddress?: string | undefined;
    /** The subdivision that the printer is located in. The elements should be in hierarchical order. */
    subdivision?: string[] | undefined;
    /** The subunit property */
    subunit?: string[] | undefined;
}

export class PrintTaskTrigger extends Entity implements IPrintTaskTrigger {
    /** The definition property */
    definition?: PrintTaskDefinition | undefined;
    /** The event property */
    event?: PrintEvent | undefined;

    constructor(data?: IPrintTaskTrigger) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.definition = _data["definition"] ? PrintTaskDefinition.fromJS(_data["definition"]) : <any>undefined;
            this.event = _data["event"];
        }
    }

    static override fromJS(data: any): PrintTaskTrigger {
        data = typeof data === 'object' ? data : {};
        let result = new PrintTaskTrigger();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["definition"] = this.definition ? this.definition.toJSON() : <any>undefined;
        data["event"] = this.event;
        super.toJSON(data);
        return data;
    }
}

export interface IPrintTaskTrigger extends IEntity {
    /** The definition property */
    definition?: PrintTaskDefinition | undefined;
    /** The event property */
    event?: PrintEvent | undefined;
}

export class PrintTaskDefinition extends Entity implements IPrintTaskDefinition {
    /** The createdBy property */
    createdBy?: AppIdentity | undefined;
    /** The name of the printTaskDefinition. */
    displayName?: string | undefined;
    /** A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only. */
    tasks?: PrintTask[] | undefined;

    constructor(data?: IPrintTaskDefinition) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdBy = _data["createdBy"] ? AppIdentity.fromJS(_data["createdBy"]) : <any>undefined;
            this.displayName = _data["displayName"];
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(PrintTask.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): PrintTaskDefinition {
        data = typeof data === 'object' ? data : {};
        let result = new PrintTaskDefinition();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPrintTaskDefinition extends IEntity {
    /** The createdBy property */
    createdBy?: AppIdentity | undefined;
    /** The name of the printTaskDefinition. */
    displayName?: string | undefined;
    /** A list of tasks that have been created based on this definition. The list includes currently running tasks and recently completed tasks. Read-only. */
    tasks?: PrintTask[] | undefined;
}

export class AppIdentity implements IAppIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Refers to the unique ID representing application in Microsoft Entra ID. */
    appId?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Refers to the application name displayed in the Microsoft Entra admin center. */
    displayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Refers to the unique ID for the service principal in Microsoft Entra ID. */
    servicePrincipalId?: string | undefined;
    /** Refers to the Service Principal Name is the Application name in the tenant. */
    servicePrincipalName?: string | undefined;

    constructor(data?: IAppIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.appId = _data["appId"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.displayName = _data["displayName"];
            this.odataType = _data["odataType"];
            this.servicePrincipalId = _data["servicePrincipalId"];
            this.servicePrincipalName = _data["servicePrincipalName"];
        }
    }

    static fromJS(data: any): AppIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new AppIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["appId"] = this.appId;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["displayName"] = this.displayName;
        data["odataType"] = this.odataType;
        data["servicePrincipalId"] = this.servicePrincipalId;
        data["servicePrincipalName"] = this.servicePrincipalName;
        return data;
    }
}

export interface IAppIdentity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Refers to the unique ID representing application in Microsoft Entra ID. */
    appId?: string | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Refers to the application name displayed in the Microsoft Entra admin center. */
    displayName?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Refers to the unique ID for the service principal in Microsoft Entra ID. */
    servicePrincipalId?: string | undefined;
    /** Refers to the Service Principal Name is the Application name in the tenant. */
    servicePrincipalName?: string | undefined;
}

export class PrintTask extends Entity implements IPrintTask {
    /** The definition property */
    definition?: PrintTaskDefinition | undefined;
    /** The URL for the print entity that triggered this task. For example, https://graph.microsoft.com/v1.0/print/printers/{printerId}/jobs/{jobId}. Read-only. */
    parentUrl?: string | undefined;
    /** The status property */
    status?: PrintTaskStatus | undefined;
    /** The trigger property */
    trigger?: PrintTaskTrigger | undefined;

    constructor(data?: IPrintTask) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.definition = _data["definition"] ? PrintTaskDefinition.fromJS(_data["definition"]) : <any>undefined;
            this.parentUrl = _data["parentUrl"];
            this.status = _data["status"] ? PrintTaskStatus.fromJS(_data["status"]) : <any>undefined;
            this.trigger = _data["trigger"] ? PrintTaskTrigger.fromJS(_data["trigger"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): PrintTask {
        data = typeof data === 'object' ? data : {};
        let result = new PrintTask();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["definition"] = this.definition ? this.definition.toJSON() : <any>undefined;
        data["parentUrl"] = this.parentUrl;
        data["status"] = this.status ? this.status.toJSON() : <any>undefined;
        data["trigger"] = this.trigger ? this.trigger.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPrintTask extends IEntity {
    /** The definition property */
    definition?: PrintTaskDefinition | undefined;
    /** The URL for the print entity that triggered this task. For example, https://graph.microsoft.com/v1.0/print/printers/{printerId}/jobs/{jobId}. Read-only. */
    parentUrl?: string | undefined;
    /** The status property */
    status?: PrintTaskStatus | undefined;
    /** The trigger property */
    trigger?: PrintTaskTrigger | undefined;
}

export class PrintTaskStatus implements IPrintTaskStatus {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A human-readable description of the current processing state of the printTask. */
    description?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The state property */
    state?: PrintTaskProcessingState | undefined;

    constructor(data?: IPrintTaskStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.description = _data["description"];
            this.odataType = _data["odataType"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PrintTaskStatus {
        data = typeof data === 'object' ? data : {};
        let result = new PrintTaskStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["odataType"] = this.odataType;
        data["state"] = this.state;
        return data;
    }
}

export interface IPrintTaskStatus {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A human-readable description of the current processing state of the printTask. */
    description?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The state property */
    state?: PrintTaskProcessingState | undefined;
}

export enum PrintTaskProcessingState {
    Pending = 0,
    Processing = 1,
    Completed = 2,
    Aborted = 3,
    UnknownFutureValue = 4,
}

export enum PrintEvent {
    JobStarted = 0,
    UnknownFutureValue = 1,
}

export class PrinterCapabilities implements IPrinterCapabilities {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A list of supported bottom margins(in microns) for the printer. */
    bottomMargins?: (number | undefined)[] | undefined;
    /** True if the printer supports collating when printing muliple copies of a multi-page document; false otherwise. */
    collation?: boolean | undefined;
    /** The color modes supported by the printer. Valid values are described in the following table. */
    colorModes?: (PrintColorMode | undefined)[] | undefined;
    /** A list of supported content (MIME) types that the printer supports. It is not guaranteed that the Universal Print service supports printing all of these MIME types. */
    contentTypes?: string[] | undefined;
    /** The range of copies per job supported by the printer. */
    copiesPerJob?: IntegerRange | undefined;
    /** The list of print resolutions in DPI that are supported by the printer. */
    dpis?: (number | undefined)[] | undefined;
    /** The list of duplex modes that are supported by the printer. Valid values are described in the following table. */
    duplexModes?: (PrintDuplexMode | undefined)[] | undefined;
    /** The list of feed orientations that are supported by the printer. */
    feedOrientations?: (PrinterFeedOrientation | undefined)[] | undefined;
    /** Finishing processes the printer supports for a printed document. */
    finishings?: (PrintFinishing | undefined)[] | undefined;
    /** Supported input bins for the printer. */
    inputBins?: string[] | undefined;
    /** True if color printing is supported by the printer; false otherwise. Read-only. */
    isColorPrintingSupported?: boolean | undefined;
    /** True if the printer supports printing by page ranges; false otherwise. */
    isPageRangeSupported?: boolean | undefined;
    /** A list of supported left margins(in microns) for the printer. */
    leftMargins?: (number | undefined)[] | undefined;
    /** The media (i.e., paper) colors supported by the printer. */
    mediaColors?: string[] | undefined;
    /** The media sizes supported by the printer. Supports standard size names for ISO and ANSI media sizes. Valid values are in the following table. */
    mediaSizes?: string[] | undefined;
    /** The media types supported by the printer. */
    mediaTypes?: string[] | undefined;
    /** The presentation directions supported by the printer. Supported values are described in the following table. */
    multipageLayouts?: (PrintMultipageLayout | undefined)[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The print orientations supported by the printer. Valid values are described in the following table. */
    orientations?: (PrintOrientation | undefined)[] | undefined;
    /** The printer's supported output bins (trays). */
    outputBins?: string[] | undefined;
    /** Supported number of Input Pages to impose upon a single Impression. */
    pagesPerSheet?: (number | undefined)[] | undefined;
    /** The print qualities supported by the printer. */
    qualities?: (PrintQuality | undefined)[] | undefined;
    /** A list of supported right margins(in microns) for the printer. */
    rightMargins?: (number | undefined)[] | undefined;
    /** Supported print scalings. */
    scalings?: (PrintScaling | undefined)[] | undefined;
    /** True if the printer supports scaling PDF pages to match the print media size; false otherwise. */
    supportsFitPdfToPage?: boolean | undefined;
    /** A list of supported top margins(in microns) for the printer. */
    topMargins?: (number | undefined)[] | undefined;

    constructor(data?: IPrinterCapabilities) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            if (Array.isArray(_data["bottomMargins"])) {
                this.bottomMargins = [] as any;
                for (let item of _data["bottomMargins"])
                    this.bottomMargins!.push(item);
            }
            this.collation = _data["collation"];
            if (Array.isArray(_data["colorModes"])) {
                this.colorModes = [] as any;
                for (let item of _data["colorModes"])
                    this.colorModes!.push(item);
            }
            if (Array.isArray(_data["contentTypes"])) {
                this.contentTypes = [] as any;
                for (let item of _data["contentTypes"])
                    this.contentTypes!.push(item);
            }
            this.copiesPerJob = _data["copiesPerJob"] ? IntegerRange.fromJS(_data["copiesPerJob"]) : <any>undefined;
            if (Array.isArray(_data["dpis"])) {
                this.dpis = [] as any;
                for (let item of _data["dpis"])
                    this.dpis!.push(item);
            }
            if (Array.isArray(_data["duplexModes"])) {
                this.duplexModes = [] as any;
                for (let item of _data["duplexModes"])
                    this.duplexModes!.push(item);
            }
            if (Array.isArray(_data["feedOrientations"])) {
                this.feedOrientations = [] as any;
                for (let item of _data["feedOrientations"])
                    this.feedOrientations!.push(item);
            }
            if (Array.isArray(_data["finishings"])) {
                this.finishings = [] as any;
                for (let item of _data["finishings"])
                    this.finishings!.push(item);
            }
            if (Array.isArray(_data["inputBins"])) {
                this.inputBins = [] as any;
                for (let item of _data["inputBins"])
                    this.inputBins!.push(item);
            }
            this.isColorPrintingSupported = _data["isColorPrintingSupported"];
            this.isPageRangeSupported = _data["isPageRangeSupported"];
            if (Array.isArray(_data["leftMargins"])) {
                this.leftMargins = [] as any;
                for (let item of _data["leftMargins"])
                    this.leftMargins!.push(item);
            }
            if (Array.isArray(_data["mediaColors"])) {
                this.mediaColors = [] as any;
                for (let item of _data["mediaColors"])
                    this.mediaColors!.push(item);
            }
            if (Array.isArray(_data["mediaSizes"])) {
                this.mediaSizes = [] as any;
                for (let item of _data["mediaSizes"])
                    this.mediaSizes!.push(item);
            }
            if (Array.isArray(_data["mediaTypes"])) {
                this.mediaTypes = [] as any;
                for (let item of _data["mediaTypes"])
                    this.mediaTypes!.push(item);
            }
            if (Array.isArray(_data["multipageLayouts"])) {
                this.multipageLayouts = [] as any;
                for (let item of _data["multipageLayouts"])
                    this.multipageLayouts!.push(item);
            }
            this.odataType = _data["odataType"];
            if (Array.isArray(_data["orientations"])) {
                this.orientations = [] as any;
                for (let item of _data["orientations"])
                    this.orientations!.push(item);
            }
            if (Array.isArray(_data["outputBins"])) {
                this.outputBins = [] as any;
                for (let item of _data["outputBins"])
                    this.outputBins!.push(item);
            }
            if (Array.isArray(_data["pagesPerSheet"])) {
                this.pagesPerSheet = [] as any;
                for (let item of _data["pagesPerSheet"])
                    this.pagesPerSheet!.push(item);
            }
            if (Array.isArray(_data["qualities"])) {
                this.qualities = [] as any;
                for (let item of _data["qualities"])
                    this.qualities!.push(item);
            }
            if (Array.isArray(_data["rightMargins"])) {
                this.rightMargins = [] as any;
                for (let item of _data["rightMargins"])
                    this.rightMargins!.push(item);
            }
            if (Array.isArray(_data["scalings"])) {
                this.scalings = [] as any;
                for (let item of _data["scalings"])
                    this.scalings!.push(item);
            }
            this.supportsFitPdfToPage = _data["supportsFitPdfToPage"];
            if (Array.isArray(_data["topMargins"])) {
                this.topMargins = [] as any;
                for (let item of _data["topMargins"])
                    this.topMargins!.push(item);
            }
        }
    }

    static fromJS(data: any): PrinterCapabilities {
        data = typeof data === 'object' ? data : {};
        let result = new PrinterCapabilities();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        if (Array.isArray(this.bottomMargins)) {
            data["bottomMargins"] = [];
            for (let item of this.bottomMargins)
                data["bottomMargins"].push(item);
        }
        data["collation"] = this.collation;
        if (Array.isArray(this.colorModes)) {
            data["colorModes"] = [];
            for (let item of this.colorModes)
                data["colorModes"].push(item);
        }
        if (Array.isArray(this.contentTypes)) {
            data["contentTypes"] = [];
            for (let item of this.contentTypes)
                data["contentTypes"].push(item);
        }
        data["copiesPerJob"] = this.copiesPerJob ? this.copiesPerJob.toJSON() : <any>undefined;
        if (Array.isArray(this.dpis)) {
            data["dpis"] = [];
            for (let item of this.dpis)
                data["dpis"].push(item);
        }
        if (Array.isArray(this.duplexModes)) {
            data["duplexModes"] = [];
            for (let item of this.duplexModes)
                data["duplexModes"].push(item);
        }
        if (Array.isArray(this.feedOrientations)) {
            data["feedOrientations"] = [];
            for (let item of this.feedOrientations)
                data["feedOrientations"].push(item);
        }
        if (Array.isArray(this.finishings)) {
            data["finishings"] = [];
            for (let item of this.finishings)
                data["finishings"].push(item);
        }
        if (Array.isArray(this.inputBins)) {
            data["inputBins"] = [];
            for (let item of this.inputBins)
                data["inputBins"].push(item);
        }
        data["isColorPrintingSupported"] = this.isColorPrintingSupported;
        data["isPageRangeSupported"] = this.isPageRangeSupported;
        if (Array.isArray(this.leftMargins)) {
            data["leftMargins"] = [];
            for (let item of this.leftMargins)
                data["leftMargins"].push(item);
        }
        if (Array.isArray(this.mediaColors)) {
            data["mediaColors"] = [];
            for (let item of this.mediaColors)
                data["mediaColors"].push(item);
        }
        if (Array.isArray(this.mediaSizes)) {
            data["mediaSizes"] = [];
            for (let item of this.mediaSizes)
                data["mediaSizes"].push(item);
        }
        if (Array.isArray(this.mediaTypes)) {
            data["mediaTypes"] = [];
            for (let item of this.mediaTypes)
                data["mediaTypes"].push(item);
        }
        if (Array.isArray(this.multipageLayouts)) {
            data["multipageLayouts"] = [];
            for (let item of this.multipageLayouts)
                data["multipageLayouts"].push(item);
        }
        data["odataType"] = this.odataType;
        if (Array.isArray(this.orientations)) {
            data["orientations"] = [];
            for (let item of this.orientations)
                data["orientations"].push(item);
        }
        if (Array.isArray(this.outputBins)) {
            data["outputBins"] = [];
            for (let item of this.outputBins)
                data["outputBins"].push(item);
        }
        if (Array.isArray(this.pagesPerSheet)) {
            data["pagesPerSheet"] = [];
            for (let item of this.pagesPerSheet)
                data["pagesPerSheet"].push(item);
        }
        if (Array.isArray(this.qualities)) {
            data["qualities"] = [];
            for (let item of this.qualities)
                data["qualities"].push(item);
        }
        if (Array.isArray(this.rightMargins)) {
            data["rightMargins"] = [];
            for (let item of this.rightMargins)
                data["rightMargins"].push(item);
        }
        if (Array.isArray(this.scalings)) {
            data["scalings"] = [];
            for (let item of this.scalings)
                data["scalings"].push(item);
        }
        data["supportsFitPdfToPage"] = this.supportsFitPdfToPage;
        if (Array.isArray(this.topMargins)) {
            data["topMargins"] = [];
            for (let item of this.topMargins)
                data["topMargins"].push(item);
        }
        return data;
    }
}

export interface IPrinterCapabilities {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A list of supported bottom margins(in microns) for the printer. */
    bottomMargins?: (number | undefined)[] | undefined;
    /** True if the printer supports collating when printing muliple copies of a multi-page document; false otherwise. */
    collation?: boolean | undefined;
    /** The color modes supported by the printer. Valid values are described in the following table. */
    colorModes?: (PrintColorMode | undefined)[] | undefined;
    /** A list of supported content (MIME) types that the printer supports. It is not guaranteed that the Universal Print service supports printing all of these MIME types. */
    contentTypes?: string[] | undefined;
    /** The range of copies per job supported by the printer. */
    copiesPerJob?: IntegerRange | undefined;
    /** The list of print resolutions in DPI that are supported by the printer. */
    dpis?: (number | undefined)[] | undefined;
    /** The list of duplex modes that are supported by the printer. Valid values are described in the following table. */
    duplexModes?: (PrintDuplexMode | undefined)[] | undefined;
    /** The list of feed orientations that are supported by the printer. */
    feedOrientations?: (PrinterFeedOrientation | undefined)[] | undefined;
    /** Finishing processes the printer supports for a printed document. */
    finishings?: (PrintFinishing | undefined)[] | undefined;
    /** Supported input bins for the printer. */
    inputBins?: string[] | undefined;
    /** True if color printing is supported by the printer; false otherwise. Read-only. */
    isColorPrintingSupported?: boolean | undefined;
    /** True if the printer supports printing by page ranges; false otherwise. */
    isPageRangeSupported?: boolean | undefined;
    /** A list of supported left margins(in microns) for the printer. */
    leftMargins?: (number | undefined)[] | undefined;
    /** The media (i.e., paper) colors supported by the printer. */
    mediaColors?: string[] | undefined;
    /** The media sizes supported by the printer. Supports standard size names for ISO and ANSI media sizes. Valid values are in the following table. */
    mediaSizes?: string[] | undefined;
    /** The media types supported by the printer. */
    mediaTypes?: string[] | undefined;
    /** The presentation directions supported by the printer. Supported values are described in the following table. */
    multipageLayouts?: (PrintMultipageLayout | undefined)[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The print orientations supported by the printer. Valid values are described in the following table. */
    orientations?: (PrintOrientation | undefined)[] | undefined;
    /** The printer's supported output bins (trays). */
    outputBins?: string[] | undefined;
    /** Supported number of Input Pages to impose upon a single Impression. */
    pagesPerSheet?: (number | undefined)[] | undefined;
    /** The print qualities supported by the printer. */
    qualities?: (PrintQuality | undefined)[] | undefined;
    /** A list of supported right margins(in microns) for the printer. */
    rightMargins?: (number | undefined)[] | undefined;
    /** Supported print scalings. */
    scalings?: (PrintScaling | undefined)[] | undefined;
    /** True if the printer supports scaling PDF pages to match the print media size; false otherwise. */
    supportsFitPdfToPage?: boolean | undefined;
    /** A list of supported top margins(in microns) for the printer. */
    topMargins?: (number | undefined)[] | undefined;
}

export enum PrintColorMode {
    BlackAndWhite = 0,
    Grayscale = 1,
    Color = 2,
    Auto = 3,
    UnknownFutureValue = 4,
}

export class IntegerRange implements IIntegerRange {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The inclusive upper bound of the integer range. */
    end?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The inclusive lower bound of the integer range. */
    start?: number | undefined;

    constructor(data?: IIntegerRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.end = _data["end"];
            this.odataType = _data["odataType"];
            this.start = _data["start"];
        }
    }

    static fromJS(data: any): IntegerRange {
        data = typeof data === 'object' ? data : {};
        let result = new IntegerRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["end"] = this.end;
        data["odataType"] = this.odataType;
        data["start"] = this.start;
        return data;
    }
}

export interface IIntegerRange {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The inclusive upper bound of the integer range. */
    end?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The inclusive lower bound of the integer range. */
    start?: number | undefined;
}

export enum PrintDuplexMode {
    FlipOnLongEdge = 0,
    FlipOnShortEdge = 1,
    OneSided = 2,
    UnknownFutureValue = 3,
}

export enum PrinterFeedOrientation {
    LongEdgeFirst = 0,
    ShortEdgeFirst = 1,
    UnknownFutureValue = 2,
}

export enum PrintFinishing {
    None = 0,
    Staple = 1,
    Punch = 2,
    Cover = 3,
    Bind = 4,
    SaddleStitch = 5,
    StitchEdge = 6,
    StapleTopLeft = 7,
    StapleBottomLeft = 8,
    StapleTopRight = 9,
    StapleBottomRight = 10,
    StitchLeftEdge = 11,
    StitchTopEdge = 12,
    StitchRightEdge = 13,
    StitchBottomEdge = 14,
    StapleDualLeft = 15,
    StapleDualTop = 16,
    StapleDualRight = 17,
    StapleDualBottom = 18,
    UnknownFutureValue = 19,
    StapleTripleLeft = 20,
    StapleTripleTop = 21,
    StapleTripleRight = 22,
    StapleTripleBottom = 23,
    BindLeft = 24,
    BindTop = 25,
    BindRight = 26,
    BindBottom = 27,
    FoldAccordion = 28,
    FoldDoubleGate = 29,
    FoldGate = 30,
    FoldHalf = 31,
    FoldHalfZ = 32,
    FoldLeftGate = 33,
    FoldLetter = 34,
    FoldParallel = 35,
    FoldPoster = 36,
    FoldRightGate = 37,
    FoldZ = 38,
    FoldEngineeringZ = 39,
    PunchTopLeft = 40,
    PunchBottomLeft = 41,
    PunchTopRight = 42,
    PunchBottomRight = 43,
    PunchDualLeft = 44,
    PunchDualTop = 45,
    PunchDualRight = 46,
    PunchDualBottom = 47,
    PunchTripleLeft = 48,
    PunchTripleTop = 49,
    PunchTripleRight = 50,
    PunchTripleBottom = 51,
    PunchQuadLeft = 52,
    PunchQuadTop = 53,
    PunchQuadRight = 54,
    PunchQuadBottom = 55,
    Fold = 56,
    Trim = 57,
    Bale = 58,
    BookletMaker = 59,
    Coat = 60,
    Laminate = 61,
    TrimAfterPages = 62,
    TrimAfterDocuments = 63,
    TrimAfterCopies = 64,
    TrimAfterJob = 65,
}

export enum PrintMultipageLayout {
    ClockwiseFromTopLeft = 0,
    CounterclockwiseFromTopLeft = 1,
    CounterclockwiseFromTopRight = 2,
    ClockwiseFromTopRight = 3,
    CounterclockwiseFromBottomLeft = 4,
    ClockwiseFromBottomLeft = 5,
    CounterclockwiseFromBottomRight = 6,
    ClockwiseFromBottomRight = 7,
    UnknownFutureValue = 8,
}

export enum PrintOrientation {
    Portrait = 0,
    Landscape = 1,
    ReverseLandscape = 2,
    ReversePortrait = 3,
    UnknownFutureValue = 4,
}

export enum PrintQuality {
    Low = 0,
    Medium = 1,
    High = 2,
    UnknownFutureValue = 3,
}

export enum PrintScaling {
    Auto = 0,
    ShrinkToFit = 1,
    Fill = 2,
    Fit = 3,
    None = 4,
    UnknownFutureValue = 5,
}

export class PrinterDefaults implements IPrinterDefaults {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The default color mode to use when printing the document. Valid values are described in the following table. */
    colorMode?: PrintColorMode | undefined;
    /** The default content (MIME) type to use when processing documents. */
    contentType?: string | undefined;
    /** The default number of copies printed per job. */
    copiesPerJob?: number | undefined;
    /** The default resolution in DPI to use when printing the job. */
    dpi?: number | undefined;
    /** The default duplex (double-sided) configuration to use when printing a document. Valid values are described in the following table. */
    duplexMode?: PrintDuplexMode | undefined;
    /** The default set of finishings to apply to print jobs. Valid values are described in the following table. */
    finishings?: (PrintFinishing | undefined)[] | undefined;
    /** The default fitPdfToPage setting. True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions. */
    fitPdfToPage?: boolean | undefined;
    /** The default input bin that serves as the paper source. */
    inputBin?: string | undefined;
    /** The default media (such as paper) color to print the document on. */
    mediaColor?: string | undefined;
    /** The default media size to use. Supports standard size names for ISO and ANSI media sizes. Valid values are listed in the printerCapabilities topic. */
    mediaSize?: string | undefined;
    /** The default media (such as paper) type to print the document on. */
    mediaType?: string | undefined;
    /** The default direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table. */
    multipageLayout?: PrintMultipageLayout | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The default orientation to use when printing the document. Valid values are described in the following table. */
    orientation?: PrintOrientation | undefined;
    /** The default output bin to place completed prints into. See the printer's capabilities for a list of supported output bins. */
    outputBin?: string | undefined;
    /** The default number of document pages to print on each sheet. */
    pagesPerSheet?: number | undefined;
    /** The default quality to use when printing the document. Valid values are described in the following table. */
    quality?: PrintQuality | undefined;
    /** Specifies how the printer scales the document data to fit the requested media. Valid values are described in the following table. */
    scaling?: PrintScaling | undefined;

    constructor(data?: IPrinterDefaults) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.colorMode = _data["colorMode"];
            this.contentType = _data["contentType"];
            this.copiesPerJob = _data["copiesPerJob"];
            this.dpi = _data["dpi"];
            this.duplexMode = _data["duplexMode"];
            if (Array.isArray(_data["finishings"])) {
                this.finishings = [] as any;
                for (let item of _data["finishings"])
                    this.finishings!.push(item);
            }
            this.fitPdfToPage = _data["fitPdfToPage"];
            this.inputBin = _data["inputBin"];
            this.mediaColor = _data["mediaColor"];
            this.mediaSize = _data["mediaSize"];
            this.mediaType = _data["mediaType"];
            this.multipageLayout = _data["multipageLayout"];
            this.odataType = _data["odataType"];
            this.orientation = _data["orientation"];
            this.outputBin = _data["outputBin"];
            this.pagesPerSheet = _data["pagesPerSheet"];
            this.quality = _data["quality"];
            this.scaling = _data["scaling"];
        }
    }

    static fromJS(data: any): PrinterDefaults {
        data = typeof data === 'object' ? data : {};
        let result = new PrinterDefaults();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["colorMode"] = this.colorMode;
        data["contentType"] = this.contentType;
        data["copiesPerJob"] = this.copiesPerJob;
        data["dpi"] = this.dpi;
        data["duplexMode"] = this.duplexMode;
        if (Array.isArray(this.finishings)) {
            data["finishings"] = [];
            for (let item of this.finishings)
                data["finishings"].push(item);
        }
        data["fitPdfToPage"] = this.fitPdfToPage;
        data["inputBin"] = this.inputBin;
        data["mediaColor"] = this.mediaColor;
        data["mediaSize"] = this.mediaSize;
        data["mediaType"] = this.mediaType;
        data["multipageLayout"] = this.multipageLayout;
        data["odataType"] = this.odataType;
        data["orientation"] = this.orientation;
        data["outputBin"] = this.outputBin;
        data["pagesPerSheet"] = this.pagesPerSheet;
        data["quality"] = this.quality;
        data["scaling"] = this.scaling;
        return data;
    }
}

export interface IPrinterDefaults {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The default color mode to use when printing the document. Valid values are described in the following table. */
    colorMode?: PrintColorMode | undefined;
    /** The default content (MIME) type to use when processing documents. */
    contentType?: string | undefined;
    /** The default number of copies printed per job. */
    copiesPerJob?: number | undefined;
    /** The default resolution in DPI to use when printing the job. */
    dpi?: number | undefined;
    /** The default duplex (double-sided) configuration to use when printing a document. Valid values are described in the following table. */
    duplexMode?: PrintDuplexMode | undefined;
    /** The default set of finishings to apply to print jobs. Valid values are described in the following table. */
    finishings?: (PrintFinishing | undefined)[] | undefined;
    /** The default fitPdfToPage setting. True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions. */
    fitPdfToPage?: boolean | undefined;
    /** The default input bin that serves as the paper source. */
    inputBin?: string | undefined;
    /** The default media (such as paper) color to print the document on. */
    mediaColor?: string | undefined;
    /** The default media size to use. Supports standard size names for ISO and ANSI media sizes. Valid values are listed in the printerCapabilities topic. */
    mediaSize?: string | undefined;
    /** The default media (such as paper) type to print the document on. */
    mediaType?: string | undefined;
    /** The default direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table. */
    multipageLayout?: PrintMultipageLayout | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The default orientation to use when printing the document. Valid values are described in the following table. */
    orientation?: PrintOrientation | undefined;
    /** The default output bin to place completed prints into. See the printer's capabilities for a list of supported output bins. */
    outputBin?: string | undefined;
    /** The default number of document pages to print on each sheet. */
    pagesPerSheet?: number | undefined;
    /** The default quality to use when printing the document. Valid values are described in the following table. */
    quality?: PrintQuality | undefined;
    /** Specifies how the printer scales the document data to fit the requested media. Valid values are described in the following table. */
    scaling?: PrintScaling | undefined;
}

export class PrintJob extends Entity implements IPrintJob {
    /** The configuration property */
    configuration?: PrintJobConfiguration | undefined;
    /** The createdBy property */
    createdBy?: UserIdentity | undefined;
    /** The DateTimeOffset when the job was created. Read-only. */
    createdDateTime?: Date | undefined;
    /** The documents property */
    documents?: PrintDocument[] | undefined;
    /** If true, document can be fetched by printer. */
    isFetchable?: boolean | undefined;
    /** Contains the source job URL, if the job has been redirected from another printer. */
    redirectedFrom?: string | undefined;
    /** Contains the destination job URL, if the job has been redirected to another printer. */
    redirectedTo?: string | undefined;
    /** The status property */
    status?: PrintJobStatus | undefined;
    /** A list of printTasks that were triggered by this print job. */
    tasks?: PrintTask[] | undefined;

    constructor(data?: IPrintJob) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.configuration = _data["configuration"] ? PrintJobConfiguration.fromJS(_data["configuration"]) : <any>undefined;
            this.createdBy = _data["createdBy"] ? UserIdentity.fromJS(_data["createdBy"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["documents"])) {
                this.documents = [] as any;
                for (let item of _data["documents"])
                    this.documents!.push(PrintDocument.fromJS(item));
            }
            this.isFetchable = _data["isFetchable"];
            this.redirectedFrom = _data["redirectedFrom"];
            this.redirectedTo = _data["redirectedTo"];
            this.status = _data["status"] ? PrintJobStatus.fromJS(_data["status"]) : <any>undefined;
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(PrintTask.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): PrintJob {
        data = typeof data === 'object' ? data : {};
        let result = new PrintJob();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["configuration"] = this.configuration ? this.configuration.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.documents)) {
            data["documents"] = [];
            for (let item of this.documents)
                data["documents"].push(item.toJSON());
        }
        data["isFetchable"] = this.isFetchable;
        data["redirectedFrom"] = this.redirectedFrom;
        data["redirectedTo"] = this.redirectedTo;
        data["status"] = this.status ? this.status.toJSON() : <any>undefined;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IPrintJob extends IEntity {
    /** The configuration property */
    configuration?: PrintJobConfiguration | undefined;
    /** The createdBy property */
    createdBy?: UserIdentity | undefined;
    /** The DateTimeOffset when the job was created. Read-only. */
    createdDateTime?: Date | undefined;
    /** The documents property */
    documents?: PrintDocument[] | undefined;
    /** If true, document can be fetched by printer. */
    isFetchable?: boolean | undefined;
    /** Contains the source job URL, if the job has been redirected from another printer. */
    redirectedFrom?: string | undefined;
    /** Contains the destination job URL, if the job has been redirected to another printer. */
    redirectedTo?: string | undefined;
    /** The status property */
    status?: PrintJobStatus | undefined;
    /** A list of printTasks that were triggered by this print job. */
    tasks?: PrintTask[] | undefined;
}

export class PrintJobConfiguration implements IPrintJobConfiguration {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Whether the printer should collate pages wehen printing multiple copies of a multi-page document. */
    collate?: boolean | undefined;
    /** The color mode the printer should use to print the job. Valid values are described in the table below. Read-only. */
    colorMode?: PrintColorMode | undefined;
    /** The number of copies that should be printed. Read-only. */
    copies?: number | undefined;
    /** The resolution to use when printing the job, expressed in dots per inch (DPI). Read-only. */
    dpi?: number | undefined;
    /** The duplex mode the printer should use when printing the job. Valid values are described in the table below. Read-only. */
    duplexMode?: PrintDuplexMode | undefined;
    /** The orientation to use when feeding media into the printer. Valid values are described in the following table. Read-only. */
    feedOrientation?: PrinterFeedOrientation | undefined;
    /** Finishing processes to use when printing. */
    finishings?: (PrintFinishing | undefined)[] | undefined;
    /** True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions. */
    fitPdfToPage?: boolean | undefined;
    /** The input bin (tray) to use when printing. See the printer's capabilities for a list of supported input bins. */
    inputBin?: string | undefined;
    /** The margin settings to use when printing. */
    margin?: PrintMargin | undefined;
    /** The media size to use when printing. Supports standard size names for ISO and ANSI media sizes. Valid values listed in the printerCapabilities topic. */
    mediaSize?: string | undefined;
    /** The default media (such as paper) type to print the document on. */
    mediaType?: string | undefined;
    /** The direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table. */
    multipageLayout?: PrintMultipageLayout | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The orientation setting the printer should use when printing the job. Valid values are described in the following table. */
    orientation?: PrintOrientation | undefined;
    /** The output bin to place completed prints into. See the printer's capabilities for a list of supported output bins. */
    outputBin?: string | undefined;
    /** The page ranges to print. Read-only. */
    pageRanges?: IntegerRange[] | undefined;
    /** The number of document pages to print on each sheet. */
    pagesPerSheet?: number | undefined;
    /** The print quality to use when printing the job. Valid values are described in the table below. Read-only. */
    quality?: PrintQuality | undefined;
    /** Specifies how the printer should scale the document data to fit the requested media. Valid values are described in the following table. */
    scaling?: PrintScaling | undefined;

    constructor(data?: IPrintJobConfiguration) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.collate = _data["collate"];
            this.colorMode = _data["colorMode"];
            this.copies = _data["copies"];
            this.dpi = _data["dpi"];
            this.duplexMode = _data["duplexMode"];
            this.feedOrientation = _data["feedOrientation"];
            if (Array.isArray(_data["finishings"])) {
                this.finishings = [] as any;
                for (let item of _data["finishings"])
                    this.finishings!.push(item);
            }
            this.fitPdfToPage = _data["fitPdfToPage"];
            this.inputBin = _data["inputBin"];
            this.margin = _data["margin"] ? PrintMargin.fromJS(_data["margin"]) : <any>undefined;
            this.mediaSize = _data["mediaSize"];
            this.mediaType = _data["mediaType"];
            this.multipageLayout = _data["multipageLayout"];
            this.odataType = _data["odataType"];
            this.orientation = _data["orientation"];
            this.outputBin = _data["outputBin"];
            if (Array.isArray(_data["pageRanges"])) {
                this.pageRanges = [] as any;
                for (let item of _data["pageRanges"])
                    this.pageRanges!.push(IntegerRange.fromJS(item));
            }
            this.pagesPerSheet = _data["pagesPerSheet"];
            this.quality = _data["quality"];
            this.scaling = _data["scaling"];
        }
    }

    static fromJS(data: any): PrintJobConfiguration {
        data = typeof data === 'object' ? data : {};
        let result = new PrintJobConfiguration();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["collate"] = this.collate;
        data["colorMode"] = this.colorMode;
        data["copies"] = this.copies;
        data["dpi"] = this.dpi;
        data["duplexMode"] = this.duplexMode;
        data["feedOrientation"] = this.feedOrientation;
        if (Array.isArray(this.finishings)) {
            data["finishings"] = [];
            for (let item of this.finishings)
                data["finishings"].push(item);
        }
        data["fitPdfToPage"] = this.fitPdfToPage;
        data["inputBin"] = this.inputBin;
        data["margin"] = this.margin ? this.margin.toJSON() : <any>undefined;
        data["mediaSize"] = this.mediaSize;
        data["mediaType"] = this.mediaType;
        data["multipageLayout"] = this.multipageLayout;
        data["odataType"] = this.odataType;
        data["orientation"] = this.orientation;
        data["outputBin"] = this.outputBin;
        if (Array.isArray(this.pageRanges)) {
            data["pageRanges"] = [];
            for (let item of this.pageRanges)
                data["pageRanges"].push(item.toJSON());
        }
        data["pagesPerSheet"] = this.pagesPerSheet;
        data["quality"] = this.quality;
        data["scaling"] = this.scaling;
        return data;
    }
}

export interface IPrintJobConfiguration {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Whether the printer should collate pages wehen printing multiple copies of a multi-page document. */
    collate?: boolean | undefined;
    /** The color mode the printer should use to print the job. Valid values are described in the table below. Read-only. */
    colorMode?: PrintColorMode | undefined;
    /** The number of copies that should be printed. Read-only. */
    copies?: number | undefined;
    /** The resolution to use when printing the job, expressed in dots per inch (DPI). Read-only. */
    dpi?: number | undefined;
    /** The duplex mode the printer should use when printing the job. Valid values are described in the table below. Read-only. */
    duplexMode?: PrintDuplexMode | undefined;
    /** The orientation to use when feeding media into the printer. Valid values are described in the following table. Read-only. */
    feedOrientation?: PrinterFeedOrientation | undefined;
    /** Finishing processes to use when printing. */
    finishings?: (PrintFinishing | undefined)[] | undefined;
    /** True to fit each page of a PDF document to a physical sheet of media; false to let the printer decide how to lay out impressions. */
    fitPdfToPage?: boolean | undefined;
    /** The input bin (tray) to use when printing. See the printer's capabilities for a list of supported input bins. */
    inputBin?: string | undefined;
    /** The margin settings to use when printing. */
    margin?: PrintMargin | undefined;
    /** The media size to use when printing. Supports standard size names for ISO and ANSI media sizes. Valid values listed in the printerCapabilities topic. */
    mediaSize?: string | undefined;
    /** The default media (such as paper) type to print the document on. */
    mediaType?: string | undefined;
    /** The direction to lay out pages when multiple pages are being printed per sheet. Valid values are described in the following table. */
    multipageLayout?: PrintMultipageLayout | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The orientation setting the printer should use when printing the job. Valid values are described in the following table. */
    orientation?: PrintOrientation | undefined;
    /** The output bin to place completed prints into. See the printer's capabilities for a list of supported output bins. */
    outputBin?: string | undefined;
    /** The page ranges to print. Read-only. */
    pageRanges?: IntegerRange[] | undefined;
    /** The number of document pages to print on each sheet. */
    pagesPerSheet?: number | undefined;
    /** The print quality to use when printing the job. Valid values are described in the table below. Read-only. */
    quality?: PrintQuality | undefined;
    /** Specifies how the printer should scale the document data to fit the requested media. Valid values are described in the following table. */
    scaling?: PrintScaling | undefined;
}

export class PrintMargin implements IPrintMargin {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The margin in microns from the bottom edge. */
    bottom?: number | undefined;
    /** The margin in microns from the left edge. */
    left?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The margin in microns from the right edge. */
    right?: number | undefined;
    /** The margin in microns from the top edge. */
    top?: number | undefined;

    constructor(data?: IPrintMargin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.bottom = _data["bottom"];
            this.left = _data["left"];
            this.odataType = _data["odataType"];
            this.right = _data["right"];
            this.top = _data["top"];
        }
    }

    static fromJS(data: any): PrintMargin {
        data = typeof data === 'object' ? data : {};
        let result = new PrintMargin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["bottom"] = this.bottom;
        data["left"] = this.left;
        data["odataType"] = this.odataType;
        data["right"] = this.right;
        data["top"] = this.top;
        return data;
    }
}

export interface IPrintMargin {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The margin in microns from the bottom edge. */
    bottom?: number | undefined;
    /** The margin in microns from the left edge. */
    left?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The margin in microns from the right edge. */
    right?: number | undefined;
    /** The margin in microns from the top edge. */
    top?: number | undefined;
}

export class UserIdentity extends Identity implements IUserIdentity {
    /** Indicates the client IP address associated with the user performing the activity (audit log only). */
    ipAddress?: string | undefined;
    /** The userPrincipalName attribute of the user. */
    userPrincipalName?: string | undefined;

    constructor(data?: IUserIdentity) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.ipAddress = _data["ipAddress"];
            this.userPrincipalName = _data["userPrincipalName"];
        }
    }

    static override fromJS(data: any): UserIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new UserIdentity();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ipAddress"] = this.ipAddress;
        data["userPrincipalName"] = this.userPrincipalName;
        super.toJSON(data);
        return data;
    }
}

export interface IUserIdentity extends IIdentity {
    /** Indicates the client IP address associated with the user performing the activity (audit log only). */
    ipAddress?: string | undefined;
    /** The userPrincipalName attribute of the user. */
    userPrincipalName?: string | undefined;
}

export class PrintDocument extends Entity implements IPrintDocument {
    /** The document's content (MIME) type. Read-only. */
    contentType?: string | undefined;
    /** The document's name. Read-only. */
    displayName?: string | undefined;
    /** The document's size in bytes. Read-only. */
    size?: number | undefined;

    constructor(data?: IPrintDocument) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.contentType = _data["contentType"];
            this.displayName = _data["displayName"];
            this.size = _data["size"];
        }
    }

    static override fromJS(data: any): PrintDocument {
        data = typeof data === 'object' ? data : {};
        let result = new PrintDocument();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentType"] = this.contentType;
        data["displayName"] = this.displayName;
        data["size"] = this.size;
        super.toJSON(data);
        return data;
    }
}

export interface IPrintDocument extends IEntity {
    /** The document's content (MIME) type. Read-only. */
    contentType?: string | undefined;
    /** The document's name. Read-only. */
    displayName?: string | undefined;
    /** The document's size in bytes. Read-only. */
    size?: number | undefined;
}

export class PrintJobStatus implements IPrintJobStatus {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A human-readable description of the print job's current processing state. Read-only. */
    description?: string | undefined;
    /** Additional details for print job state. Valid values are described in the following table. Read-only. */
    details?: (PrintJobStateDetail | undefined)[] | undefined;
    /** True if the job was acknowledged by a printer; false otherwise. Read-only. */
    isAcquiredByPrinter?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The state property */
    state?: PrintJobProcessingState | undefined;

    constructor(data?: IPrintJobStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.description = _data["description"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(item);
            }
            this.isAcquiredByPrinter = _data["isAcquiredByPrinter"];
            this.odataType = _data["odataType"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PrintJobStatus {
        data = typeof data === 'object' ? data : {};
        let result = new PrintJobStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["description"] = this.description;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item);
        }
        data["isAcquiredByPrinter"] = this.isAcquiredByPrinter;
        data["odataType"] = this.odataType;
        data["state"] = this.state;
        return data;
    }
}

export interface IPrintJobStatus {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A human-readable description of the print job's current processing state. Read-only. */
    description?: string | undefined;
    /** Additional details for print job state. Valid values are described in the following table. Read-only. */
    details?: (PrintJobStateDetail | undefined)[] | undefined;
    /** True if the job was acknowledged by a printer; false otherwise. Read-only. */
    isAcquiredByPrinter?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The state property */
    state?: PrintJobProcessingState | undefined;
}

export enum PrintJobStateDetail {
    UploadPending = 0,
    Transforming = 1,
    CompletedSuccessfully = 2,
    CompletedWithWarnings = 3,
    CompletedWithErrors = 4,
    ReleaseWait = 5,
    Interpreting = 6,
    UnknownFutureValue = 7,
}

export enum PrintJobProcessingState {
    Unknown = 0,
    Pending = 1,
    Processing = 2,
    Paused = 3,
    Stopped = 4,
    Completed = 5,
    Canceled = 6,
    Aborted = 7,
    UnknownFutureValue = 8,
}

export class PrinterStatus implements IPrinterStatus {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A human-readable description of the printer's current processing state. Read-only. */
    description?: string | undefined;
    /** The list of details describing why the printer is in the current state. Valid values are described in the following table. Read-only. */
    details?: (PrinterProcessingStateDetail | undefined)[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The state property */
    state?: PrinterProcessingState | undefined;

    constructor(data?: IPrinterStatus) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.description = _data["description"];
            if (Array.isArray(_data["details"])) {
                this.details = [] as any;
                for (let item of _data["details"])
                    this.details!.push(item);
            }
            this.odataType = _data["odataType"];
            this.state = _data["state"];
        }
    }

    static fromJS(data: any): PrinterStatus {
        data = typeof data === 'object' ? data : {};
        let result = new PrinterStatus();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["description"] = this.description;
        if (Array.isArray(this.details)) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item);
        }
        data["odataType"] = this.odataType;
        data["state"] = this.state;
        return data;
    }
}

export interface IPrinterStatus {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** A human-readable description of the printer's current processing state. Read-only. */
    description?: string | undefined;
    /** The list of details describing why the printer is in the current state. Valid values are described in the following table. Read-only. */
    details?: (PrinterProcessingStateDetail | undefined)[] | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The state property */
    state?: PrinterProcessingState | undefined;
}

export enum PrinterProcessingStateDetail {
    Paused = 0,
    MediaJam = 1,
    MediaNeeded = 2,
    MediaLow = 3,
    MediaEmpty = 4,
    CoverOpen = 5,
    InterlockOpen = 6,
    OutputTrayMissing = 7,
    OutputAreaFull = 8,
    MarkerSupplyLow = 9,
    MarkerSupplyEmpty = 10,
    InputTrayMissing = 11,
    OutputAreaAlmostFull = 12,
    MarkerWasteAlmostFull = 13,
    MarkerWasteFull = 14,
    FuserOverTemp = 15,
    FuserUnderTemp = 16,
    Other = 17,
    None = 18,
    MovingToPaused = 19,
    Shutdown = 20,
    ConnectingToDevice = 21,
    TimedOut = 22,
    Stopping = 23,
    StoppedPartially = 24,
    TonerLow = 25,
    TonerEmpty = 26,
    SpoolAreaFull = 27,
    DoorOpen = 28,
    OpticalPhotoConductorNearEndOfLife = 29,
    OpticalPhotoConductorLifeOver = 30,
    DeveloperLow = 31,
    DeveloperEmpty = 32,
    InterpreterResourceUnavailable = 33,
    UnknownFutureValue = 34,
    AlertRemovalOfBinaryChangeEntry = 35,
    BanderAdded = 36,
    BanderAlmostEmpty = 37,
    BanderAlmostFull = 38,
    BanderAtLimit = 39,
    BanderClosed = 40,
    BanderConfigurationChange = 41,
    BanderCoverClosed = 42,
    BanderCoverOpen = 43,
    BanderEmpty = 44,
    BanderFull = 45,
    BanderInterlockClosed = 46,
    BanderInterlockOpen = 47,
    BanderJam = 48,
    BanderLifeAlmostOver = 49,
    BanderLifeOver = 50,
    BanderMemoryExhausted = 51,
    BanderMissing = 52,
    BanderMotorFailure = 53,
    BanderNearLimit = 54,
    BanderOffline = 55,
    BanderOpened = 56,
    BanderOverTemperature = 57,
    BanderPowerSaver = 58,
    BanderRecoverableFailure = 59,
    BanderRecoverableStorage = 60,
    BanderRemoved = 61,
    BanderResourceAdded = 62,
    BanderResourceRemoved = 63,
    BanderThermistorFailure = 64,
    BanderTimingFailure = 65,
    BanderTurnedOff = 66,
    BanderTurnedOn = 67,
    BanderUnderTemperature = 68,
    BanderUnrecoverableFailure = 69,
    BanderUnrecoverableStorageError = 70,
    BanderWarmingUp = 71,
    BinderAdded = 72,
    BinderAlmostEmpty = 73,
    BinderAlmostFull = 74,
    BinderAtLimit = 75,
    BinderClosed = 76,
    BinderConfigurationChange = 77,
    BinderCoverClosed = 78,
    BinderCoverOpen = 79,
    BinderEmpty = 80,
    BinderFull = 81,
    BinderInterlockClosed = 82,
    BinderInterlockOpen = 83,
    BinderJam = 84,
    BinderLifeAlmostOver = 85,
    BinderLifeOver = 86,
    BinderMemoryExhausted = 87,
    BinderMissing = 88,
    BinderMotorFailure = 89,
    BinderNearLimit = 90,
    BinderOffline = 91,
    BinderOpened = 92,
    BinderOverTemperature = 93,
    BinderPowerSaver = 94,
    BinderRecoverableFailure = 95,
    BinderRecoverableStorage = 96,
    BinderRemoved = 97,
    BinderResourceAdded = 98,
    BinderResourceRemoved = 99,
    BinderThermistorFailure = 100,
    BinderTimingFailure = 101,
    BinderTurnedOff = 102,
    BinderTurnedOn = 103,
    BinderUnderTemperature = 104,
    BinderUnrecoverableFailure = 105,
    BinderUnrecoverableStorageError = 106,
    BinderWarmingUp = 107,
    CameraFailure = 108,
    ChamberCooling = 109,
    ChamberFailure = 110,
    ChamberHeating = 111,
    ChamberTemperatureHigh = 112,
    ChamberTemperatureLow = 113,
    CleanerLifeAlmostOver = 114,
    CleanerLifeOver = 115,
    ConfigurationChange = 116,
    Deactivated = 117,
    Deleted = 118,
    DieCutterAdded = 119,
    DieCutterAlmostEmpty = 120,
    DieCutterAlmostFull = 121,
    DieCutterAtLimit = 122,
    DieCutterClosed = 123,
    DieCutterConfigurationChange = 124,
    DieCutterCoverClosed = 125,
    DieCutterCoverOpen = 126,
    DieCutterEmpty = 127,
    DieCutterFull = 128,
    DieCutterInterlockClosed = 129,
    DieCutterInterlockOpen = 130,
    DieCutterJam = 131,
    DieCutterLifeAlmostOver = 132,
    DieCutterLifeOver = 133,
    DieCutterMemoryExhausted = 134,
    DieCutterMissing = 135,
    DieCutterMotorFailure = 136,
    DieCutterNearLimit = 137,
    DieCutterOffline = 138,
    DieCutterOpened = 139,
    DieCutterOverTemperature = 140,
    DieCutterPowerSaver = 141,
    DieCutterRecoverableFailure = 142,
    DieCutterRecoverableStorage = 143,
    DieCutterRemoved = 144,
    DieCutterResourceAdded = 145,
    DieCutterResourceRemoved = 146,
    DieCutterThermistorFailure = 147,
    DieCutterTimingFailure = 148,
    DieCutterTurnedOff = 149,
    DieCutterTurnedOn = 150,
    DieCutterUnderTemperature = 151,
    DieCutterUnrecoverableFailure = 152,
    DieCutterUnrecoverableStorageError = 153,
    DieCutterWarmingUp = 154,
    ExtruderCooling = 155,
    ExtruderFailure = 156,
    ExtruderHeating = 157,
    ExtruderJam = 158,
    ExtruderTemperatureHigh = 159,
    ExtruderTemperatureLow = 160,
    FanFailure = 161,
    FaxModemLifeAlmostOver = 162,
    FaxModemLifeOver = 163,
    FaxModemMissing = 164,
    FaxModemTurnedOff = 165,
    FaxModemTurnedOn = 166,
    FolderAdded = 167,
    FolderAlmostEmpty = 168,
    FolderAlmostFull = 169,
    FolderAtLimit = 170,
    FolderClosed = 171,
    FolderConfigurationChange = 172,
    FolderCoverClosed = 173,
    FolderCoverOpen = 174,
    FolderEmpty = 175,
    FolderFull = 176,
    FolderInterlockClosed = 177,
    FolderInterlockOpen = 178,
    FolderJam = 179,
    FolderLifeAlmostOver = 180,
    FolderLifeOver = 181,
    FolderMemoryExhausted = 182,
    FolderMissing = 183,
    FolderMotorFailure = 184,
    FolderNearLimit = 185,
    FolderOffline = 186,
    FolderOpened = 187,
    FolderOverTemperature = 188,
    FolderPowerSaver = 189,
    FolderRecoverableFailure = 190,
    FolderRecoverableStorage = 191,
    FolderRemoved = 192,
    FolderResourceAdded = 193,
    FolderResourceRemoved = 194,
    FolderThermistorFailure = 195,
    FolderTimingFailure = 196,
    FolderTurnedOff = 197,
    FolderTurnedOn = 198,
    FolderUnderTemperature = 199,
    FolderUnrecoverableFailure = 200,
    FolderUnrecoverableStorageError = 201,
    FolderWarmingUp = 202,
    Hibernate = 203,
    HoldNewJobs = 204,
    IdentifyPrinterRequested = 205,
    ImprinterAdded = 206,
    ImprinterAlmostEmpty = 207,
    ImprinterAlmostFull = 208,
    ImprinterAtLimit = 209,
    ImprinterClosed = 210,
    ImprinterConfigurationChange = 211,
    ImprinterCoverClosed = 212,
    ImprinterCoverOpen = 213,
    ImprinterEmpty = 214,
    ImprinterFull = 215,
    ImprinterInterlockClosed = 216,
    ImprinterInterlockOpen = 217,
    ImprinterJam = 218,
    ImprinterLifeAlmostOver = 219,
    ImprinterLifeOver = 220,
    ImprinterMemoryExhausted = 221,
    ImprinterMissing = 222,
    ImprinterMotorFailure = 223,
    ImprinterNearLimit = 224,
    ImprinterOffline = 225,
    ImprinterOpened = 226,
    ImprinterOverTemperature = 227,
    ImprinterPowerSaver = 228,
    ImprinterRecoverableFailure = 229,
    ImprinterRecoverableStorage = 230,
    ImprinterRemoved = 231,
    ImprinterResourceAdded = 232,
    ImprinterResourceRemoved = 233,
    ImprinterThermistorFailure = 234,
    ImprinterTimingFailure = 235,
    ImprinterTurnedOff = 236,
    ImprinterTurnedOn = 237,
    ImprinterUnderTemperature = 238,
    ImprinterUnrecoverableFailure = 239,
    ImprinterUnrecoverableStorageError = 240,
    ImprinterWarmingUp = 241,
    InputCannotFeedSizeSelected = 242,
    InputManualInputRequest = 243,
    InputMediaColorChange = 244,
    InputMediaFormPartsChange = 245,
    InputMediaSizeChange = 246,
    InputMediaTrayFailure = 247,
    InputMediaTrayFeedError = 248,
    InputMediaTrayJam = 249,
    InputMediaTypeChange = 250,
    InputMediaWeightChange = 251,
    InputPickRollerFailure = 252,
    InputPickRollerLifeOver = 253,
    InputPickRollerLifeWarn = 254,
    InputPickRollerMissing = 255,
    InputTrayElevationFailure = 256,
    InputTrayPositionFailure = 257,
    InserterAdded = 258,
    InserterAlmostEmpty = 259,
    InserterAlmostFull = 260,
    InserterAtLimit = 261,
    InserterClosed = 262,
    InserterConfigurationChange = 263,
    InserterCoverClosed = 264,
    InserterCoverOpen = 265,
    InserterEmpty = 266,
    InserterFull = 267,
    InserterInterlockClosed = 268,
    InserterInterlockOpen = 269,
    InserterJam = 270,
    InserterLifeAlmostOver = 271,
    InserterLifeOver = 272,
    InserterMemoryExhausted = 273,
    InserterMissing = 274,
    InserterMotorFailure = 275,
    InserterNearLimit = 276,
    InserterOffline = 277,
    InserterOpened = 278,
    InserterOverTemperature = 279,
    InserterPowerSaver = 280,
    InserterRecoverableFailure = 281,
    InserterRecoverableStorage = 282,
    InserterRemoved = 283,
    InserterResourceAdded = 284,
    InserterResourceRemoved = 285,
    InserterThermistorFailure = 286,
    InserterTimingFailure = 287,
    InserterTurnedOff = 288,
    InserterTurnedOn = 289,
    InserterUnderTemperature = 290,
    InserterUnrecoverableFailure = 291,
    InserterUnrecoverableStorageError = 292,
    InserterWarmingUp = 293,
    InterlockClosed = 294,
    InterpreterCartridgeAdded = 295,
    InterpreterCartridgeDeleted = 296,
    InterpreterComplexPageEncountered = 297,
    InterpreterMemoryDecrease = 298,
    InterpreterMemoryIncrease = 299,
    InterpreterResourceAdded = 300,
    InterpreterResourceDeleted = 301,
    LampAtEol = 302,
    LampFailure = 303,
    LampNearEol = 304,
    LaserAtEol = 305,
    LaserFailure = 306,
    LaserNearEol = 307,
    MakeEnvelopeAdded = 308,
    MakeEnvelopeAlmostEmpty = 309,
    MakeEnvelopeAlmostFull = 310,
    MakeEnvelopeAtLimit = 311,
    MakeEnvelopeClosed = 312,
    MakeEnvelopeConfigurationChange = 313,
    MakeEnvelopeCoverClosed = 314,
    MakeEnvelopeCoverOpen = 315,
    MakeEnvelopeEmpty = 316,
    MakeEnvelopeFull = 317,
    MakeEnvelopeInterlockClosed = 318,
    MakeEnvelopeInterlockOpen = 319,
    MakeEnvelopeJam = 320,
    MakeEnvelopeLifeAlmostOver = 321,
    MakeEnvelopeLifeOver = 322,
    MakeEnvelopeMemoryExhausted = 323,
    MakeEnvelopeMissing = 324,
    MakeEnvelopeMotorFailure = 325,
    MakeEnvelopeNearLimit = 326,
    MakeEnvelopeOffline = 327,
    MakeEnvelopeOpened = 328,
    MakeEnvelopeOverTemperature = 329,
    MakeEnvelopePowerSaver = 330,
    MakeEnvelopeRecoverableFailure = 331,
    MakeEnvelopeRecoverableStorage = 332,
    MakeEnvelopeRemoved = 333,
    MakeEnvelopeResourceAdded = 334,
    MakeEnvelopeResourceRemoved = 335,
    MakeEnvelopeThermistorFailure = 336,
    MakeEnvelopeTimingFailure = 337,
    MakeEnvelopeTurnedOff = 338,
    MakeEnvelopeTurnedOn = 339,
    MakeEnvelopeUnderTemperature = 340,
    MakeEnvelopeUnrecoverableFailure = 341,
    MakeEnvelopeUnrecoverableStorageError = 342,
    MakeEnvelopeWarmingUp = 343,
    MarkerAdjustingPrintQuality = 344,
    MarkerCleanerMissing = 345,
    MarkerDeveloperAlmostEmpty = 346,
    MarkerDeveloperEmpty = 347,
    MarkerDeveloperMissing = 348,
    MarkerFuserMissing = 349,
    MarkerFuserThermistorFailure = 350,
    MarkerFuserTimingFailure = 351,
    MarkerInkAlmostEmpty = 352,
    MarkerInkEmpty = 353,
    MarkerInkMissing = 354,
    MarkerOpcMissing = 355,
    MarkerPrintRibbonAlmostEmpty = 356,
    MarkerPrintRibbonEmpty = 357,
    MarkerPrintRibbonMissing = 358,
    MarkerSupplyAlmostEmpty = 359,
    MarkerSupplyMissing = 360,
    MarkerTonerCartridgeMissing = 361,
    MarkerTonerMissing = 362,
    MarkerWasteInkReceptacleAlmostFull = 363,
    MarkerWasteInkReceptacleFull = 364,
    MarkerWasteInkReceptacleMissing = 365,
    MarkerWasteMissing = 366,
    MarkerWasteTonerReceptacleAlmostFull = 367,
    MarkerWasteTonerReceptacleFull = 368,
    MarkerWasteTonerReceptacleMissing = 369,
    MaterialEmpty = 370,
    MaterialLow = 371,
    MaterialNeeded = 372,
    MediaDrying = 373,
    MediaPathCannotDuplexMediaSelected = 374,
    MediaPathFailure = 375,
    MediaPathInputEmpty = 376,
    MediaPathInputFeedError = 377,
    MediaPathInputJam = 378,
    MediaPathInputRequest = 379,
    MediaPathJam = 380,
    MediaPathMediaTrayAlmostFull = 381,
    MediaPathMediaTrayFull = 382,
    MediaPathMediaTrayMissing = 383,
    MediaPathOutputFeedError = 384,
    MediaPathOutputFull = 385,
    MediaPathOutputJam = 386,
    MediaPathPickRollerFailure = 387,
    MediaPathPickRollerLifeOver = 388,
    MediaPathPickRollerLifeWarn = 389,
    MediaPathPickRollerMissing = 390,
    MotorFailure = 391,
    OutputMailboxSelectFailure = 392,
    OutputMediaTrayFailure = 393,
    OutputMediaTrayFeedError = 394,
    OutputMediaTrayJam = 395,
    PerforaterAdded = 396,
    PerforaterAlmostEmpty = 397,
    PerforaterAlmostFull = 398,
    PerforaterAtLimit = 399,
    PerforaterClosed = 400,
    PerforaterConfigurationChange = 401,
    PerforaterCoverClosed = 402,
    PerforaterCoverOpen = 403,
    PerforaterEmpty = 404,
    PerforaterFull = 405,
    PerforaterInterlockClosed = 406,
    PerforaterInterlockOpen = 407,
    PerforaterJam = 408,
    PerforaterLifeAlmostOver = 409,
    PerforaterLifeOver = 410,
    PerforaterMemoryExhausted = 411,
    PerforaterMissing = 412,
    PerforaterMotorFailure = 413,
    PerforaterNearLimit = 414,
    PerforaterOffline = 415,
    PerforaterOpened = 416,
    PerforaterOverTemperature = 417,
    PerforaterPowerSaver = 418,
    PerforaterRecoverableFailure = 419,
    PerforaterRecoverableStorage = 420,
    PerforaterRemoved = 421,
    PerforaterResourceAdded = 422,
    PerforaterResourceRemoved = 423,
    PerforaterThermistorFailure = 424,
    PerforaterTimingFailure = 425,
    PerforaterTurnedOff = 426,
    PerforaterTurnedOn = 427,
    PerforaterUnderTemperature = 428,
    PerforaterUnrecoverableFailure = 429,
    PerforaterUnrecoverableStorageError = 430,
    PerforaterWarmingUp = 431,
    PlatformCooling = 432,
    PlatformFailure = 433,
    PlatformHeating = 434,
    PlatformTemperatureHigh = 435,
    PlatformTemperatureLow = 436,
    PowerDown = 437,
    PowerUp = 438,
    PrinterManualReset = 439,
    PrinterNmsReset = 440,
    PrinterReadyToPrint = 441,
    PuncherAdded = 442,
    PuncherAlmostEmpty = 443,
    PuncherAlmostFull = 444,
    PuncherAtLimit = 445,
    PuncherClosed = 446,
    PuncherConfigurationChange = 447,
    PuncherCoverClosed = 448,
    PuncherCoverOpen = 449,
    PuncherEmpty = 450,
    PuncherFull = 451,
    PuncherInterlockClosed = 452,
    PuncherInterlockOpen = 453,
    PuncherJam = 454,
    PuncherLifeAlmostOver = 455,
    PuncherLifeOver = 456,
    PuncherMemoryExhausted = 457,
    PuncherMissing = 458,
    PuncherMotorFailure = 459,
    PuncherNearLimit = 460,
    PuncherOffline = 461,
    PuncherOpened = 462,
    PuncherOverTemperature = 463,
    PuncherPowerSaver = 464,
    PuncherRecoverableFailure = 465,
    PuncherRecoverableStorage = 466,
    PuncherRemoved = 467,
    PuncherResourceAdded = 468,
    PuncherResourceRemoved = 469,
    PuncherThermistorFailure = 470,
    PuncherTimingFailure = 471,
    PuncherTurnedOff = 472,
    PuncherTurnedOn = 473,
    PuncherUnderTemperature = 474,
    PuncherUnrecoverableFailure = 475,
    PuncherUnrecoverableStorageError = 476,
    PuncherWarmingUp = 477,
    Resuming = 478,
    ScanMediaPathFailure = 479,
    ScanMediaPathInputEmpty = 480,
    ScanMediaPathInputFeedError = 481,
    ScanMediaPathInputJam = 482,
    ScanMediaPathInputRequest = 483,
    ScanMediaPathJam = 484,
    ScanMediaPathOutputFeedError = 485,
    ScanMediaPathOutputFull = 486,
    ScanMediaPathOutputJam = 487,
    ScanMediaPathPickRollerFailure = 488,
    ScanMediaPathPickRollerLifeOver = 489,
    ScanMediaPathPickRollerLifeWarn = 490,
    ScanMediaPathPickRollerMissing = 491,
    ScanMediaPathTrayAlmostFull = 492,
    ScanMediaPathTrayFull = 493,
    ScanMediaPathTrayMissing = 494,
    ScannerLightFailure = 495,
    ScannerLightLifeAlmostOver = 496,
    ScannerLightLifeOver = 497,
    ScannerLightMissing = 498,
    ScannerSensorFailure = 499,
    ScannerSensorLifeAlmostOver = 500,
    ScannerSensorLifeOver = 501,
    ScannerSensorMissing = 502,
    SeparationCutterAdded = 503,
    SeparationCutterAlmostEmpty = 504,
    SeparationCutterAlmostFull = 505,
    SeparationCutterAtLimit = 506,
    SeparationCutterClosed = 507,
    SeparationCutterConfigurationChange = 508,
    SeparationCutterCoverClosed = 509,
    SeparationCutterCoverOpen = 510,
    SeparationCutterEmpty = 511,
    SeparationCutterFull = 512,
    SeparationCutterInterlockClosed = 513,
    SeparationCutterInterlockOpen = 514,
    SeparationCutterJam = 515,
    SeparationCutterLifeAlmostOver = 516,
    SeparationCutterLifeOver = 517,
    SeparationCutterMemoryExhausted = 518,
    SeparationCutterMissing = 519,
    SeparationCutterMotorFailure = 520,
    SeparationCutterNearLimit = 521,
    SeparationCutterOffline = 522,
    SeparationCutterOpened = 523,
    SeparationCutterOverTemperature = 524,
    SeparationCutterPowerSaver = 525,
    SeparationCutterRecoverableFailure = 526,
    SeparationCutterRecoverableStorage = 527,
    SeparationCutterRemoved = 528,
    SeparationCutterResourceAdded = 529,
    SeparationCutterResourceRemoved = 530,
    SeparationCutterThermistorFailure = 531,
    SeparationCutterTimingFailure = 532,
    SeparationCutterTurnedOff = 533,
    SeparationCutterTurnedOn = 534,
    SeparationCutterUnderTemperature = 535,
    SeparationCutterUnrecoverableFailure = 536,
    SeparationCutterUnrecoverableStorageError = 537,
    SeparationCutterWarmingUp = 538,
    SheetRotatorAdded = 539,
    SheetRotatorAlmostEmpty = 540,
    SheetRotatorAlmostFull = 541,
    SheetRotatorAtLimit = 542,
    SheetRotatorClosed = 543,
    SheetRotatorConfigurationChange = 544,
    SheetRotatorCoverClosed = 545,
    SheetRotatorCoverOpen = 546,
    SheetRotatorEmpty = 547,
    SheetRotatorFull = 548,
    SheetRotatorInterlockClosed = 549,
    SheetRotatorInterlockOpen = 550,
    SheetRotatorJam = 551,
    SheetRotatorLifeAlmostOver = 552,
    SheetRotatorLifeOver = 553,
    SheetRotatorMemoryExhausted = 554,
    SheetRotatorMissing = 555,
    SheetRotatorMotorFailure = 556,
    SheetRotatorNearLimit = 557,
    SheetRotatorOffline = 558,
    SheetRotatorOpened = 559,
    SheetRotatorOverTemperature = 560,
    SheetRotatorPowerSaver = 561,
    SheetRotatorRecoverableFailure = 562,
    SheetRotatorRecoverableStorage = 563,
    SheetRotatorRemoved = 564,
    SheetRotatorResourceAdded = 565,
    SheetRotatorResourceRemoved = 566,
    SheetRotatorThermistorFailure = 567,
    SheetRotatorTimingFailure = 568,
    SheetRotatorTurnedOff = 569,
    SheetRotatorTurnedOn = 570,
    SheetRotatorUnderTemperature = 571,
    SheetRotatorUnrecoverableFailure = 572,
    SheetRotatorUnrecoverableStorageError = 573,
    SheetRotatorWarmingUp = 574,
    SlitterAdded = 575,
    SlitterAlmostEmpty = 576,
    SlitterAlmostFull = 577,
    SlitterAtLimit = 578,
    SlitterClosed = 579,
    SlitterConfigurationChange = 580,
    SlitterCoverClosed = 581,
    SlitterCoverOpen = 582,
    SlitterEmpty = 583,
    SlitterFull = 584,
    SlitterInterlockClosed = 585,
    SlitterInterlockOpen = 586,
    SlitterJam = 587,
    SlitterLifeAlmostOver = 588,
    SlitterLifeOver = 589,
    SlitterMemoryExhausted = 590,
    SlitterMissing = 591,
    SlitterMotorFailure = 592,
    SlitterNearLimit = 593,
    SlitterOffline = 594,
    SlitterOpened = 595,
    SlitterOverTemperature = 596,
    SlitterPowerSaver = 597,
    SlitterRecoverableFailure = 598,
    SlitterRecoverableStorage = 599,
    SlitterRemoved = 600,
    SlitterResourceAdded = 601,
    SlitterResourceRemoved = 602,
    SlitterThermistorFailure = 603,
    SlitterTimingFailure = 604,
    SlitterTurnedOff = 605,
    SlitterTurnedOn = 606,
    SlitterUnderTemperature = 607,
    SlitterUnrecoverableFailure = 608,
    SlitterUnrecoverableStorageError = 609,
    SlitterWarmingUp = 610,
    StackerAdded = 611,
    StackerAlmostEmpty = 612,
    StackerAlmostFull = 613,
    StackerAtLimit = 614,
    StackerClosed = 615,
    StackerConfigurationChange = 616,
    StackerCoverClosed = 617,
    StackerCoverOpen = 618,
    StackerEmpty = 619,
    StackerFull = 620,
    StackerInterlockClosed = 621,
    StackerInterlockOpen = 622,
    StackerJam = 623,
    StackerLifeAlmostOver = 624,
    StackerLifeOver = 625,
    StackerMemoryExhausted = 626,
    StackerMissing = 627,
    StackerMotorFailure = 628,
    StackerNearLimit = 629,
    StackerOffline = 630,
    StackerOpened = 631,
    StackerOverTemperature = 632,
    StackerPowerSaver = 633,
    StackerRecoverableFailure = 634,
    StackerRecoverableStorage = 635,
    StackerRemoved = 636,
    StackerResourceAdded = 637,
    StackerResourceRemoved = 638,
    StackerThermistorFailure = 639,
    StackerTimingFailure = 640,
    StackerTurnedOff = 641,
    StackerTurnedOn = 642,
    StackerUnderTemperature = 643,
    StackerUnrecoverableFailure = 644,
    StackerUnrecoverableStorageError = 645,
    StackerWarmingUp = 646,
    Standby = 647,
    StaplerAdded = 648,
    StaplerAlmostEmpty = 649,
    StaplerAlmostFull = 650,
    StaplerAtLimit = 651,
    StaplerClosed = 652,
    StaplerConfigurationChange = 653,
    StaplerCoverClosed = 654,
    StaplerCoverOpen = 655,
    StaplerEmpty = 656,
    StaplerFull = 657,
    StaplerInterlockClosed = 658,
    StaplerInterlockOpen = 659,
    StaplerJam = 660,
    StaplerLifeAlmostOver = 661,
    StaplerLifeOver = 662,
    StaplerMemoryExhausted = 663,
    StaplerMissing = 664,
    StaplerMotorFailure = 665,
    StaplerNearLimit = 666,
    StaplerOffline = 667,
    StaplerOpened = 668,
    StaplerOverTemperature = 669,
    StaplerPowerSaver = 670,
    StaplerRecoverableFailure = 671,
    StaplerRecoverableStorage = 672,
    StaplerRemoved = 673,
    StaplerResourceAdded = 674,
    StaplerResourceRemoved = 675,
    StaplerThermistorFailure = 676,
    StaplerTimingFailure = 677,
    StaplerTurnedOff = 678,
    StaplerTurnedOn = 679,
    StaplerUnderTemperature = 680,
    StaplerUnrecoverableFailure = 681,
    StaplerUnrecoverableStorageError = 682,
    StaplerWarmingUp = 683,
    StitcherAdded = 684,
    StitcherAlmostEmpty = 685,
    StitcherAlmostFull = 686,
    StitcherAtLimit = 687,
    StitcherClosed = 688,
    StitcherConfigurationChange = 689,
    StitcherCoverClosed = 690,
    StitcherCoverOpen = 691,
    StitcherEmpty = 692,
    StitcherFull = 693,
    StitcherInterlockClosed = 694,
    StitcherInterlockOpen = 695,
    StitcherJam = 696,
    StitcherLifeAlmostOver = 697,
    StitcherLifeOver = 698,
    StitcherMemoryExhausted = 699,
    StitcherMissing = 700,
    StitcherMotorFailure = 701,
    StitcherNearLimit = 702,
    StitcherOffline = 703,
    StitcherOpened = 704,
    StitcherOverTemperature = 705,
    StitcherPowerSaver = 706,
    StitcherRecoverableFailure = 707,
    StitcherRecoverableStorage = 708,
    StitcherRemoved = 709,
    StitcherResourceAdded = 710,
    StitcherResourceRemoved = 711,
    StitcherThermistorFailure = 712,
    StitcherTimingFailure = 713,
    StitcherTurnedOff = 714,
    StitcherTurnedOn = 715,
    StitcherUnderTemperature = 716,
    StitcherUnrecoverableFailure = 717,
    StitcherUnrecoverableStorageError = 718,
    StitcherWarmingUp = 719,
    SubunitAdded = 720,
    SubunitAlmostEmpty = 721,
    SubunitAlmostFull = 722,
    SubunitAtLimit = 723,
    SubunitClosed = 724,
    SubunitCoolingDown = 725,
    SubunitEmpty = 726,
    SubunitFull = 727,
    SubunitLifeAlmostOver = 728,
    SubunitLifeOver = 729,
    SubunitMemoryExhausted = 730,
    SubunitMissing = 731,
    SubunitMotorFailure = 732,
    SubunitNearLimit = 733,
    SubunitOffline = 734,
    SubunitOpened = 735,
    SubunitOverTemperature = 736,
    SubunitPowerSaver = 737,
    SubunitRecoverableFailure = 738,
    SubunitRecoverableStorage = 739,
    SubunitRemoved = 740,
    SubunitResourceAdded = 741,
    SubunitResourceRemoved = 742,
    SubunitThermistorFailure = 743,
    SubunitTimingFailure = 744,
    SubunitTurnedOff = 745,
    SubunitTurnedOn = 746,
    SubunitUnderTemperature = 747,
    SubunitUnrecoverableFailure = 748,
    SubunitUnrecoverableStorage = 749,
    SubunitWarmingUp = 750,
    Suspend = 751,
    Testing = 752,
    TrimmerAdded = 753,
    TrimmerAlmostEmpty = 754,
    TrimmerAlmostFull = 755,
    TrimmerAtLimit = 756,
    TrimmerClosed = 757,
    TrimmerConfigurationChange = 758,
    TrimmerCoverClosed = 759,
    TrimmerCoverOpen = 760,
    TrimmerEmpty = 761,
    TrimmerFull = 762,
    TrimmerInterlockClosed = 763,
    TrimmerInterlockOpen = 764,
    TrimmerJam = 765,
    TrimmerLifeAlmostOver = 766,
    TrimmerLifeOver = 767,
    TrimmerMemoryExhausted = 768,
    TrimmerMissing = 769,
    TrimmerMotorFailure = 770,
    TrimmerNearLimit = 771,
    TrimmerOffline = 772,
    TrimmerOpened = 773,
    TrimmerOverTemperature = 774,
    TrimmerPowerSaver = 775,
    TrimmerRecoverableFailure = 776,
    TrimmerRecoverableStorage = 777,
    TrimmerRemoved = 778,
    TrimmerResourceAdded = 779,
    TrimmerResourceRemoved = 780,
    TrimmerThermistorFailure = 781,
    TrimmerTimingFailure = 782,
    TrimmerTurnedOff = 783,
    TrimmerTurnedOn = 784,
    TrimmerUnderTemperature = 785,
    TrimmerUnrecoverableFailure = 786,
    TrimmerUnrecoverableStorageError = 787,
    TrimmerWarmingUp = 788,
    Unknown = 789,
    WrapperAdded = 790,
    WrapperAlmostEmpty = 791,
    WrapperAlmostFull = 792,
    WrapperAtLimit = 793,
    WrapperClosed = 794,
    WrapperConfigurationChange = 795,
    WrapperCoverClosed = 796,
    WrapperCoverOpen = 797,
    WrapperEmpty = 798,
    WrapperFull = 799,
    WrapperInterlockClosed = 800,
    WrapperInterlockOpen = 801,
    WrapperJam = 802,
    WrapperLifeAlmostOver = 803,
    WrapperLifeOver = 804,
    WrapperMemoryExhausted = 805,
    WrapperMissing = 806,
    WrapperMotorFailure = 807,
    WrapperNearLimit = 808,
    WrapperOffline = 809,
    WrapperOpened = 810,
    WrapperOverTemperature = 811,
    WrapperPowerSaver = 812,
    WrapperRecoverableFailure = 813,
    WrapperRecoverableStorage = 814,
    WrapperRemoved = 815,
    WrapperResourceAdded = 816,
    WrapperResourceRemoved = 817,
    WrapperThermistorFailure = 818,
    WrapperTimingFailure = 819,
    WrapperTurnedOff = 820,
    WrapperTurnedOn = 821,
    WrapperUnderTemperature = 822,
    WrapperUnrecoverableFailure = 823,
    WrapperUnrecoverableStorageError = 824,
    WrapperWarmingUp = 825,
}

export enum PrinterProcessingState {
    Unknown = 0,
    Idle = 1,
    Processing = 2,
    Stopped = 3,
    UnknownFutureValue = 4,
}

export class PrinterShareViewpoint implements IPrinterShareViewpoint {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Date and time when the printer was last used by the signed-in user. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    lastUsedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IPrinterShareViewpoint) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.lastUsedDateTime = _data["lastUsedDateTime"] ? new Date(_data["lastUsedDateTime"].toString()) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): PrinterShareViewpoint {
        data = typeof data === 'object' ? data : {};
        let result = new PrinterShareViewpoint();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["lastUsedDateTime"] = this.lastUsedDateTime ? this.lastUsedDateTime.toISOString() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IPrinterShareViewpoint {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Date and time when the printer was last used by the signed-in user. The timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    lastUsedDateTime?: Date | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class ProvisionedPlan implements IProvisionedPlan {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value. */
    capabilityStatus?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant. */
    provisioningStatus?: string | undefined;
    /** The name of the service; for example, 'AccessControlS2S'. */
    service?: string | undefined;

    constructor(data?: IProvisionedPlan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.capabilityStatus = _data["capabilityStatus"];
            this.odataType = _data["odataType"];
            this.provisioningStatus = _data["provisioningStatus"];
            this.service = _data["service"];
        }
    }

    static fromJS(data: any): ProvisionedPlan {
        data = typeof data === 'object' ? data : {};
        let result = new ProvisionedPlan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["capabilityStatus"] = this.capabilityStatus;
        data["odataType"] = this.odataType;
        data["provisioningStatus"] = this.provisioningStatus;
        data["service"] = this.service;
        return data;
    }
}

export interface IProvisionedPlan {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Condition of the capability assignment. The possible values are Enabled, Warning, Suspended, Deleted, LockedOut. See a detailed description of each value. */
    capabilityStatus?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The possible values are:Success - Service is fully provisioned.Disabled - Service is disabled.Error - The service plan isn't provisioned and is in an error state.PendingInput - The service isn't provisioned and is awaiting service confirmation.PendingActivation - The service is provisioned but requires explicit activation by an administrator (for example, Intune_O365 service plan)PendingProvisioning - Microsoft has added a new service to the product SKU and it isn't activated in the tenant. */
    provisioningStatus?: string | undefined;
    /** The name of the service; for example, 'AccessControlS2S'. */
    service?: string | undefined;
}

export class ScopedRoleMembership extends Entity implements IScopedRoleMembership {
    /** Unique identifier for the administrative unit that the directory role is scoped to */
    administrativeUnitId?: string | undefined;
    /** Unique identifier for the directory role that the member is in. */
    roleId?: string | undefined;
    /** The roleMemberInfo property */
    roleMemberInfo?: Identity | undefined;

    constructor(data?: IScopedRoleMembership) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.administrativeUnitId = _data["administrativeUnitId"];
            this.roleId = _data["roleId"];
            this.roleMemberInfo = _data["roleMemberInfo"] ? Identity.fromJS(_data["roleMemberInfo"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ScopedRoleMembership {
        data = typeof data === 'object' ? data : {};
        let result = new ScopedRoleMembership();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["administrativeUnitId"] = this.administrativeUnitId;
        data["roleId"] = this.roleId;
        data["roleMemberInfo"] = this.roleMemberInfo ? this.roleMemberInfo.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IScopedRoleMembership extends IEntity {
    /** Unique identifier for the administrative unit that the directory role is scoped to */
    administrativeUnitId?: string | undefined;
    /** Unique identifier for the directory role that the member is in. */
    roleId?: string | undefined;
    /** The roleMemberInfo property */
    roleMemberInfo?: Identity | undefined;
}

export class UserSettings extends Entity implements IUserSettings {
    /** Reflects the organization level setting controlling delegate access to the trending API. When set to true, the organization doesn't have access to Office Delve. The relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected for the whole organization. This setting is read-only and can only be changed by administrators in the SharePoint admin center. */
    contributionToContentDiscoveryAsOrganizationDisabled?: boolean | undefined;
    /** When set to true, the delegate access to the user's trending API is disabled. When set to true, documents in the user's Office Delve are disabled. When set to true, the relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected. Users can control this setting in Office Delve. */
    contributionToContentDiscoveryDisabled?: boolean | undefined;
    /** The user's settings for the visibility of meeting hour insights, and insights derived between a user and other items in Microsoft 365, such as documents or sites. Get userInsightsSettings through this navigation property. */
    itemInsights?: UserInsightsSettings | undefined;
    /** The shiftPreferences property */
    shiftPreferences?: ShiftPreferences | undefined;
    /** The storage property */
    storage?: UserStorage | undefined;
    /** The windows property */
    windows?: WindowsSetting[] | undefined;

    constructor(data?: IUserSettings) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.contributionToContentDiscoveryAsOrganizationDisabled = _data["contributionToContentDiscoveryAsOrganizationDisabled"];
            this.contributionToContentDiscoveryDisabled = _data["contributionToContentDiscoveryDisabled"];
            this.itemInsights = _data["itemInsights"] ? UserInsightsSettings.fromJS(_data["itemInsights"]) : <any>undefined;
            this.shiftPreferences = _data["shiftPreferences"] ? ShiftPreferences.fromJS(_data["shiftPreferences"]) : <any>undefined;
            this.storage = _data["storage"] ? UserStorage.fromJS(_data["storage"]) : <any>undefined;
            if (Array.isArray(_data["windows"])) {
                this.windows = [] as any;
                for (let item of _data["windows"])
                    this.windows!.push(WindowsSetting.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): UserSettings {
        data = typeof data === 'object' ? data : {};
        let result = new UserSettings();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contributionToContentDiscoveryAsOrganizationDisabled"] = this.contributionToContentDiscoveryAsOrganizationDisabled;
        data["contributionToContentDiscoveryDisabled"] = this.contributionToContentDiscoveryDisabled;
        data["itemInsights"] = this.itemInsights ? this.itemInsights.toJSON() : <any>undefined;
        data["shiftPreferences"] = this.shiftPreferences ? this.shiftPreferences.toJSON() : <any>undefined;
        data["storage"] = this.storage ? this.storage.toJSON() : <any>undefined;
        if (Array.isArray(this.windows)) {
            data["windows"] = [];
            for (let item of this.windows)
                data["windows"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IUserSettings extends IEntity {
    /** Reflects the organization level setting controlling delegate access to the trending API. When set to true, the organization doesn't have access to Office Delve. The relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected for the whole organization. This setting is read-only and can only be changed by administrators in the SharePoint admin center. */
    contributionToContentDiscoveryAsOrganizationDisabled?: boolean | undefined;
    /** When set to true, the delegate access to the user's trending API is disabled. When set to true, documents in the user's Office Delve are disabled. When set to true, the relevancy of the content displayed in Microsoft 365, for example in Suggested sites in SharePoint Home and the Discover view in OneDrive for work or school is affected. Users can control this setting in Office Delve. */
    contributionToContentDiscoveryDisabled?: boolean | undefined;
    /** The user's settings for the visibility of meeting hour insights, and insights derived between a user and other items in Microsoft 365, such as documents or sites. Get userInsightsSettings through this navigation property. */
    itemInsights?: UserInsightsSettings | undefined;
    /** The shiftPreferences property */
    shiftPreferences?: ShiftPreferences | undefined;
    /** The storage property */
    storage?: UserStorage | undefined;
    /** The windows property */
    windows?: WindowsSetting[] | undefined;
}

export class UserInsightsSettings extends Entity implements IUserInsightsSettings {
    /** True if the user's itemInsights and meeting hours insights are enabled; false if the user's itemInsights and meeting hours insights are disabled. The default value is true. Optional. */
    isEnabled?: boolean | undefined;

    constructor(data?: IUserInsightsSettings) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isEnabled = _data["isEnabled"];
        }
    }

    static override fromJS(data: any): UserInsightsSettings {
        data = typeof data === 'object' ? data : {};
        let result = new UserInsightsSettings();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isEnabled"] = this.isEnabled;
        super.toJSON(data);
        return data;
    }
}

export interface IUserInsightsSettings extends IEntity {
    /** True if the user's itemInsights and meeting hours insights are enabled; false if the user's itemInsights and meeting hours insights are disabled. The default value is true. Optional. */
    isEnabled?: boolean | undefined;
}

export class ShiftPreferences extends ChangeTrackedEntity implements IShiftPreferences {
    /** Availability of the user to be scheduled for work and its recurrence pattern. */
    availability?: ShiftAvailability[] | undefined;

    constructor(data?: IShiftPreferences) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["availability"])) {
                this.availability = [] as any;
                for (let item of _data["availability"])
                    this.availability!.push(ShiftAvailability.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ShiftPreferences {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftPreferences();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.availability)) {
            data["availability"] = [];
            for (let item of this.availability)
                data["availability"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IShiftPreferences extends IChangeTrackedEntity {
    /** Availability of the user to be scheduled for work and its recurrence pattern. */
    availability?: ShiftAvailability[] | undefined;
}

export class ShiftAvailability implements IShiftAvailability {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the pattern for recurrence */
    recurrence?: PatternedRecurrence | undefined;
    /** The time slot(s) preferred by the user. */
    timeSlots?: TimeRange[] | undefined;
    /** Specifies the time zone for the indicated time. */
    timeZone?: string | undefined;

    constructor(data?: IShiftAvailability) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.recurrence = _data["recurrence"] ? PatternedRecurrence.fromJS(_data["recurrence"]) : <any>undefined;
            if (Array.isArray(_data["timeSlots"])) {
                this.timeSlots = [] as any;
                for (let item of _data["timeSlots"])
                    this.timeSlots!.push(TimeRange.fromJS(item));
            }
            this.timeZone = _data["timeZone"];
        }
    }

    static fromJS(data: any): ShiftAvailability {
        data = typeof data === 'object' ? data : {};
        let result = new ShiftAvailability();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["recurrence"] = this.recurrence ? this.recurrence.toJSON() : <any>undefined;
        if (Array.isArray(this.timeSlots)) {
            data["timeSlots"] = [];
            for (let item of this.timeSlots)
                data["timeSlots"].push(item.toJSON());
        }
        data["timeZone"] = this.timeZone;
        return data;
    }
}

export interface IShiftAvailability {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Specifies the pattern for recurrence */
    recurrence?: PatternedRecurrence | undefined;
    /** The time slot(s) preferred by the user. */
    timeSlots?: TimeRange[] | undefined;
    /** Specifies the time zone for the indicated time. */
    timeZone?: string | undefined;
}

export class TimeRange implements ITimeRange {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** End time for the time range. */
    endTime?: Time | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Start time for the time range. */
    startTime?: Time | undefined;

    constructor(data?: ITimeRange) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.endTime = _data["endTime"] ? Time.fromJS(_data["endTime"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.startTime = _data["startTime"] ? Time.fromJS(_data["startTime"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TimeRange {
        data = typeof data === 'object' ? data : {};
        let result = new TimeRange();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["startTime"] = this.startTime ? this.startTime.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITimeRange {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** End time for the time range. */
    endTime?: Time | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Start time for the time range. */
    startTime?: Time | undefined;
}

export class UserStorage extends Entity implements IUserStorage {
    /** The quota property */
    quota?: UnifiedStorageQuota | undefined;

    constructor(data?: IUserStorage) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.quota = _data["quota"] ? UnifiedStorageQuota.fromJS(_data["quota"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UserStorage {
        data = typeof data === 'object' ? data : {};
        let result = new UserStorage();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["quota"] = this.quota ? this.quota.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUserStorage extends IEntity {
    /** The quota property */
    quota?: UnifiedStorageQuota | undefined;
}

export class UnifiedStorageQuota extends Entity implements IUnifiedStorageQuota {
    /** The deleted property */
    deleted?: number | undefined;
    /** The manageWebUrl property */
    manageWebUrl?: string | undefined;
    /** The remaining property */
    remaining?: number | undefined;
    /** The services property */
    services?: ServiceStorageQuotaBreakdown[] | undefined;
    /** The state property */
    state?: string | undefined;
    /** The total property */
    total?: number | undefined;
    /** The used property */
    used?: number | undefined;

    constructor(data?: IUnifiedStorageQuota) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deleted = _data["deleted"];
            this.manageWebUrl = _data["manageWebUrl"];
            this.remaining = _data["remaining"];
            if (Array.isArray(_data["services"])) {
                this.services = [] as any;
                for (let item of _data["services"])
                    this.services!.push(ServiceStorageQuotaBreakdown.fromJS(item));
            }
            this.state = _data["state"];
            this.total = _data["total"];
            this.used = _data["used"];
        }
    }

    static override fromJS(data: any): UnifiedStorageQuota {
        data = typeof data === 'object' ? data : {};
        let result = new UnifiedStorageQuota();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deleted"] = this.deleted;
        data["manageWebUrl"] = this.manageWebUrl;
        data["remaining"] = this.remaining;
        if (Array.isArray(this.services)) {
            data["services"] = [];
            for (let item of this.services)
                data["services"].push(item.toJSON());
        }
        data["state"] = this.state;
        data["total"] = this.total;
        data["used"] = this.used;
        super.toJSON(data);
        return data;
    }
}

export interface IUnifiedStorageQuota extends IEntity {
    /** The deleted property */
    deleted?: number | undefined;
    /** The manageWebUrl property */
    manageWebUrl?: string | undefined;
    /** The remaining property */
    remaining?: number | undefined;
    /** The services property */
    services?: ServiceStorageQuotaBreakdown[] | undefined;
    /** The state property */
    state?: string | undefined;
    /** The total property */
    total?: number | undefined;
    /** The used property */
    used?: number | undefined;
}

export class StorageQuotaBreakdown extends Entity implements IStorageQuotaBreakdown {
    /** The displayName property */
    displayName?: string | undefined;
    /** The manageWebUrl property */
    manageWebUrl?: string | undefined;
    /** The used property */
    used?: number | undefined;

    constructor(data?: IStorageQuotaBreakdown) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            this.manageWebUrl = _data["manageWebUrl"];
            this.used = _data["used"];
        }
    }

    static override fromJS(data: any): StorageQuotaBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new StorageQuotaBreakdown();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["manageWebUrl"] = this.manageWebUrl;
        data["used"] = this.used;
        super.toJSON(data);
        return data;
    }
}

export interface IStorageQuotaBreakdown extends IEntity {
    /** The displayName property */
    displayName?: string | undefined;
    /** The manageWebUrl property */
    manageWebUrl?: string | undefined;
    /** The used property */
    used?: number | undefined;
}

export class ServiceStorageQuotaBreakdown extends StorageQuotaBreakdown implements IServiceStorageQuotaBreakdown {

    constructor(data?: IServiceStorageQuotaBreakdown) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ServiceStorageQuotaBreakdown {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceStorageQuotaBreakdown();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IServiceStorageQuotaBreakdown extends IStorageQuotaBreakdown {
}

export class WindowsSetting extends Entity implements IWindowsSetting {
    /** A collection of setting values for a given windowsSetting. */
    instances?: WindowsSettingInstance[] | undefined;
    /** The type of setting payloads contained in the instances navigation property. */
    payloadType?: string | undefined;
    /** The settingType property */
    settingType?: WindowsSettingType | undefined;
    /** A unique identifier for the device the setting might belong to if it is of the settingType backup. */
    windowsDeviceId?: string | undefined;

    constructor(data?: IWindowsSetting) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["instances"])) {
                this.instances = [] as any;
                for (let item of _data["instances"])
                    this.instances!.push(WindowsSettingInstance.fromJS(item));
            }
            this.payloadType = _data["payloadType"];
            this.settingType = _data["settingType"];
            this.windowsDeviceId = _data["windowsDeviceId"];
        }
    }

    static override fromJS(data: any): WindowsSetting {
        data = typeof data === 'object' ? data : {};
        let result = new WindowsSetting();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.instances)) {
            data["instances"] = [];
            for (let item of this.instances)
                data["instances"].push(item.toJSON());
        }
        data["payloadType"] = this.payloadType;
        data["settingType"] = this.settingType;
        data["windowsDeviceId"] = this.windowsDeviceId;
        super.toJSON(data);
        return data;
    }
}

export interface IWindowsSetting extends IEntity {
    /** A collection of setting values for a given windowsSetting. */
    instances?: WindowsSettingInstance[] | undefined;
    /** The type of setting payloads contained in the instances navigation property. */
    payloadType?: string | undefined;
    /** The settingType property */
    settingType?: WindowsSettingType | undefined;
    /** A unique identifier for the device the setting might belong to if it is of the settingType backup. */
    windowsDeviceId?: string | undefined;
}

export class WindowsSettingInstance extends Entity implements IWindowsSettingInstance {
    /** Set by the server. Represents the dateTime in UTC when the object was created on the server. */
    createdDateTime?: Date | undefined;
    /** Set by the server. The object expires at the specified dateTime in UTC, making it unavailable after that time. */
    expirationDateTime?: Date | undefined;
    /** Set by the server if not provided in the request from the Windows client device. Refers to the user's Windows device that modified the object at the specified dateTime in UTC. */
    lastModifiedDateTime?: Date | undefined;
    /** Base64-encoded JSON setting value. */
    payload?: string | undefined;

    constructor(data?: IWindowsSettingInstance) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.payload = _data["payload"];
        }
    }

    static override fromJS(data: any): WindowsSettingInstance {
        data = typeof data === 'object' ? data : {};
        let result = new WindowsSettingInstance();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["payload"] = this.payload;
        super.toJSON(data);
        return data;
    }
}

export interface IWindowsSettingInstance extends IEntity {
    /** Set by the server. Represents the dateTime in UTC when the object was created on the server. */
    createdDateTime?: Date | undefined;
    /** Set by the server. The object expires at the specified dateTime in UTC, making it unavailable after that time. */
    expirationDateTime?: Date | undefined;
    /** Set by the server if not provided in the request from the Windows client device. Refers to the user's Windows device that modified the object at the specified dateTime in UTC. */
    lastModifiedDateTime?: Date | undefined;
    /** Base64-encoded JSON setting value. */
    payload?: string | undefined;
}

export enum WindowsSettingType {
    Roaming = 0,
    Backup = 1,
    UnknownFutureValue = 2,
}

export class SignInActivity implements ISignInActivity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The last non-interactive sign-in date for a specific user. You can use this field to calculate the last time a client attempted (either successfully or unsuccessfully) to sign in to the directory on behalf of a user. Because some users may use clients to access tenant resources rather than signing into your tenant directly, you can use the non-interactive sign-in date to along with lastSignInDateTime to identify inactive users. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Microsoft Entra ID maintains non-interactive sign-ins going back to May 2020. For more information about using the value of this property, see Manage inactive user accounts in Microsoft Entra ID. */
    lastNonInteractiveSignInDateTime?: Date | undefined;
    /** Request identifier of the last non-interactive sign-in performed by this user. */
    lastNonInteractiveSignInRequestId?: string | undefined;
    /** The last interactive sign-in date and time for a specific user. You can use this field to calculate the last time a user attempted (either successfully or unsuccessfully) to sign in to the directory with an interactive authentication method. This field can be used to build reports, such as inactive users. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Microsoft Entra ID maintains interactive sign-ins going back to April 2020. For more information about using the value of this property, see Manage inactive user accounts in Microsoft Entra ID. */
    lastSignInDateTime?: Date | undefined;
    /** Request identifier of the last interactive sign-in performed by this user. */
    lastSignInRequestId?: string | undefined;
    /** The date and time of the user's most recent successful sign-in activity. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    lastSuccessfulSignInDateTime?: Date | undefined;
    /** The request ID of the last successful sign-in. */
    lastSuccessfulSignInRequestId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ISignInActivity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.lastNonInteractiveSignInDateTime = _data["lastNonInteractiveSignInDateTime"] ? new Date(_data["lastNonInteractiveSignInDateTime"].toString()) : <any>undefined;
            this.lastNonInteractiveSignInRequestId = _data["lastNonInteractiveSignInRequestId"];
            this.lastSignInDateTime = _data["lastSignInDateTime"] ? new Date(_data["lastSignInDateTime"].toString()) : <any>undefined;
            this.lastSignInRequestId = _data["lastSignInRequestId"];
            this.lastSuccessfulSignInDateTime = _data["lastSuccessfulSignInDateTime"] ? new Date(_data["lastSuccessfulSignInDateTime"].toString()) : <any>undefined;
            this.lastSuccessfulSignInRequestId = _data["lastSuccessfulSignInRequestId"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): SignInActivity {
        data = typeof data === 'object' ? data : {};
        let result = new SignInActivity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["lastNonInteractiveSignInDateTime"] = this.lastNonInteractiveSignInDateTime ? this.lastNonInteractiveSignInDateTime.toISOString() : <any>undefined;
        data["lastNonInteractiveSignInRequestId"] = this.lastNonInteractiveSignInRequestId;
        data["lastSignInDateTime"] = this.lastSignInDateTime ? this.lastSignInDateTime.toISOString() : <any>undefined;
        data["lastSignInRequestId"] = this.lastSignInRequestId;
        data["lastSuccessfulSignInDateTime"] = this.lastSuccessfulSignInDateTime ? this.lastSuccessfulSignInDateTime.toISOString() : <any>undefined;
        data["lastSuccessfulSignInRequestId"] = this.lastSuccessfulSignInRequestId;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ISignInActivity {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The last non-interactive sign-in date for a specific user. You can use this field to calculate the last time a client attempted (either successfully or unsuccessfully) to sign in to the directory on behalf of a user. Because some users may use clients to access tenant resources rather than signing into your tenant directly, you can use the non-interactive sign-in date to along with lastSignInDateTime to identify inactive users. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Microsoft Entra ID maintains non-interactive sign-ins going back to May 2020. For more information about using the value of this property, see Manage inactive user accounts in Microsoft Entra ID. */
    lastNonInteractiveSignInDateTime?: Date | undefined;
    /** Request identifier of the last non-interactive sign-in performed by this user. */
    lastNonInteractiveSignInRequestId?: string | undefined;
    /** The last interactive sign-in date and time for a specific user. You can use this field to calculate the last time a user attempted (either successfully or unsuccessfully) to sign in to the directory with an interactive authentication method. This field can be used to build reports, such as inactive users. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Microsoft Entra ID maintains interactive sign-ins going back to April 2020. For more information about using the value of this property, see Manage inactive user accounts in Microsoft Entra ID. */
    lastSignInDateTime?: Date | undefined;
    /** Request identifier of the last interactive sign-in performed by this user. */
    lastSignInRequestId?: string | undefined;
    /** The date and time of the user's most recent successful sign-in activity. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    lastSuccessfulSignInDateTime?: Date | undefined;
    /** The request ID of the last successful sign-in. */
    lastSuccessfulSignInRequestId?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class UserSolutionRoot extends Entity implements IUserSolutionRoot {
    /** The working time schedule entity associated with the solution. */
    workingTimeSchedule?: WorkingTimeSchedule | undefined;

    constructor(data?: IUserSolutionRoot) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.workingTimeSchedule = _data["workingTimeSchedule"] ? WorkingTimeSchedule.fromJS(_data["workingTimeSchedule"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UserSolutionRoot {
        data = typeof data === 'object' ? data : {};
        let result = new UserSolutionRoot();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["workingTimeSchedule"] = this.workingTimeSchedule ? this.workingTimeSchedule.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUserSolutionRoot extends IEntity {
    /** The working time schedule entity associated with the solution. */
    workingTimeSchedule?: WorkingTimeSchedule | undefined;
}

export class WorkingTimeSchedule extends Entity implements IWorkingTimeSchedule {

    constructor(data?: IWorkingTimeSchedule) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): WorkingTimeSchedule {
        data = typeof data === 'object' ? data : {};
        let result = new WorkingTimeSchedule();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IWorkingTimeSchedule extends IEntity {
}

export class UserTeamwork extends Entity implements IUserTeamwork {
    /** The list of associatedTeamInfo objects that a user is associated with. */
    associatedTeams?: AssociatedTeamInfo[] | undefined;
    /** The apps installed in the personal scope of this user. */
    installedApps?: UserScopeTeamsAppInstallation[] | undefined;
    /** Represents the location that a user selected in Microsoft Teams and doesn't follow the Office's locale setting. A user’s locale is represented by their preferred language and country or region. For example, en-us. The language component follows two-letter codes as defined in ISO 639-1, and the country component follows two-letter codes as defined in ISO 3166-1 alpha-2. */
    locale?: string | undefined;
    /** Represents the region of the organization or the user. For users with multigeo licenses, the property contains the user's region (if available). For users without multigeo licenses, the property contains the organization's region.The region value can be any region supported by the Teams payload. The possible values are: Americas, Europe and MiddleEast, Asia Pacific, UAE, Australia, Brazil, Canada, Switzerland, Germany, France, India, Japan, South Korea, Norway, Singapore, United Kingdom, South Africa, Sweden, Qatar, Poland, Italy, Israel, Spain, Mexico, USGov Community Cloud, USGov Community Cloud High, USGov Department of Defense, and China. */
    region?: string | undefined;

    constructor(data?: IUserTeamwork) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["associatedTeams"])) {
                this.associatedTeams = [] as any;
                for (let item of _data["associatedTeams"])
                    this.associatedTeams!.push(AssociatedTeamInfo.fromJS(item));
            }
            if (Array.isArray(_data["installedApps"])) {
                this.installedApps = [] as any;
                for (let item of _data["installedApps"])
                    this.installedApps!.push(UserScopeTeamsAppInstallation.fromJS(item));
            }
            this.locale = _data["locale"];
            this.region = _data["region"];
        }
    }

    static override fromJS(data: any): UserTeamwork {
        data = typeof data === 'object' ? data : {};
        let result = new UserTeamwork();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.associatedTeams)) {
            data["associatedTeams"] = [];
            for (let item of this.associatedTeams)
                data["associatedTeams"].push(item.toJSON());
        }
        if (Array.isArray(this.installedApps)) {
            data["installedApps"] = [];
            for (let item of this.installedApps)
                data["installedApps"].push(item.toJSON());
        }
        data["locale"] = this.locale;
        data["region"] = this.region;
        super.toJSON(data);
        return data;
    }
}

export interface IUserTeamwork extends IEntity {
    /** The list of associatedTeamInfo objects that a user is associated with. */
    associatedTeams?: AssociatedTeamInfo[] | undefined;
    /** The apps installed in the personal scope of this user. */
    installedApps?: UserScopeTeamsAppInstallation[] | undefined;
    /** Represents the location that a user selected in Microsoft Teams and doesn't follow the Office's locale setting. A user’s locale is represented by their preferred language and country or region. For example, en-us. The language component follows two-letter codes as defined in ISO 639-1, and the country component follows two-letter codes as defined in ISO 3166-1 alpha-2. */
    locale?: string | undefined;
    /** Represents the region of the organization or the user. For users with multigeo licenses, the property contains the user's region (if available). For users without multigeo licenses, the property contains the organization's region.The region value can be any region supported by the Teams payload. The possible values are: Americas, Europe and MiddleEast, Asia Pacific, UAE, Australia, Brazil, Canada, Switzerland, Germany, France, India, Japan, South Korea, Norway, Singapore, United Kingdom, South Africa, Sweden, Qatar, Poland, Italy, Israel, Spain, Mexico, USGov Community Cloud, USGov Community Cloud High, USGov Department of Defense, and China. */
    region?: string | undefined;
}

export class AssociatedTeamInfo extends TeamInfo implements IAssociatedTeamInfo {

    constructor(data?: IAssociatedTeamInfo) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): AssociatedTeamInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AssociatedTeamInfo();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IAssociatedTeamInfo extends ITeamInfo {
}

export class UserScopeTeamsAppInstallation extends TeamsAppInstallation implements IUserScopeTeamsAppInstallation {
    /** The chat between the user and Teams app. */
    chat?: Chat | undefined;

    constructor(data?: IUserScopeTeamsAppInstallation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.chat = _data["chat"] ? Chat.fromJS(_data["chat"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): UserScopeTeamsAppInstallation {
        data = typeof data === 'object' ? data : {};
        let result = new UserScopeTeamsAppInstallation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["chat"] = this.chat ? this.chat.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IUserScopeTeamsAppInstallation extends ITeamsAppInstallation {
    /** The chat between the user and Teams app. */
    chat?: Chat | undefined;
}

export class Todo extends Entity implements ITodo {
    /** The task lists in the users mailbox. */
    lists?: TodoTaskList[] | undefined;

    constructor(data?: ITodo) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["lists"])) {
                this.lists = [] as any;
                for (let item of _data["lists"])
                    this.lists!.push(TodoTaskList.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Todo {
        data = typeof data === 'object' ? data : {};
        let result = new Todo();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.lists)) {
            data["lists"] = [];
            for (let item of this.lists)
                data["lists"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface ITodo extends IEntity {
    /** The task lists in the users mailbox. */
    lists?: TodoTaskList[] | undefined;
}

export class TodoTaskList extends Entity implements ITodoTaskList {
    /** The name of the task list. */
    displayName?: string | undefined;
    /** The collection of open extensions defined for the task list. Nullable. */
    extensions?: Extension[] | undefined;
    /** True if the user is owner of the given task list. */
    isOwner?: boolean | undefined;
    /** True if the task list is shared with other users */
    isShared?: boolean | undefined;
    /** The tasks in this task list. Read-only. Nullable. */
    tasks?: TodoTask[] | undefined;
    /** The wellknownListName property */
    wellknownListName?: WellknownListName | undefined;

    constructor(data?: ITodoTaskList) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.displayName = _data["displayName"];
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            this.isOwner = _data["isOwner"];
            this.isShared = _data["isShared"];
            if (Array.isArray(_data["tasks"])) {
                this.tasks = [] as any;
                for (let item of _data["tasks"])
                    this.tasks!.push(TodoTask.fromJS(item));
            }
            this.wellknownListName = _data["wellknownListName"];
        }
    }

    static override fromJS(data: any): TodoTaskList {
        data = typeof data === 'object' ? data : {};
        let result = new TodoTaskList();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        data["isOwner"] = this.isOwner;
        data["isShared"] = this.isShared;
        if (Array.isArray(this.tasks)) {
            data["tasks"] = [];
            for (let item of this.tasks)
                data["tasks"].push(item.toJSON());
        }
        data["wellknownListName"] = this.wellknownListName;
        super.toJSON(data);
        return data;
    }
}

export interface ITodoTaskList extends IEntity {
    /** The name of the task list. */
    displayName?: string | undefined;
    /** The collection of open extensions defined for the task list. Nullable. */
    extensions?: Extension[] | undefined;
    /** True if the user is owner of the given task list. */
    isOwner?: boolean | undefined;
    /** True if the task list is shared with other users */
    isShared?: boolean | undefined;
    /** The tasks in this task list. Read-only. Nullable. */
    tasks?: TodoTask[] | undefined;
    /** The wellknownListName property */
    wellknownListName?: WellknownListName | undefined;
}

export class TodoTask extends Entity implements ITodoTask {
    /** A collection of file attachments for the task. */
    attachments?: AttachmentBase[] | undefined;
    /** The attachmentSessions property */
    attachmentSessions?: AttachmentSession[] | undefined;
    /** The task body that typically contains information about the task. */
    body?: ItemBody | undefined;
    /** The date and time when the task body was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'. */
    bodyLastModifiedDateTime?: Date | undefined;
    /** The categories associated with the task. Each category corresponds to the displayName property of an outlookCategory that the user has defined. */
    categories?: string[] | undefined;
    /** A collection of checklistItems linked to a task. */
    checklistItems?: ChecklistItem[] | undefined;
    /** The date and time in the specified time zone that the task was finished. */
    completedDateTime?: DateTimeTimeZone | undefined;
    /** The date and time when the task was created. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'. */
    createdDateTime?: Date | undefined;
    /** The date and time in the specified time zone that the task is to be finished. */
    dueDateTime?: DateTimeTimeZone | undefined;
    /** The collection of open extensions defined for the task. Nullable. */
    extensions?: Extension[] | undefined;
    /** Indicates whether the task has attachments. */
    hasAttachments?: boolean | undefined;
    /** The importance property */
    importance?: Importance | undefined;
    /** Set to true if an alert is set to remind the user of the task. */
    isReminderOn?: boolean | undefined;
    /** The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'. */
    lastModifiedDateTime?: Date | undefined;
    /** A collection of resources linked to the task. */
    linkedResources?: LinkedResource[] | undefined;
    /** The recurrence pattern for the task. */
    recurrence?: PatternedRecurrence | undefined;
    /** The date and time in the specified time zone for a reminder alert of the task to occur. */
    reminderDateTime?: DateTimeTimeZone | undefined;
    /** The date and time in the specified time zone at which the task is scheduled to start. */
    startDateTime?: DateTimeTimeZone | undefined;
    /** The status property */
    status?: TaskStatus | undefined;
    /** A brief description of the task. */
    title?: string | undefined;

    constructor(data?: ITodoTask) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["attachments"])) {
                this.attachments = [] as any;
                for (let item of _data["attachments"])
                    this.attachments!.push(AttachmentBase.fromJS(item));
            }
            if (Array.isArray(_data["attachmentSessions"])) {
                this.attachmentSessions = [] as any;
                for (let item of _data["attachmentSessions"])
                    this.attachmentSessions!.push(AttachmentSession.fromJS(item));
            }
            this.body = _data["body"] ? ItemBody.fromJS(_data["body"]) : <any>undefined;
            this.bodyLastModifiedDateTime = _data["bodyLastModifiedDateTime"] ? new Date(_data["bodyLastModifiedDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["categories"])) {
                this.categories = [] as any;
                for (let item of _data["categories"])
                    this.categories!.push(item);
            }
            if (Array.isArray(_data["checklistItems"])) {
                this.checklistItems = [] as any;
                for (let item of _data["checklistItems"])
                    this.checklistItems!.push(ChecklistItem.fromJS(item));
            }
            this.completedDateTime = _data["completedDateTime"] ? DateTimeTimeZone.fromJS(_data["completedDateTime"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.dueDateTime = _data["dueDateTime"] ? DateTimeTimeZone.fromJS(_data["dueDateTime"]) : <any>undefined;
            if (Array.isArray(_data["extensions"])) {
                this.extensions = [] as any;
                for (let item of _data["extensions"])
                    this.extensions!.push(Extension.fromJS(item));
            }
            this.hasAttachments = _data["hasAttachments"];
            this.importance = _data["importance"];
            this.isReminderOn = _data["isReminderOn"];
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["linkedResources"])) {
                this.linkedResources = [] as any;
                for (let item of _data["linkedResources"])
                    this.linkedResources!.push(LinkedResource.fromJS(item));
            }
            this.recurrence = _data["recurrence"] ? PatternedRecurrence.fromJS(_data["recurrence"]) : <any>undefined;
            this.reminderDateTime = _data["reminderDateTime"] ? DateTimeTimeZone.fromJS(_data["reminderDateTime"]) : <any>undefined;
            this.startDateTime = _data["startDateTime"] ? DateTimeTimeZone.fromJS(_data["startDateTime"]) : <any>undefined;
            this.status = _data["status"];
            this.title = _data["title"];
        }
    }

    static override fromJS(data: any): TodoTask {
        data = typeof data === 'object' ? data : {};
        let result = new TodoTask();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.attachments)) {
            data["attachments"] = [];
            for (let item of this.attachments)
                data["attachments"].push(item.toJSON());
        }
        if (Array.isArray(this.attachmentSessions)) {
            data["attachmentSessions"] = [];
            for (let item of this.attachmentSessions)
                data["attachmentSessions"].push(item.toJSON());
        }
        data["body"] = this.body ? this.body.toJSON() : <any>undefined;
        data["bodyLastModifiedDateTime"] = this.bodyLastModifiedDateTime ? this.bodyLastModifiedDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.categories)) {
            data["categories"] = [];
            for (let item of this.categories)
                data["categories"].push(item);
        }
        if (Array.isArray(this.checklistItems)) {
            data["checklistItems"] = [];
            for (let item of this.checklistItems)
                data["checklistItems"].push(item.toJSON());
        }
        data["completedDateTime"] = this.completedDateTime ? this.completedDateTime.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["dueDateTime"] = this.dueDateTime ? this.dueDateTime.toJSON() : <any>undefined;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item.toJSON());
        }
        data["hasAttachments"] = this.hasAttachments;
        data["importance"] = this.importance;
        data["isReminderOn"] = this.isReminderOn;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.linkedResources)) {
            data["linkedResources"] = [];
            for (let item of this.linkedResources)
                data["linkedResources"].push(item.toJSON());
        }
        data["recurrence"] = this.recurrence ? this.recurrence.toJSON() : <any>undefined;
        data["reminderDateTime"] = this.reminderDateTime ? this.reminderDateTime.toJSON() : <any>undefined;
        data["startDateTime"] = this.startDateTime ? this.startDateTime.toJSON() : <any>undefined;
        data["status"] = this.status;
        data["title"] = this.title;
        super.toJSON(data);
        return data;
    }
}

export interface ITodoTask extends IEntity {
    /** A collection of file attachments for the task. */
    attachments?: AttachmentBase[] | undefined;
    /** The attachmentSessions property */
    attachmentSessions?: AttachmentSession[] | undefined;
    /** The task body that typically contains information about the task. */
    body?: ItemBody | undefined;
    /** The date and time when the task body was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'. */
    bodyLastModifiedDateTime?: Date | undefined;
    /** The categories associated with the task. Each category corresponds to the displayName property of an outlookCategory that the user has defined. */
    categories?: string[] | undefined;
    /** A collection of checklistItems linked to a task. */
    checklistItems?: ChecklistItem[] | undefined;
    /** The date and time in the specified time zone that the task was finished. */
    completedDateTime?: DateTimeTimeZone | undefined;
    /** The date and time when the task was created. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'. */
    createdDateTime?: Date | undefined;
    /** The date and time in the specified time zone that the task is to be finished. */
    dueDateTime?: DateTimeTimeZone | undefined;
    /** The collection of open extensions defined for the task. Nullable. */
    extensions?: Extension[] | undefined;
    /** Indicates whether the task has attachments. */
    hasAttachments?: boolean | undefined;
    /** The importance property */
    importance?: Importance | undefined;
    /** Set to true if an alert is set to remind the user of the task. */
    isReminderOn?: boolean | undefined;
    /** The date and time when the task was last modified. By default, it is in UTC. You can provide a custom time zone in the request header. The property value uses ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2020 would look like this: '2020-01-01T00:00:00Z'. */
    lastModifiedDateTime?: Date | undefined;
    /** A collection of resources linked to the task. */
    linkedResources?: LinkedResource[] | undefined;
    /** The recurrence pattern for the task. */
    recurrence?: PatternedRecurrence | undefined;
    /** The date and time in the specified time zone for a reminder alert of the task to occur. */
    reminderDateTime?: DateTimeTimeZone | undefined;
    /** The date and time in the specified time zone at which the task is scheduled to start. */
    startDateTime?: DateTimeTimeZone | undefined;
    /** The status property */
    status?: TaskStatus | undefined;
    /** A brief description of the task. */
    title?: string | undefined;
}

export class AttachmentBase extends Entity implements IAttachmentBase {
    /** The MIME type. */
    contentType?: string | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    lastModifiedDateTime?: Date | undefined;
    /** The display name of the attachment. This doesn't need to be the actual file name. */
    name?: string | undefined;
    /** The length of the attachment in bytes. */
    size?: number | undefined;

    constructor(data?: IAttachmentBase) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.contentType = _data["contentType"];
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.size = _data["size"];
        }
    }

    static override fromJS(data: any): AttachmentBase {
        data = typeof data === 'object' ? data : {};
        let result = new AttachmentBase();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentType"] = this.contentType;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["size"] = this.size;
        super.toJSON(data);
        return data;
    }
}

export interface IAttachmentBase extends IEntity {
    /** The MIME type. */
    contentType?: string | undefined;
    /** The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. */
    lastModifiedDateTime?: Date | undefined;
    /** The display name of the attachment. This doesn't need to be the actual file name. */
    name?: string | undefined;
    /** The length of the attachment in bytes. */
    size?: number | undefined;
}

export class AttachmentSession extends Entity implements IAttachmentSession {
    /** The content streams that are uploaded. */
    content?: string | undefined;
    /** The date and time in UTC when the upload session will expire. The complete file must be uploaded before this expiration time is reached. */
    expirationDateTime?: Date | undefined;
    /** Indicates a single value {start} that represents the location in the file where the next upload should begin. */
    nextExpectedRanges?: string[] | undefined;

    constructor(data?: IAttachmentSession) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["content"];
            this.expirationDateTime = _data["expirationDateTime"] ? new Date(_data["expirationDateTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["nextExpectedRanges"])) {
                this.nextExpectedRanges = [] as any;
                for (let item of _data["nextExpectedRanges"])
                    this.nextExpectedRanges!.push(item);
            }
        }
    }

    static override fromJS(data: any): AttachmentSession {
        data = typeof data === 'object' ? data : {};
        let result = new AttachmentSession();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["expirationDateTime"] = this.expirationDateTime ? this.expirationDateTime.toISOString() : <any>undefined;
        if (Array.isArray(this.nextExpectedRanges)) {
            data["nextExpectedRanges"] = [];
            for (let item of this.nextExpectedRanges)
                data["nextExpectedRanges"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IAttachmentSession extends IEntity {
    /** The content streams that are uploaded. */
    content?: string | undefined;
    /** The date and time in UTC when the upload session will expire. The complete file must be uploaded before this expiration time is reached. */
    expirationDateTime?: Date | undefined;
    /** Indicates a single value {start} that represents the location in the file where the next upload should begin. */
    nextExpectedRanges?: string[] | undefined;
}

export class ChecklistItem extends Entity implements IChecklistItem {
    /** The date and time when the checklistItem was finished. */
    checkedDateTime?: Date | undefined;
    /** The date and time when the checklistItem was created. */
    createdDateTime?: Date | undefined;
    /** Indicates the title of the checklistItem. */
    displayName?: string | undefined;
    /** State that indicates whether the item is checked off or not. */
    isChecked?: boolean | undefined;

    constructor(data?: IChecklistItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.checkedDateTime = _data["checkedDateTime"] ? new Date(_data["checkedDateTime"].toString()) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.displayName = _data["displayName"];
            this.isChecked = _data["isChecked"];
        }
    }

    static override fromJS(data: any): ChecklistItem {
        data = typeof data === 'object' ? data : {};
        let result = new ChecklistItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["checkedDateTime"] = this.checkedDateTime ? this.checkedDateTime.toISOString() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["displayName"] = this.displayName;
        data["isChecked"] = this.isChecked;
        super.toJSON(data);
        return data;
    }
}

export interface IChecklistItem extends IEntity {
    /** The date and time when the checklistItem was finished. */
    checkedDateTime?: Date | undefined;
    /** The date and time when the checklistItem was created. */
    createdDateTime?: Date | undefined;
    /** Indicates the title of the checklistItem. */
    displayName?: string | undefined;
    /** State that indicates whether the item is checked off or not. */
    isChecked?: boolean | undefined;
}

export class LinkedResource extends Entity implements ILinkedResource {
    /** The app name of the source that sends the linkedResource. */
    applicationName?: string | undefined;
    /** The title of the linkedResource. */
    displayName?: string | undefined;
    /** ID of the object that is associated with this task on the third-party/partner system. */
    externalId?: string | undefined;
    /** Deep link to the linkedResource. */
    webUrl?: string | undefined;

    constructor(data?: ILinkedResource) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.applicationName = _data["applicationName"];
            this.displayName = _data["displayName"];
            this.externalId = _data["externalId"];
            this.webUrl = _data["webUrl"];
        }
    }

    static override fromJS(data: any): LinkedResource {
        data = typeof data === 'object' ? data : {};
        let result = new LinkedResource();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["applicationName"] = this.applicationName;
        data["displayName"] = this.displayName;
        data["externalId"] = this.externalId;
        data["webUrl"] = this.webUrl;
        super.toJSON(data);
        return data;
    }
}

export interface ILinkedResource extends IEntity {
    /** The app name of the source that sends the linkedResource. */
    applicationName?: string | undefined;
    /** The title of the linkedResource. */
    displayName?: string | undefined;
    /** ID of the object that is associated with this task on the third-party/partner system. */
    externalId?: string | undefined;
    /** Deep link to the linkedResource. */
    webUrl?: string | undefined;
}

export enum TaskStatus {
    NotStarted = 0,
    InProgress = 1,
    Completed = 2,
    WaitingOnOthers = 3,
    Deferred = 4,
}

export enum WellknownListName {
    None = 0,
    DefaultList = 1,
    FlaggedEmails = 2,
    UnknownFutureValue = 3,
}

export class GeoCoordinates implements IGeoCoordinates {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Optional. The altitude (height), in feet,  above sea level for the item. Read-only. */
    altitude?: number | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional. The latitude, in decimal, for the item. Read-only. */
    latitude?: number | undefined;
    /** Optional. The longitude, in decimal, for the item. Read-only. */
    longitude?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IGeoCoordinates) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.altitude = _data["altitude"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): GeoCoordinates {
        data = typeof data === 'object' ? data : {};
        let result = new GeoCoordinates();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["altitude"] = this.altitude;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IGeoCoordinates {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Optional. The altitude (height), in feet,  above sea level for the item. Read-only. */
    altitude?: number | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Optional. The latitude, in decimal, for the item. Read-only. */
    latitude?: number | undefined;
    /** Optional. The longitude, in decimal, for the item. Read-only. */
    longitude?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Malware implements IMalware {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Contains the virus details for the malware facet. */
    description?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IMalware) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.description = _data["description"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): Malware {
        data = typeof data === 'object' ? data : {};
        let result = new Malware();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IMalware {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Contains the virus details for the malware facet. */
    description?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Package implements IPackage {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A string indicating the type of package. While oneNote is the only currently defined value, you should expect other package types to be returned and handle them accordingly. */
    type?: string | undefined;

    constructor(data?: IPackage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): Package {
        data = typeof data === 'object' ? data : {};
        let result = new Package();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["type"] = this.type;
        return data;
    }
}

export interface IPackage {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A string indicating the type of package. While oneNote is the only currently defined value, you should expect other package types to be returned and handle them accordingly. */
    type?: string | undefined;
}

export class PendingOperations implements IPendingOperations {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A property that indicates that an operation that might update the binary content of a file is pending completion. */
    pendingContentUpdate?: PendingContentUpdate | undefined;

    constructor(data?: IPendingOperations) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.pendingContentUpdate = _data["pendingContentUpdate"] ? PendingContentUpdate.fromJS(_data["pendingContentUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PendingOperations {
        data = typeof data === 'object' ? data : {};
        let result = new PendingOperations();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["pendingContentUpdate"] = this.pendingContentUpdate ? this.pendingContentUpdate.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPendingOperations {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A property that indicates that an operation that might update the binary content of a file is pending completion. */
    pendingContentUpdate?: PendingContentUpdate | undefined;
}

export class PendingContentUpdate implements IPendingContentUpdate {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Date and time the pending binary operation was queued in UTC time. Read-only. */
    queuedDateTime?: Date | undefined;

    constructor(data?: IPendingContentUpdate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.queuedDateTime = _data["queuedDateTime"] ? new Date(_data["queuedDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PendingContentUpdate {
        data = typeof data === 'object' ? data : {};
        let result = new PendingContentUpdate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["queuedDateTime"] = this.queuedDateTime ? this.queuedDateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPendingContentUpdate {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Date and time the pending binary operation was queued in UTC time. Read-only. */
    queuedDateTime?: Date | undefined;
}

export class Photo implements IPhoto {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Camera manufacturer. Read-only. */
    cameraMake?: string | undefined;
    /** Camera model. Read-only. */
    cameraModel?: string | undefined;
    /** The denominator for the exposure time fraction from the camera. Read-only. */
    exposureDenominator?: number | undefined;
    /** The numerator for the exposure time fraction from the camera. Read-only. */
    exposureNumerator?: number | undefined;
    /** The F-stop value from the camera. Read-only. */
    fNumber?: number | undefined;
    /** The focal length from the camera. Read-only. */
    focalLength?: number | undefined;
    /** The ISO value from the camera. Read-only. */
    iso?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The orientation value from the camera. Writable on OneDrive Personal. */
    orientation?: number | undefined;
    /** Represents the date and time the photo was taken. Read-only. */
    takenDateTime?: Date | undefined;

    constructor(data?: IPhoto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.cameraMake = _data["cameraMake"];
            this.cameraModel = _data["cameraModel"];
            this.exposureDenominator = _data["exposureDenominator"];
            this.exposureNumerator = _data["exposureNumerator"];
            this.fNumber = _data["fNumber"];
            this.focalLength = _data["focalLength"];
            this.iso = _data["iso"];
            this.odataType = _data["odataType"];
            this.orientation = _data["orientation"];
            this.takenDateTime = _data["takenDateTime"] ? new Date(_data["takenDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Photo {
        data = typeof data === 'object' ? data : {};
        let result = new Photo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["cameraMake"] = this.cameraMake;
        data["cameraModel"] = this.cameraModel;
        data["exposureDenominator"] = this.exposureDenominator;
        data["exposureNumerator"] = this.exposureNumerator;
        data["fNumber"] = this.fNumber;
        data["focalLength"] = this.focalLength;
        data["iso"] = this.iso;
        data["odataType"] = this.odataType;
        data["orientation"] = this.orientation;
        data["takenDateTime"] = this.takenDateTime ? this.takenDateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPhoto {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Camera manufacturer. Read-only. */
    cameraMake?: string | undefined;
    /** Camera model. Read-only. */
    cameraModel?: string | undefined;
    /** The denominator for the exposure time fraction from the camera. Read-only. */
    exposureDenominator?: number | undefined;
    /** The numerator for the exposure time fraction from the camera. Read-only. */
    exposureNumerator?: number | undefined;
    /** The F-stop value from the camera. Read-only. */
    fNumber?: number | undefined;
    /** The focal length from the camera. Read-only. */
    focalLength?: number | undefined;
    /** The ISO value from the camera. Read-only. */
    iso?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The orientation value from the camera. Writable on OneDrive Personal. */
    orientation?: number | undefined;
    /** Represents the date and time the photo was taken. Read-only. */
    takenDateTime?: Date | undefined;
}

export class RemoteItem implements IRemoteItem {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Identity of the user, device, and application which created the item. Read-only. */
    createdBy?: IdentitySet | undefined;
    /** Date and time of item creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Indicates that the remote item is a file. Read-only. */
    file?: FileObject | undefined;
    /** Information about the remote item from the local file system. Read-only. */
    fileSystemInfo?: FileSystemInfo | undefined;
    /** Indicates that the remote item is a folder. Read-only. */
    folder?: Folder | undefined;
    /** Unique identifier for the remote item in its drive. Read-only. */
    id?: string | undefined;
    /** Image metadata, if the item is an image. Read-only. */
    image?: Image | undefined;
    /** Identity of the user, device, and application which last modified the item. Read-only. */
    lastModifiedBy?: IdentitySet | undefined;
    /** Date and time the item was last modified. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** Optional. Filename of the remote item. Read-only. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only. */
    package?: Package | undefined;
    /** Properties of the parent of the remote item. Read-only. */
    parentReference?: ItemReference | undefined;
    /** Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only. */
    shared?: Shared | undefined;
    /** Provides interop between items in OneDrive for Business and SharePoint with the full set of item identifiers. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** Size of the remote item. Read-only. */
    size?: number | undefined;
    /** If the current item is also available as a special folder, this facet is returned. Read-only. */
    specialFolder?: SpecialFolder | undefined;
    /** Video metadata, if the item is a video. Read-only. */
    video?: Video | undefined;
    /** DAV compatible URL for the item. */
    webDavUrl?: string | undefined;
    /** URL that displays the resource in the browser. Read-only. */
    webUrl?: string | undefined;

    constructor(data?: IRemoteItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.createdBy = _data["createdBy"] ? IdentitySet.fromJS(_data["createdBy"]) : <any>undefined;
            this.createdDateTime = _data["createdDateTime"] ? new Date(_data["createdDateTime"].toString()) : <any>undefined;
            this.file = _data["file"] ? FileObject.fromJS(_data["file"]) : <any>undefined;
            this.fileSystemInfo = _data["fileSystemInfo"] ? FileSystemInfo.fromJS(_data["fileSystemInfo"]) : <any>undefined;
            this.folder = _data["folder"] ? Folder.fromJS(_data["folder"]) : <any>undefined;
            this.id = _data["id"];
            this.image = _data["image"] ? Image.fromJS(_data["image"]) : <any>undefined;
            this.lastModifiedBy = _data["lastModifiedBy"] ? IdentitySet.fromJS(_data["lastModifiedBy"]) : <any>undefined;
            this.lastModifiedDateTime = _data["lastModifiedDateTime"] ? new Date(_data["lastModifiedDateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.odataType = _data["odataType"];
            this.package = _data["package"] ? Package.fromJS(_data["package"]) : <any>undefined;
            this.parentReference = _data["parentReference"] ? ItemReference.fromJS(_data["parentReference"]) : <any>undefined;
            this.shared = _data["shared"] ? Shared.fromJS(_data["shared"]) : <any>undefined;
            this.sharepointIds = _data["sharepointIds"] ? SharepointIds.fromJS(_data["sharepointIds"]) : <any>undefined;
            this.size = _data["size"];
            this.specialFolder = _data["specialFolder"] ? SpecialFolder.fromJS(_data["specialFolder"]) : <any>undefined;
            this.video = _data["video"] ? Video.fromJS(_data["video"]) : <any>undefined;
            this.webDavUrl = _data["webDavUrl"];
            this.webUrl = _data["webUrl"];
        }
    }

    static fromJS(data: any): RemoteItem {
        data = typeof data === 'object' ? data : {};
        let result = new RemoteItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["createdBy"] = this.createdBy ? this.createdBy.toJSON() : <any>undefined;
        data["createdDateTime"] = this.createdDateTime ? this.createdDateTime.toISOString() : <any>undefined;
        data["file"] = this.file ? this.file.toJSON() : <any>undefined;
        data["fileSystemInfo"] = this.fileSystemInfo ? this.fileSystemInfo.toJSON() : <any>undefined;
        data["folder"] = this.folder ? this.folder.toJSON() : <any>undefined;
        data["id"] = this.id;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        data["lastModifiedBy"] = this.lastModifiedBy ? this.lastModifiedBy.toJSON() : <any>undefined;
        data["lastModifiedDateTime"] = this.lastModifiedDateTime ? this.lastModifiedDateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        data["package"] = this.package ? this.package.toJSON() : <any>undefined;
        data["parentReference"] = this.parentReference ? this.parentReference.toJSON() : <any>undefined;
        data["shared"] = this.shared ? this.shared.toJSON() : <any>undefined;
        data["sharepointIds"] = this.sharepointIds ? this.sharepointIds.toJSON() : <any>undefined;
        data["size"] = this.size;
        data["specialFolder"] = this.specialFolder ? this.specialFolder.toJSON() : <any>undefined;
        data["video"] = this.video ? this.video.toJSON() : <any>undefined;
        data["webDavUrl"] = this.webDavUrl;
        data["webUrl"] = this.webUrl;
        return data;
    }
}

export interface IRemoteItem {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Identity of the user, device, and application which created the item. Read-only. */
    createdBy?: IdentitySet | undefined;
    /** Date and time of item creation. Read-only. */
    createdDateTime?: Date | undefined;
    /** Indicates that the remote item is a file. Read-only. */
    file?: FileObject | undefined;
    /** Information about the remote item from the local file system. Read-only. */
    fileSystemInfo?: FileSystemInfo | undefined;
    /** Indicates that the remote item is a folder. Read-only. */
    folder?: Folder | undefined;
    /** Unique identifier for the remote item in its drive. Read-only. */
    id?: string | undefined;
    /** Image metadata, if the item is an image. Read-only. */
    image?: Image | undefined;
    /** Identity of the user, device, and application which last modified the item. Read-only. */
    lastModifiedBy?: IdentitySet | undefined;
    /** Date and time the item was last modified. Read-only. */
    lastModifiedDateTime?: Date | undefined;
    /** Optional. Filename of the remote item. Read-only. */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** If present, indicates that this item is a package instead of a folder or file. Packages are treated like files in some contexts and folders in others. Read-only. */
    package?: Package | undefined;
    /** Properties of the parent of the remote item. Read-only. */
    parentReference?: ItemReference | undefined;
    /** Indicates that the item has been shared with others and provides information about the shared state of the item. Read-only. */
    shared?: Shared | undefined;
    /** Provides interop between items in OneDrive for Business and SharePoint with the full set of item identifiers. Read-only. */
    sharepointIds?: SharepointIds | undefined;
    /** Size of the remote item. Read-only. */
    size?: number | undefined;
    /** If the current item is also available as a special folder, this facet is returned. Read-only. */
    specialFolder?: SpecialFolder | undefined;
    /** Video metadata, if the item is a video. Read-only. */
    video?: Video | undefined;
    /** DAV compatible URL for the item. */
    webDavUrl?: string | undefined;
    /** URL that displays the resource in the browser. Read-only. */
    webUrl?: string | undefined;
}

export class Shared implements IShared {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The identity of the owner of the shared item. Read-only. */
    owner?: IdentitySet | undefined;
    /** Indicates the scope of how the item is shared. The possible values are: anonymous, organization, or users. Read-only. */
    scope?: string | undefined;
    /** The identity of the user who shared the item. Read-only. */
    sharedBy?: IdentitySet | undefined;
    /** The UTC date and time when the item was shared. Read-only. */
    sharedDateTime?: Date | undefined;

    constructor(data?: IShared) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.owner = _data["owner"] ? IdentitySet.fromJS(_data["owner"]) : <any>undefined;
            this.scope = _data["scope"];
            this.sharedBy = _data["sharedBy"] ? IdentitySet.fromJS(_data["sharedBy"]) : <any>undefined;
            this.sharedDateTime = _data["sharedDateTime"] ? new Date(_data["sharedDateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): Shared {
        data = typeof data === 'object' ? data : {};
        let result = new Shared();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["owner"] = this.owner ? this.owner.toJSON() : <any>undefined;
        data["scope"] = this.scope;
        data["sharedBy"] = this.sharedBy ? this.sharedBy.toJSON() : <any>undefined;
        data["sharedDateTime"] = this.sharedDateTime ? this.sharedDateTime.toISOString() : <any>undefined;
        return data;
    }
}

export interface IShared {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The identity of the owner of the shared item. Read-only. */
    owner?: IdentitySet | undefined;
    /** Indicates the scope of how the item is shared. The possible values are: anonymous, organization, or users. Read-only. */
    scope?: string | undefined;
    /** The identity of the user who shared the item. Read-only. */
    sharedBy?: IdentitySet | undefined;
    /** The UTC date and time when the item was shared. Read-only. */
    sharedDateTime?: Date | undefined;
}

export class SpecialFolder implements ISpecialFolder {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier for this item in the /drive/special collection */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: ISpecialFolder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.name = _data["name"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): SpecialFolder {
        data = typeof data === 'object' ? data : {};
        let result = new SpecialFolder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface ISpecialFolder {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The unique identifier for this item in the /drive/special collection */
    name?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class Video implements IVideo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Number of audio bits per sample. */
    audioBitsPerSample?: number | undefined;
    /** Number of audio channels. */
    audioChannels?: number | undefined;
    /** Name of the audio format (AAC, MP3, etc.). */
    audioFormat?: string | undefined;
    /** Number of audio samples per second. */
    audioSamplesPerSecond?: number | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Bit rate of the video in bits per second. */
    bitrate?: number | undefined;
    /** Duration of the file in milliseconds. */
    duration?: number | undefined;
    /** 'Four character code' name of the video format. */
    fourCC?: string | undefined;
    /** Frame rate of the video. */
    frameRate?: number | undefined;
    /** Height of the video, in pixels. */
    height?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Width of the video, in pixels. */
    width?: number | undefined;

    constructor(data?: IVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.audioBitsPerSample = _data["audioBitsPerSample"];
            this.audioChannels = _data["audioChannels"];
            this.audioFormat = _data["audioFormat"];
            this.audioSamplesPerSecond = _data["audioSamplesPerSecond"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.bitrate = _data["bitrate"];
            this.duration = _data["duration"];
            this.fourCC = _data["fourCC"];
            this.frameRate = _data["frameRate"];
            this.height = _data["height"];
            this.odataType = _data["odataType"];
            this.width = _data["width"];
        }
    }

    static fromJS(data: any): Video {
        data = typeof data === 'object' ? data : {};
        let result = new Video();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["audioBitsPerSample"] = this.audioBitsPerSample;
        data["audioChannels"] = this.audioChannels;
        data["audioFormat"] = this.audioFormat;
        data["audioSamplesPerSecond"] = this.audioSamplesPerSecond;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["bitrate"] = this.bitrate;
        data["duration"] = this.duration;
        data["fourCC"] = this.fourCC;
        data["frameRate"] = this.frameRate;
        data["height"] = this.height;
        data["odataType"] = this.odataType;
        data["width"] = this.width;
        return data;
    }
}

export interface IVideo {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Number of audio bits per sample. */
    audioBitsPerSample?: number | undefined;
    /** Number of audio channels. */
    audioChannels?: number | undefined;
    /** Name of the audio format (AAC, MP3, etc.). */
    audioFormat?: string | undefined;
    /** Number of audio samples per second. */
    audioSamplesPerSecond?: number | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Bit rate of the video in bits per second. */
    bitrate?: number | undefined;
    /** Duration of the file in milliseconds. */
    duration?: number | undefined;
    /** 'Four character code' name of the video format. */
    fourCC?: string | undefined;
    /** Frame rate of the video. */
    frameRate?: number | undefined;
    /** Height of the video, in pixels. */
    height?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Width of the video, in pixels. */
    width?: number | undefined;
}

export class ItemRetentionLabel extends Entity implements IItemRetentionLabel {
    /** Specifies whether the label is applied explicitly on the item. True indicates that the label is applied explicitly; otherwise, the label is inherited from its parent. Read-only. */
    isLabelAppliedExplicitly?: boolean | undefined;
    /** Identity of the user who applied the label. Read-only. */
    labelAppliedBy?: IdentitySet | undefined;
    /** The date and time when the label was applied on the item. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    labelAppliedDateTime?: Date | undefined;
    /** The retention label on the document. Read-write. */
    name?: string | undefined;
    /** The retention settings enforced on the item. Read-write. */
    retentionSettings?: RetentionLabelSettings | undefined;

    constructor(data?: IItemRetentionLabel) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.isLabelAppliedExplicitly = _data["isLabelAppliedExplicitly"];
            this.labelAppliedBy = _data["labelAppliedBy"] ? IdentitySet.fromJS(_data["labelAppliedBy"]) : <any>undefined;
            this.labelAppliedDateTime = _data["labelAppliedDateTime"] ? new Date(_data["labelAppliedDateTime"].toString()) : <any>undefined;
            this.name = _data["name"];
            this.retentionSettings = _data["retentionSettings"] ? RetentionLabelSettings.fromJS(_data["retentionSettings"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ItemRetentionLabel {
        data = typeof data === 'object' ? data : {};
        let result = new ItemRetentionLabel();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isLabelAppliedExplicitly"] = this.isLabelAppliedExplicitly;
        data["labelAppliedBy"] = this.labelAppliedBy ? this.labelAppliedBy.toJSON() : <any>undefined;
        data["labelAppliedDateTime"] = this.labelAppliedDateTime ? this.labelAppliedDateTime.toISOString() : <any>undefined;
        data["name"] = this.name;
        data["retentionSettings"] = this.retentionSettings ? this.retentionSettings.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IItemRetentionLabel extends IEntity {
    /** Specifies whether the label is applied explicitly on the item. True indicates that the label is applied explicitly; otherwise, the label is inherited from its parent. Read-only. */
    isLabelAppliedExplicitly?: boolean | undefined;
    /** Identity of the user who applied the label. Read-only. */
    labelAppliedBy?: IdentitySet | undefined;
    /** The date and time when the label was applied on the item. The timestamp type represents date and time information using ISO 8601 format and is always in UTC. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only. */
    labelAppliedDateTime?: Date | undefined;
    /** The retention label on the document. Read-write. */
    name?: string | undefined;
    /** The retention settings enforced on the item. Read-write. */
    retentionSettings?: RetentionLabelSettings | undefined;
}

export class RetentionLabelSettings implements IRetentionLabelSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Describes the item behavior during retention period. Possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue. Read-only. */
    behaviorDuringRetentionPeriod?: BehaviorDuringRetentionPeriod | undefined;
    /** Specifies whether updates to document content are allowed. Read-only. */
    isContentUpdateAllowed?: boolean | undefined;
    /** Specifies whether the document deletion is allowed. Read-only. */
    isDeleteAllowed?: boolean | undefined;
    /** Specifies whether you're allowed to change the retention label on the document. Read-only. */
    isLabelUpdateAllowed?: boolean | undefined;
    /** Specifies whether updates to the item metadata (for example, the Title field) are blocked. Read-only. */
    isMetadataUpdateAllowed?: boolean | undefined;
    /** Specifies whether the item is locked. Read-write. */
    isRecordLocked?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IRetentionLabelSettings) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.behaviorDuringRetentionPeriod = _data["behaviorDuringRetentionPeriod"];
            this.isContentUpdateAllowed = _data["isContentUpdateAllowed"];
            this.isDeleteAllowed = _data["isDeleteAllowed"];
            this.isLabelUpdateAllowed = _data["isLabelUpdateAllowed"];
            this.isMetadataUpdateAllowed = _data["isMetadataUpdateAllowed"];
            this.isRecordLocked = _data["isRecordLocked"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): RetentionLabelSettings {
        data = typeof data === 'object' ? data : {};
        let result = new RetentionLabelSettings();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["behaviorDuringRetentionPeriod"] = this.behaviorDuringRetentionPeriod;
        data["isContentUpdateAllowed"] = this.isContentUpdateAllowed;
        data["isDeleteAllowed"] = this.isDeleteAllowed;
        data["isLabelUpdateAllowed"] = this.isLabelUpdateAllowed;
        data["isMetadataUpdateAllowed"] = this.isMetadataUpdateAllowed;
        data["isRecordLocked"] = this.isRecordLocked;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IRetentionLabelSettings {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Describes the item behavior during retention period. Possible values are: doNotRetain, retain, retainAsRecord, retainAsRegulatoryRecord, unknownFutureValue. Read-only. */
    behaviorDuringRetentionPeriod?: BehaviorDuringRetentionPeriod | undefined;
    /** Specifies whether updates to document content are allowed. Read-only. */
    isContentUpdateAllowed?: boolean | undefined;
    /** Specifies whether the document deletion is allowed. Read-only. */
    isDeleteAllowed?: boolean | undefined;
    /** Specifies whether you're allowed to change the retention label on the document. Read-only. */
    isLabelUpdateAllowed?: boolean | undefined;
    /** Specifies whether updates to the item metadata (for example, the Title field) are blocked. Read-only. */
    isMetadataUpdateAllowed?: boolean | undefined;
    /** Specifies whether the item is locked. Read-write. */
    isRecordLocked?: boolean | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum BehaviorDuringRetentionPeriod {
    DoNotRetain = 0,
    Retain = 1,
    RetainAsRecord = 2,
    RetainAsRegulatoryRecord = 3,
    UnknownFutureValue = 4,
}

export class SearchResult implements ISearchResult {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A callback URL that can be used to record telemetry information. The application should issue a GET on this URL if the user interacts with this item to improve the quality of results. */
    onClickTelemetryUrl?: string | undefined;

    constructor(data?: ISearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.onClickTelemetryUrl = _data["onClickTelemetryUrl"];
        }
    }

    static fromJS(data: any): SearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new SearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["onClickTelemetryUrl"] = this.onClickTelemetryUrl;
        return data;
    }
}

export interface ISearchResult {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** A callback URL that can be used to record telemetry information. The application should issue a GET on this URL if the user interacts with this item to improve the quality of results. */
    onClickTelemetryUrl?: string | undefined;
}

export class ThumbnailSet extends Entity implements IThumbnailSet {
    /** A 1920x1920 scaled thumbnail. */
    large?: Thumbnail2 | undefined;
    /** A 176x176 scaled thumbnail. */
    medium?: Thumbnail2 | undefined;
    /** A 48x48 cropped thumbnail. */
    small?: Thumbnail2 | undefined;
    /** A custom thumbnail image or the original image used to generate other thumbnails. */
    source?: Thumbnail2 | undefined;

    constructor(data?: IThumbnailSet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.large = _data["large"] ? Thumbnail2.fromJS(_data["large"]) : <any>undefined;
            this.medium = _data["medium"] ? Thumbnail2.fromJS(_data["medium"]) : <any>undefined;
            this.small = _data["small"] ? Thumbnail2.fromJS(_data["small"]) : <any>undefined;
            this.source = _data["source"] ? Thumbnail2.fromJS(_data["source"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): ThumbnailSet {
        data = typeof data === 'object' ? data : {};
        let result = new ThumbnailSet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["large"] = this.large ? this.large.toJSON() : <any>undefined;
        data["medium"] = this.medium ? this.medium.toJSON() : <any>undefined;
        data["small"] = this.small ? this.small.toJSON() : <any>undefined;
        data["source"] = this.source ? this.source.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IThumbnailSet extends IEntity {
    /** A 1920x1920 scaled thumbnail. */
    large?: Thumbnail2 | undefined;
    /** A 176x176 scaled thumbnail. */
    medium?: Thumbnail2 | undefined;
    /** A 48x48 cropped thumbnail. */
    small?: Thumbnail2 | undefined;
    /** A custom thumbnail image or the original image used to generate other thumbnails. */
    source?: Thumbnail2 | undefined;
}

export class Thumbnail2 implements IThumbnail2 {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The content stream for the thumbnail. */
    content?: string | undefined;
    /** The height of the thumbnail, in pixels. */
    height?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The unique identifier of the item that provided the thumbnail. This is only available when a folder thumbnail is requested. */
    sourceItemId?: string | undefined;
    /** The URL used to fetch the thumbnail content. */
    url?: string | undefined;
    /** The width of the thumbnail, in pixels. */
    width?: number | undefined;

    constructor(data?: IThumbnail2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.content = _data["content"];
            this.height = _data["height"];
            this.odataType = _data["odataType"];
            this.sourceItemId = _data["sourceItemId"];
            this.url = _data["url"];
            this.width = _data["width"];
        }
    }

    static fromJS(data: any): Thumbnail2 {
        data = typeof data === 'object' ? data : {};
        let result = new Thumbnail2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["content"] = this.content;
        data["height"] = this.height;
        data["odataType"] = this.odataType;
        data["sourceItemId"] = this.sourceItemId;
        data["url"] = this.url;
        data["width"] = this.width;
        return data;
    }
}

export interface IThumbnail2 {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The content stream for the thumbnail. */
    content?: string | undefined;
    /** The height of the thumbnail, in pixels. */
    height?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The unique identifier of the item that provided the thumbnail. This is only available when a folder thumbnail is requested. */
    sourceItemId?: string | undefined;
    /** The URL used to fetch the thumbnail content. */
    url?: string | undefined;
    /** The width of the thumbnail, in pixels. */
    width?: number | undefined;
}

export class DriveItemVersion extends BaseItemVersion implements IDriveItemVersion {
    /** The content stream for this version of the item. */
    content?: string | undefined;
    /** Indicates the size of the content stream for this version of the item. */
    size?: number | undefined;

    constructor(data?: IDriveItemVersion) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["content"];
            this.size = _data["size"];
        }
    }

    static override fromJS(data: any): DriveItemVersion {
        data = typeof data === 'object' ? data : {};
        let result = new DriveItemVersion();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["size"] = this.size;
        super.toJSON(data);
        return data;
    }
}

export interface IDriveItemVersion extends IBaseItemVersion {
    /** The content stream for this version of the item. */
    content?: string | undefined;
    /** Indicates the size of the content stream for this version of the item. */
    size?: number | undefined;
}

export class Workbook extends Entity implements IWorkbook {
    /** The application property */
    application?: WorkbookApplication | undefined;
    /** Represents a collection of comments in a workbook. */
    comments?: WorkbookComment[] | undefined;
    /** The functions property */
    functions?: WorkbookFunctions | undefined;
    /** Represents a collection of workbooks scoped named items (named ranges and constants). Read-only. */
    names?: WorkbookNamedItem[] | undefined;
    /** The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only. */
    operations?: WorkbookOperation[] | undefined;
    /** Represents a collection of tables associated with the workbook. Read-only. */
    tables?: WorkbookTable[] | undefined;
    /** Represents a collection of worksheets associated with the workbook. Read-only. */
    worksheets?: WorkbookWorksheet[] | undefined;

    constructor(data?: IWorkbook) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.application = _data["application"] ? WorkbookApplication.fromJS(_data["application"]) : <any>undefined;
            if (Array.isArray(_data["comments"])) {
                this.comments = [] as any;
                for (let item of _data["comments"])
                    this.comments!.push(WorkbookComment.fromJS(item));
            }
            this.functions = _data["functions"] ? WorkbookFunctions.fromJS(_data["functions"]) : <any>undefined;
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names!.push(WorkbookNamedItem.fromJS(item));
            }
            if (Array.isArray(_data["operations"])) {
                this.operations = [] as any;
                for (let item of _data["operations"])
                    this.operations!.push(WorkbookOperation.fromJS(item));
            }
            if (Array.isArray(_data["tables"])) {
                this.tables = [] as any;
                for (let item of _data["tables"])
                    this.tables!.push(WorkbookTable.fromJS(item));
            }
            if (Array.isArray(_data["worksheets"])) {
                this.worksheets = [] as any;
                for (let item of _data["worksheets"])
                    this.worksheets!.push(WorkbookWorksheet.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): Workbook {
        data = typeof data === 'object' ? data : {};
        let result = new Workbook();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        if (Array.isArray(this.comments)) {
            data["comments"] = [];
            for (let item of this.comments)
                data["comments"].push(item.toJSON());
        }
        data["functions"] = this.functions ? this.functions.toJSON() : <any>undefined;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        if (Array.isArray(this.operations)) {
            data["operations"] = [];
            for (let item of this.operations)
                data["operations"].push(item.toJSON());
        }
        if (Array.isArray(this.tables)) {
            data["tables"] = [];
            for (let item of this.tables)
                data["tables"].push(item.toJSON());
        }
        if (Array.isArray(this.worksheets)) {
            data["worksheets"] = [];
            for (let item of this.worksheets)
                data["worksheets"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbook extends IEntity {
    /** The application property */
    application?: WorkbookApplication | undefined;
    /** Represents a collection of comments in a workbook. */
    comments?: WorkbookComment[] | undefined;
    /** The functions property */
    functions?: WorkbookFunctions | undefined;
    /** Represents a collection of workbooks scoped named items (named ranges and constants). Read-only. */
    names?: WorkbookNamedItem[] | undefined;
    /** The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only. */
    operations?: WorkbookOperation[] | undefined;
    /** Represents a collection of tables associated with the workbook. Read-only. */
    tables?: WorkbookTable[] | undefined;
    /** Represents a collection of worksheets associated with the workbook. Read-only. */
    worksheets?: WorkbookWorksheet[] | undefined;
}

export class WorkbookApplication extends Entity implements IWorkbookApplication {
    /** Returns the calculation mode used in the workbook. Possible values are: Automatic, AutomaticExceptTables, Manual. */
    calculationMode?: string | undefined;

    constructor(data?: IWorkbookApplication) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.calculationMode = _data["calculationMode"];
        }
    }

    static override fromJS(data: any): WorkbookApplication {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookApplication();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["calculationMode"] = this.calculationMode;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookApplication extends IEntity {
    /** Returns the calculation mode used in the workbook. Possible values are: Automatic, AutomaticExceptTables, Manual. */
    calculationMode?: string | undefined;
}

export class WorkbookComment extends Entity implements IWorkbookComment {
    /** The content of the comment. */
    content?: string | undefined;
    /** The content type of the comment. */
    contentType?: string | undefined;
    /** The list of replies to the comment. Read-only. Nullable. */
    replies?: WorkbookCommentReply[] | undefined;

    constructor(data?: IWorkbookComment) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["content"];
            this.contentType = _data["contentType"];
            if (Array.isArray(_data["replies"])) {
                this.replies = [] as any;
                for (let item of _data["replies"])
                    this.replies!.push(WorkbookCommentReply.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): WorkbookComment {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookComment();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["contentType"] = this.contentType;
        if (Array.isArray(this.replies)) {
            data["replies"] = [];
            for (let item of this.replies)
                data["replies"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookComment extends IEntity {
    /** The content of the comment. */
    content?: string | undefined;
    /** The content type of the comment. */
    contentType?: string | undefined;
    /** The list of replies to the comment. Read-only. Nullable. */
    replies?: WorkbookCommentReply[] | undefined;
}

export class WorkbookCommentReply extends Entity implements IWorkbookCommentReply {
    /** The content of the reply. */
    content?: string | undefined;
    /** The content type for the reply. */
    contentType?: string | undefined;

    constructor(data?: IWorkbookCommentReply) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.content = _data["content"];
            this.contentType = _data["contentType"];
        }
    }

    static override fromJS(data: any): WorkbookCommentReply {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookCommentReply();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["contentType"] = this.contentType;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookCommentReply extends IEntity {
    /** The content of the reply. */
    content?: string | undefined;
    /** The content type for the reply. */
    contentType?: string | undefined;
}

export class WorkbookFunctions extends Entity implements IWorkbookFunctions {

    constructor(data?: IWorkbookFunctions) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): WorkbookFunctions {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookFunctions();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookFunctions extends IEntity {
}

export class WorkbookNamedItem extends Entity implements IWorkbookNamedItem {
    /** The comment associated with this name. */
    comment?: string | undefined;
    /** The name of the object. Read-only. */
    name?: string | undefined;
    /** Indicates whether the name is scoped to the workbook or to a specific worksheet. Read-only. */
    scope?: string | undefined;
    /** The type of reference is associated with the name. Possible values are: String, Integer, Double, Boolean, Range. Read-only. */
    type?: string | undefined;
    /** The formula that the name is defined to refer to. For example, =Sheet14!$B$2:$H$12 and =4.75. Read-only. */
    value?: UntypedNode | undefined;
    /** Indicates whether the object is visible. */
    visible?: boolean | undefined;
    /** Returns the worksheet to which the named item is scoped. Available only if the item is scoped to the worksheet. Read-only. */
    worksheet?: WorkbookWorksheet | undefined;

    constructor(data?: IWorkbookNamedItem) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.comment = _data["comment"];
            this.name = _data["name"];
            this.scope = _data["scope"];
            this.type = _data["type"];
            this.value = _data["value"] ? UntypedNode.fromJS(_data["value"]) : <any>undefined;
            this.visible = _data["visible"];
            this.worksheet = _data["worksheet"] ? WorkbookWorksheet.fromJS(_data["worksheet"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookNamedItem {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookNamedItem();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["comment"] = this.comment;
        data["name"] = this.name;
        data["scope"] = this.scope;
        data["type"] = this.type;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        data["visible"] = this.visible;
        data["worksheet"] = this.worksheet ? this.worksheet.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookNamedItem extends IEntity {
    /** The comment associated with this name. */
    comment?: string | undefined;
    /** The name of the object. Read-only. */
    name?: string | undefined;
    /** Indicates whether the name is scoped to the workbook or to a specific worksheet. Read-only. */
    scope?: string | undefined;
    /** The type of reference is associated with the name. Possible values are: String, Integer, Double, Boolean, Range. Read-only. */
    type?: string | undefined;
    /** The formula that the name is defined to refer to. For example, =Sheet14!$B$2:$H$12 and =4.75. Read-only. */
    value?: UntypedNode | undefined;
    /** Indicates whether the object is visible. */
    visible?: boolean | undefined;
    /** Returns the worksheet to which the named item is scoped. Available only if the item is scoped to the worksheet. Read-only. */
    worksheet?: WorkbookWorksheet | undefined;
}

export class WorkbookWorksheet extends Entity implements IWorkbookWorksheet {
    /** The list of charts that are part of the worksheet. Read-only. */
    charts?: WorkbookChart[] | undefined;
    /** The display name of the worksheet. */
    name?: string | undefined;
    /** The list of names that are associated with the worksheet. Read-only. */
    names?: WorkbookNamedItem[] | undefined;
    /** The list of piot tables that are part of the worksheet. */
    pivotTables?: WorkbookPivotTable[] | undefined;
    /** The zero-based position of the worksheet within the workbook. */
    position?: number | undefined;
    /** The sheet protection object for a worksheet. Read-only. */
    protection?: WorkbookWorksheetProtection | undefined;
    /** The list of tables that are part of the worksheet. Read-only. */
    tables?: WorkbookTable[] | undefined;
    /** The visibility of the worksheet. The possible values are: Visible, Hidden, VeryHidden. */
    visibility?: string | undefined;

    constructor(data?: IWorkbookWorksheet) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["charts"])) {
                this.charts = [] as any;
                for (let item of _data["charts"])
                    this.charts!.push(WorkbookChart.fromJS(item));
            }
            this.name = _data["name"];
            if (Array.isArray(_data["names"])) {
                this.names = [] as any;
                for (let item of _data["names"])
                    this.names!.push(WorkbookNamedItem.fromJS(item));
            }
            if (Array.isArray(_data["pivotTables"])) {
                this.pivotTables = [] as any;
                for (let item of _data["pivotTables"])
                    this.pivotTables!.push(WorkbookPivotTable.fromJS(item));
            }
            this.position = _data["position"];
            this.protection = _data["protection"] ? WorkbookWorksheetProtection.fromJS(_data["protection"]) : <any>undefined;
            if (Array.isArray(_data["tables"])) {
                this.tables = [] as any;
                for (let item of _data["tables"])
                    this.tables!.push(WorkbookTable.fromJS(item));
            }
            this.visibility = _data["visibility"];
        }
    }

    static override fromJS(data: any): WorkbookWorksheet {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookWorksheet();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.charts)) {
            data["charts"] = [];
            for (let item of this.charts)
                data["charts"].push(item.toJSON());
        }
        data["name"] = this.name;
        if (Array.isArray(this.names)) {
            data["names"] = [];
            for (let item of this.names)
                data["names"].push(item.toJSON());
        }
        if (Array.isArray(this.pivotTables)) {
            data["pivotTables"] = [];
            for (let item of this.pivotTables)
                data["pivotTables"].push(item.toJSON());
        }
        data["position"] = this.position;
        data["protection"] = this.protection ? this.protection.toJSON() : <any>undefined;
        if (Array.isArray(this.tables)) {
            data["tables"] = [];
            for (let item of this.tables)
                data["tables"].push(item.toJSON());
        }
        data["visibility"] = this.visibility;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookWorksheet extends IEntity {
    /** The list of charts that are part of the worksheet. Read-only. */
    charts?: WorkbookChart[] | undefined;
    /** The display name of the worksheet. */
    name?: string | undefined;
    /** The list of names that are associated with the worksheet. Read-only. */
    names?: WorkbookNamedItem[] | undefined;
    /** The list of piot tables that are part of the worksheet. */
    pivotTables?: WorkbookPivotTable[] | undefined;
    /** The zero-based position of the worksheet within the workbook. */
    position?: number | undefined;
    /** The sheet protection object for a worksheet. Read-only. */
    protection?: WorkbookWorksheetProtection | undefined;
    /** The list of tables that are part of the worksheet. Read-only. */
    tables?: WorkbookTable[] | undefined;
    /** The visibility of the worksheet. The possible values are: Visible, Hidden, VeryHidden. */
    visibility?: string | undefined;
}

export class WorkbookChart extends Entity implements IWorkbookChart {
    /** Represents chart axes. Read-only. */
    axes?: WorkbookChartAxes | undefined;
    /** Represents the data labels on the chart. Read-only. */
    dataLabels?: WorkbookChartDataLabels | undefined;
    /** Encapsulates the format properties for the chart area. Read-only. */
    format?: WorkbookChartAreaFormat | undefined;
    /** Represents the height, in points, of the chart object. */
    height?: number | undefined;
    /** The distance, in points, from the left side of the chart to the worksheet origin. */
    left?: number | undefined;
    /** Represents the legend for the chart. Read-only. */
    legend?: WorkbookChartLegend | undefined;
    /** Represents the name of a chart object. */
    name?: string | undefined;
    /** Represents either a single series or collection of series in the chart. Read-only. */
    series?: WorkbookChartSeries[] | undefined;
    /** Represents the title of the specified chart, including the text, visibility, position and formatting of the title. Read-only. */
    title?: WorkbookChartTitle | undefined;
    /** Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart). */
    top?: number | undefined;
    /** Represents the width, in points, of the chart object. */
    width?: number | undefined;
    /** The worksheet containing the current chart. Read-only. */
    worksheet?: WorkbookWorksheet | undefined;

    constructor(data?: IWorkbookChart) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.axes = _data["axes"] ? WorkbookChartAxes.fromJS(_data["axes"]) : <any>undefined;
            this.dataLabels = _data["dataLabels"] ? WorkbookChartDataLabels.fromJS(_data["dataLabels"]) : <any>undefined;
            this.format = _data["format"] ? WorkbookChartAreaFormat.fromJS(_data["format"]) : <any>undefined;
            this.height = _data["height"];
            this.left = _data["left"];
            this.legend = _data["legend"] ? WorkbookChartLegend.fromJS(_data["legend"]) : <any>undefined;
            this.name = _data["name"];
            if (Array.isArray(_data["series"])) {
                this.series = [] as any;
                for (let item of _data["series"])
                    this.series!.push(WorkbookChartSeries.fromJS(item));
            }
            this.title = _data["title"] ? WorkbookChartTitle.fromJS(_data["title"]) : <any>undefined;
            this.top = _data["top"];
            this.width = _data["width"];
            this.worksheet = _data["worksheet"] ? WorkbookWorksheet.fromJS(_data["worksheet"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChart {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChart();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["axes"] = this.axes ? this.axes.toJSON() : <any>undefined;
        data["dataLabels"] = this.dataLabels ? this.dataLabels.toJSON() : <any>undefined;
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["height"] = this.height;
        data["left"] = this.left;
        data["legend"] = this.legend ? this.legend.toJSON() : <any>undefined;
        data["name"] = this.name;
        if (Array.isArray(this.series)) {
            data["series"] = [];
            for (let item of this.series)
                data["series"].push(item.toJSON());
        }
        data["title"] = this.title ? this.title.toJSON() : <any>undefined;
        data["top"] = this.top;
        data["width"] = this.width;
        data["worksheet"] = this.worksheet ? this.worksheet.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChart extends IEntity {
    /** Represents chart axes. Read-only. */
    axes?: WorkbookChartAxes | undefined;
    /** Represents the data labels on the chart. Read-only. */
    dataLabels?: WorkbookChartDataLabels | undefined;
    /** Encapsulates the format properties for the chart area. Read-only. */
    format?: WorkbookChartAreaFormat | undefined;
    /** Represents the height, in points, of the chart object. */
    height?: number | undefined;
    /** The distance, in points, from the left side of the chart to the worksheet origin. */
    left?: number | undefined;
    /** Represents the legend for the chart. Read-only. */
    legend?: WorkbookChartLegend | undefined;
    /** Represents the name of a chart object. */
    name?: string | undefined;
    /** Represents either a single series or collection of series in the chart. Read-only. */
    series?: WorkbookChartSeries[] | undefined;
    /** Represents the title of the specified chart, including the text, visibility, position and formatting of the title. Read-only. */
    title?: WorkbookChartTitle | undefined;
    /** Represents the distance, in points, from the top edge of the object to the top of row 1 (on a worksheet) or the top of the chart area (on a chart). */
    top?: number | undefined;
    /** Represents the width, in points, of the chart object. */
    width?: number | undefined;
    /** The worksheet containing the current chart. Read-only. */
    worksheet?: WorkbookWorksheet | undefined;
}

export class WorkbookChartAxes extends Entity implements IWorkbookChartAxes {
    /** Represents the category axis in a chart. Read-only. */
    categoryAxis?: WorkbookChartAxis | undefined;
    /** Represents the series axis of a 3-dimensional chart. Read-only. */
    seriesAxis?: WorkbookChartAxis | undefined;
    /** Represents the value axis in an axis. Read-only. */
    valueAxis?: WorkbookChartAxis | undefined;

    constructor(data?: IWorkbookChartAxes) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.categoryAxis = _data["categoryAxis"] ? WorkbookChartAxis.fromJS(_data["categoryAxis"]) : <any>undefined;
            this.seriesAxis = _data["seriesAxis"] ? WorkbookChartAxis.fromJS(_data["seriesAxis"]) : <any>undefined;
            this.valueAxis = _data["valueAxis"] ? WorkbookChartAxis.fromJS(_data["valueAxis"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartAxes {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartAxes();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryAxis"] = this.categoryAxis ? this.categoryAxis.toJSON() : <any>undefined;
        data["seriesAxis"] = this.seriesAxis ? this.seriesAxis.toJSON() : <any>undefined;
        data["valueAxis"] = this.valueAxis ? this.valueAxis.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartAxes extends IEntity {
    /** Represents the category axis in a chart. Read-only. */
    categoryAxis?: WorkbookChartAxis | undefined;
    /** Represents the series axis of a 3-dimensional chart. Read-only. */
    seriesAxis?: WorkbookChartAxis | undefined;
    /** Represents the value axis in an axis. Read-only. */
    valueAxis?: WorkbookChartAxis | undefined;
}

export class WorkbookChartAxis extends Entity implements IWorkbookChartAxis {
    /** Represents the formatting of a chart object, which includes line and font formatting. Read-only. */
    format?: WorkbookChartAxisFormat | undefined;
    /** Returns a gridlines object that represents the major gridlines for the specified axis. Read-only. */
    majorGridlines?: WorkbookChartGridlines | undefined;
    /** Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number. */
    majorUnit?: UntypedNode | undefined;
    /** Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number. */
    maximum?: UntypedNode | undefined;
    /** Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number. */
    minimum?: UntypedNode | undefined;
    /** Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only. */
    minorGridlines?: WorkbookChartGridlines | undefined;
    /** Represents the interval between two minor tick marks. 'Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number. */
    minorUnit?: UntypedNode | undefined;
    /** Represents the axis title. Read-only. */
    title?: WorkbookChartAxisTitle | undefined;

    constructor(data?: IWorkbookChartAxis) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.format = _data["format"] ? WorkbookChartAxisFormat.fromJS(_data["format"]) : <any>undefined;
            this.majorGridlines = _data["majorGridlines"] ? WorkbookChartGridlines.fromJS(_data["majorGridlines"]) : <any>undefined;
            this.majorUnit = _data["majorUnit"] ? UntypedNode.fromJS(_data["majorUnit"]) : <any>undefined;
            this.maximum = _data["maximum"] ? UntypedNode.fromJS(_data["maximum"]) : <any>undefined;
            this.minimum = _data["minimum"] ? UntypedNode.fromJS(_data["minimum"]) : <any>undefined;
            this.minorGridlines = _data["minorGridlines"] ? WorkbookChartGridlines.fromJS(_data["minorGridlines"]) : <any>undefined;
            this.minorUnit = _data["minorUnit"] ? UntypedNode.fromJS(_data["minorUnit"]) : <any>undefined;
            this.title = _data["title"] ? WorkbookChartAxisTitle.fromJS(_data["title"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartAxis {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartAxis();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["majorGridlines"] = this.majorGridlines ? this.majorGridlines.toJSON() : <any>undefined;
        data["majorUnit"] = this.majorUnit ? this.majorUnit.toJSON() : <any>undefined;
        data["maximum"] = this.maximum ? this.maximum.toJSON() : <any>undefined;
        data["minimum"] = this.minimum ? this.minimum.toJSON() : <any>undefined;
        data["minorGridlines"] = this.minorGridlines ? this.minorGridlines.toJSON() : <any>undefined;
        data["minorUnit"] = this.minorUnit ? this.minorUnit.toJSON() : <any>undefined;
        data["title"] = this.title ? this.title.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartAxis extends IEntity {
    /** Represents the formatting of a chart object, which includes line and font formatting. Read-only. */
    format?: WorkbookChartAxisFormat | undefined;
    /** Returns a gridlines object that represents the major gridlines for the specified axis. Read-only. */
    majorGridlines?: WorkbookChartGridlines | undefined;
    /** Represents the interval between two major tick marks. Can be set to a numeric value or an empty string.  The returned value is always a number. */
    majorUnit?: UntypedNode | undefined;
    /** Represents the maximum value on the value axis.  Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number. */
    maximum?: UntypedNode | undefined;
    /** Represents the minimum value on the value axis. Can be set to a numeric value or an empty string (for automatic axis values).  The returned value is always a number. */
    minimum?: UntypedNode | undefined;
    /** Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only. */
    minorGridlines?: WorkbookChartGridlines | undefined;
    /** Represents the interval between two minor tick marks. 'Can be set to a numeric value or an empty string (for automatic axis values). The returned value is always a number. */
    minorUnit?: UntypedNode | undefined;
    /** Represents the axis title. Read-only. */
    title?: WorkbookChartAxisTitle | undefined;
}

export class WorkbookChartAxisFormat extends Entity implements IWorkbookChartAxisFormat {
    /** Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only. */
    font?: WorkbookChartFont | undefined;
    /** Represents chart line formatting. Read-only. */
    line?: WorkbookChartLineFormat | undefined;

    constructor(data?: IWorkbookChartAxisFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.font = _data["font"] ? WorkbookChartFont.fromJS(_data["font"]) : <any>undefined;
            this.line = _data["line"] ? WorkbookChartLineFormat.fromJS(_data["line"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartAxisFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartAxisFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["font"] = this.font ? this.font.toJSON() : <any>undefined;
        data["line"] = this.line ? this.line.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartAxisFormat extends IEntity {
    /** Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only. */
    font?: WorkbookChartFont | undefined;
    /** Represents chart line formatting. Read-only. */
    line?: WorkbookChartLineFormat | undefined;
}

export class WorkbookChartFont extends Entity implements IWorkbookChartFont {
    /** Indicates whether the fond is bold. */
    bold?: boolean | undefined;
    /** The HTML color code representation of the text color. For example #FF0000 represents Red. */
    color?: string | undefined;
    /** Indicates whether the fond is italic. */
    italic?: boolean | undefined;
    /** The font name. For example 'Calibri'. */
    name?: string | undefined;
    /** The size of the font. For example,  11. */
    size?: number | undefined;
    /** The type of underlining applied to the font. The possible values are: None, Single. */
    underline?: string | undefined;

    constructor(data?: IWorkbookChartFont) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.bold = _data["bold"];
            this.color = _data["color"];
            this.italic = _data["italic"];
            this.name = _data["name"];
            this.size = _data["size"];
            this.underline = _data["underline"];
        }
    }

    static override fromJS(data: any): WorkbookChartFont {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartFont();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bold"] = this.bold;
        data["color"] = this.color;
        data["italic"] = this.italic;
        data["name"] = this.name;
        data["size"] = this.size;
        data["underline"] = this.underline;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartFont extends IEntity {
    /** Indicates whether the fond is bold. */
    bold?: boolean | undefined;
    /** The HTML color code representation of the text color. For example #FF0000 represents Red. */
    color?: string | undefined;
    /** Indicates whether the fond is italic. */
    italic?: boolean | undefined;
    /** The font name. For example 'Calibri'. */
    name?: string | undefined;
    /** The size of the font. For example,  11. */
    size?: number | undefined;
    /** The type of underlining applied to the font. The possible values are: None, Single. */
    underline?: string | undefined;
}

export class WorkbookChartLineFormat extends Entity implements IWorkbookChartLineFormat {
    /** The HTML color code that represents the color of lines in the chart. */
    color?: string | undefined;

    constructor(data?: IWorkbookChartLineFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.color = _data["color"];
        }
    }

    static override fromJS(data: any): WorkbookChartLineFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartLineFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["color"] = this.color;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartLineFormat extends IEntity {
    /** The HTML color code that represents the color of lines in the chart. */
    color?: string | undefined;
}

export class WorkbookChartGridlines extends Entity implements IWorkbookChartGridlines {
    /** Represents the formatting of chart gridlines. Read-only. */
    format?: WorkbookChartGridlinesFormat | undefined;
    /** Indicates whether the axis gridlines are visible. */
    visible?: boolean | undefined;

    constructor(data?: IWorkbookChartGridlines) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.format = _data["format"] ? WorkbookChartGridlinesFormat.fromJS(_data["format"]) : <any>undefined;
            this.visible = _data["visible"];
        }
    }

    static override fromJS(data: any): WorkbookChartGridlines {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartGridlines();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["visible"] = this.visible;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartGridlines extends IEntity {
    /** Represents the formatting of chart gridlines. Read-only. */
    format?: WorkbookChartGridlinesFormat | undefined;
    /** Indicates whether the axis gridlines are visible. */
    visible?: boolean | undefined;
}

export class WorkbookChartGridlinesFormat extends Entity implements IWorkbookChartGridlinesFormat {
    /** Represents chart line formatting. Read-only. */
    line?: WorkbookChartLineFormat | undefined;

    constructor(data?: IWorkbookChartGridlinesFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.line = _data["line"] ? WorkbookChartLineFormat.fromJS(_data["line"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartGridlinesFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartGridlinesFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["line"] = this.line ? this.line.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartGridlinesFormat extends IEntity {
    /** Represents chart line formatting. Read-only. */
    line?: WorkbookChartLineFormat | undefined;
}

export class WorkbookChartAxisTitle extends Entity implements IWorkbookChartAxisTitle {
    /** Represents the formatting of chart axis title. Read-only. */
    format?: WorkbookChartAxisTitleFormat | undefined;
    /** Represents the axis title. */
    text?: string | undefined;
    /** A Boolean that specifies the visibility of an axis title. */
    visible?: boolean | undefined;

    constructor(data?: IWorkbookChartAxisTitle) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.format = _data["format"] ? WorkbookChartAxisTitleFormat.fromJS(_data["format"]) : <any>undefined;
            this.text = _data["text"];
            this.visible = _data["visible"];
        }
    }

    static override fromJS(data: any): WorkbookChartAxisTitle {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartAxisTitle();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["text"] = this.text;
        data["visible"] = this.visible;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartAxisTitle extends IEntity {
    /** Represents the formatting of chart axis title. Read-only. */
    format?: WorkbookChartAxisTitleFormat | undefined;
    /** Represents the axis title. */
    text?: string | undefined;
    /** A Boolean that specifies the visibility of an axis title. */
    visible?: boolean | undefined;
}

export class WorkbookChartAxisTitleFormat extends Entity implements IWorkbookChartAxisTitleFormat {
    /** Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only. */
    font?: WorkbookChartFont | undefined;

    constructor(data?: IWorkbookChartAxisTitleFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.font = _data["font"] ? WorkbookChartFont.fromJS(_data["font"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartAxisTitleFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartAxisTitleFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["font"] = this.font ? this.font.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartAxisTitleFormat extends IEntity {
    /** Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only. */
    font?: WorkbookChartFont | undefined;
}

export class WorkbookChartDataLabels extends Entity implements IWorkbookChartDataLabels {
    /** Represents the format of chart data labels, which includes fill and font formatting. Read-only. */
    format?: WorkbookChartDataLabelFormat | undefined;
    /** DataLabelPosition value that represents the position of the data label. The possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom, BestFit, Callout. */
    position?: string | undefined;
    /** String that represents the separator used for the data labels on a chart. */
    separator?: string | undefined;
    /** Boolean value that represents whether the data label bubble size is visible. */
    showBubbleSize?: boolean | undefined;
    /** Boolean value that represents whether the data label category name is visible. */
    showCategoryName?: boolean | undefined;
    /** Boolean value that represents whether the data label legend key is visible. */
    showLegendKey?: boolean | undefined;
    /** Boolean value that represents whether the data label percentage is visible. */
    showPercentage?: boolean | undefined;
    /** Boolean value that represents whether the data label series name is visible. */
    showSeriesName?: boolean | undefined;
    /** Boolean value that represents whether the data label value is visible. */
    showValue?: boolean | undefined;

    constructor(data?: IWorkbookChartDataLabels) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.format = _data["format"] ? WorkbookChartDataLabelFormat.fromJS(_data["format"]) : <any>undefined;
            this.position = _data["position"];
            this.separator = _data["separator"];
            this.showBubbleSize = _data["showBubbleSize"];
            this.showCategoryName = _data["showCategoryName"];
            this.showLegendKey = _data["showLegendKey"];
            this.showPercentage = _data["showPercentage"];
            this.showSeriesName = _data["showSeriesName"];
            this.showValue = _data["showValue"];
        }
    }

    static override fromJS(data: any): WorkbookChartDataLabels {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartDataLabels();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["position"] = this.position;
        data["separator"] = this.separator;
        data["showBubbleSize"] = this.showBubbleSize;
        data["showCategoryName"] = this.showCategoryName;
        data["showLegendKey"] = this.showLegendKey;
        data["showPercentage"] = this.showPercentage;
        data["showSeriesName"] = this.showSeriesName;
        data["showValue"] = this.showValue;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartDataLabels extends IEntity {
    /** Represents the format of chart data labels, which includes fill and font formatting. Read-only. */
    format?: WorkbookChartDataLabelFormat | undefined;
    /** DataLabelPosition value that represents the position of the data label. The possible values are: None, Center, InsideEnd, InsideBase, OutsideEnd, Left, Right, Top, Bottom, BestFit, Callout. */
    position?: string | undefined;
    /** String that represents the separator used for the data labels on a chart. */
    separator?: string | undefined;
    /** Boolean value that represents whether the data label bubble size is visible. */
    showBubbleSize?: boolean | undefined;
    /** Boolean value that represents whether the data label category name is visible. */
    showCategoryName?: boolean | undefined;
    /** Boolean value that represents whether the data label legend key is visible. */
    showLegendKey?: boolean | undefined;
    /** Boolean value that represents whether the data label percentage is visible. */
    showPercentage?: boolean | undefined;
    /** Boolean value that represents whether the data label series name is visible. */
    showSeriesName?: boolean | undefined;
    /** Boolean value that represents whether the data label value is visible. */
    showValue?: boolean | undefined;
}

export class WorkbookChartDataLabelFormat extends Entity implements IWorkbookChartDataLabelFormat {
    /** Represents the fill format of the current chart data label. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only. */
    font?: WorkbookChartFont | undefined;

    constructor(data?: IWorkbookChartDataLabelFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fill = _data["fill"] ? WorkbookChartFill.fromJS(_data["fill"]) : <any>undefined;
            this.font = _data["font"] ? WorkbookChartFont.fromJS(_data["font"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartDataLabelFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartDataLabelFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fill"] = this.fill ? this.fill.toJSON() : <any>undefined;
        data["font"] = this.font ? this.font.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartDataLabelFormat extends IEntity {
    /** Represents the fill format of the current chart data label. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only. */
    font?: WorkbookChartFont | undefined;
}

export class WorkbookChartFill extends Entity implements IWorkbookChartFill {

    constructor(data?: IWorkbookChartFill) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): WorkbookChartFill {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartFill();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartFill extends IEntity {
}

export class WorkbookChartAreaFormat extends Entity implements IWorkbookChartAreaFormat {
    /** Represents the fill format of an object, which includes background formatting information. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only. */
    font?: WorkbookChartFont | undefined;

    constructor(data?: IWorkbookChartAreaFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fill = _data["fill"] ? WorkbookChartFill.fromJS(_data["fill"]) : <any>undefined;
            this.font = _data["font"] ? WorkbookChartFont.fromJS(_data["font"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartAreaFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartAreaFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fill"] = this.fill ? this.fill.toJSON() : <any>undefined;
        data["font"] = this.font ? this.font.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartAreaFormat extends IEntity {
    /** Represents the fill format of an object, which includes background formatting information. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only. */
    font?: WorkbookChartFont | undefined;
}

export class WorkbookChartLegend extends Entity implements IWorkbookChartLegend {
    /** Represents the formatting of a chart legend, which includes fill and font formatting. Read-only. */
    format?: WorkbookChartLegendFormat | undefined;
    /** Indicates whether the chart legend should overlap with the main body of the chart. */
    overlay?: boolean | undefined;
    /** Represents the position of the legend on the chart. The possible values are: Top, Bottom, Left, Right, Corner, Custom. */
    position?: string | undefined;
    /** Indicates whether the chart legend is visible. */
    visible?: boolean | undefined;

    constructor(data?: IWorkbookChartLegend) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.format = _data["format"] ? WorkbookChartLegendFormat.fromJS(_data["format"]) : <any>undefined;
            this.overlay = _data["overlay"];
            this.position = _data["position"];
            this.visible = _data["visible"];
        }
    }

    static override fromJS(data: any): WorkbookChartLegend {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartLegend();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["overlay"] = this.overlay;
        data["position"] = this.position;
        data["visible"] = this.visible;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartLegend extends IEntity {
    /** Represents the formatting of a chart legend, which includes fill and font formatting. Read-only. */
    format?: WorkbookChartLegendFormat | undefined;
    /** Indicates whether the chart legend should overlap with the main body of the chart. */
    overlay?: boolean | undefined;
    /** Represents the position of the legend on the chart. The possible values are: Top, Bottom, Left, Right, Corner, Custom. */
    position?: string | undefined;
    /** Indicates whether the chart legend is visible. */
    visible?: boolean | undefined;
}

export class WorkbookChartLegendFormat extends Entity implements IWorkbookChartLegendFormat {
    /** Represents the fill format of an object, which includes background formating information. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only. */
    font?: WorkbookChartFont | undefined;

    constructor(data?: IWorkbookChartLegendFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fill = _data["fill"] ? WorkbookChartFill.fromJS(_data["fill"]) : <any>undefined;
            this.font = _data["font"] ? WorkbookChartFont.fromJS(_data["font"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartLegendFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartLegendFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fill"] = this.fill ? this.fill.toJSON() : <any>undefined;
        data["font"] = this.font ? this.font.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartLegendFormat extends IEntity {
    /** Represents the fill format of an object, which includes background formating information. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only. */
    font?: WorkbookChartFont | undefined;
}

export class WorkbookChartSeries extends Entity implements IWorkbookChartSeries {
    /** The formatting of a chart series, which includes fill and line formatting. Read-only. */
    format?: WorkbookChartSeriesFormat | undefined;
    /** The name of a series in a chart. */
    name?: string | undefined;
    /** A collection of all points in the series. Read-only. */
    points?: WorkbookChartPoint[] | undefined;

    constructor(data?: IWorkbookChartSeries) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.format = _data["format"] ? WorkbookChartSeriesFormat.fromJS(_data["format"]) : <any>undefined;
            this.name = _data["name"];
            if (Array.isArray(_data["points"])) {
                this.points = [] as any;
                for (let item of _data["points"])
                    this.points!.push(WorkbookChartPoint.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): WorkbookChartSeries {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartSeries();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["name"] = this.name;
        if (Array.isArray(this.points)) {
            data["points"] = [];
            for (let item of this.points)
                data["points"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartSeries extends IEntity {
    /** The formatting of a chart series, which includes fill and line formatting. Read-only. */
    format?: WorkbookChartSeriesFormat | undefined;
    /** The name of a series in a chart. */
    name?: string | undefined;
    /** A collection of all points in the series. Read-only. */
    points?: WorkbookChartPoint[] | undefined;
}

export class WorkbookChartSeriesFormat extends Entity implements IWorkbookChartSeriesFormat {
    /** Represents the fill format of a chart series, which includes background formatting information. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents line formatting. Read-only. */
    line?: WorkbookChartLineFormat | undefined;

    constructor(data?: IWorkbookChartSeriesFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fill = _data["fill"] ? WorkbookChartFill.fromJS(_data["fill"]) : <any>undefined;
            this.line = _data["line"] ? WorkbookChartLineFormat.fromJS(_data["line"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartSeriesFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartSeriesFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fill"] = this.fill ? this.fill.toJSON() : <any>undefined;
        data["line"] = this.line ? this.line.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartSeriesFormat extends IEntity {
    /** Represents the fill format of a chart series, which includes background formatting information. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents line formatting. Read-only. */
    line?: WorkbookChartLineFormat | undefined;
}

export class WorkbookChartPoint extends Entity implements IWorkbookChartPoint {
    /** The format properties of the chart point. Read-only. */
    format?: WorkbookChartPointFormat | undefined;
    /** The value of a chart point. Read-only. */
    value?: UntypedNode | undefined;

    constructor(data?: IWorkbookChartPoint) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.format = _data["format"] ? WorkbookChartPointFormat.fromJS(_data["format"]) : <any>undefined;
            this.value = _data["value"] ? UntypedNode.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartPoint {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartPoint();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartPoint extends IEntity {
    /** The format properties of the chart point. Read-only. */
    format?: WorkbookChartPointFormat | undefined;
    /** The value of a chart point. Read-only. */
    value?: UntypedNode | undefined;
}

export class WorkbookChartPointFormat extends Entity implements IWorkbookChartPointFormat {
    /** Represents the fill format of a chart, which includes background formatting information. Read-only. */
    fill?: WorkbookChartFill | undefined;

    constructor(data?: IWorkbookChartPointFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fill = _data["fill"] ? WorkbookChartFill.fromJS(_data["fill"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartPointFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartPointFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fill"] = this.fill ? this.fill.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartPointFormat extends IEntity {
    /** Represents the fill format of a chart, which includes background formatting information. Read-only. */
    fill?: WorkbookChartFill | undefined;
}

export class WorkbookChartTitle extends Entity implements IWorkbookChartTitle {
    /** The formatting of a chart title, which includes fill and font formatting. Read-only. */
    format?: WorkbookChartTitleFormat | undefined;
    /** Indicates whether the chart title will overlay the chart or not. */
    overlay?: boolean | undefined;
    /** The title text of the chart. */
    text?: string | undefined;
    /** Indicates whether the chart title is visible. */
    visible?: boolean | undefined;

    constructor(data?: IWorkbookChartTitle) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.format = _data["format"] ? WorkbookChartTitleFormat.fromJS(_data["format"]) : <any>undefined;
            this.overlay = _data["overlay"];
            this.text = _data["text"];
            this.visible = _data["visible"];
        }
    }

    static override fromJS(data: any): WorkbookChartTitle {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartTitle();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["format"] = this.format ? this.format.toJSON() : <any>undefined;
        data["overlay"] = this.overlay;
        data["text"] = this.text;
        data["visible"] = this.visible;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartTitle extends IEntity {
    /** The formatting of a chart title, which includes fill and font formatting. Read-only. */
    format?: WorkbookChartTitleFormat | undefined;
    /** Indicates whether the chart title will overlay the chart or not. */
    overlay?: boolean | undefined;
    /** The title text of the chart. */
    text?: string | undefined;
    /** Indicates whether the chart title is visible. */
    visible?: boolean | undefined;
}

export class WorkbookChartTitleFormat extends Entity implements IWorkbookChartTitleFormat {
    /** Represents the fill format of an object, which includes background formatting information. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only. */
    font?: WorkbookChartFont | undefined;

    constructor(data?: IWorkbookChartTitleFormat) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.fill = _data["fill"] ? WorkbookChartFill.fromJS(_data["fill"]) : <any>undefined;
            this.font = _data["font"] ? WorkbookChartFont.fromJS(_data["font"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookChartTitleFormat {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookChartTitleFormat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fill"] = this.fill ? this.fill.toJSON() : <any>undefined;
        data["font"] = this.font ? this.font.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookChartTitleFormat extends IEntity {
    /** Represents the fill format of an object, which includes background formatting information. Read-only. */
    fill?: WorkbookChartFill | undefined;
    /** Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only. */
    font?: WorkbookChartFont | undefined;
}

export class WorkbookPivotTable extends Entity implements IWorkbookPivotTable {
    /** The name of the pivot table. */
    name?: string | undefined;
    /** The worksheet that contains the current pivot table. Read-only. */
    worksheet?: WorkbookWorksheet | undefined;

    constructor(data?: IWorkbookPivotTable) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.worksheet = _data["worksheet"] ? WorkbookWorksheet.fromJS(_data["worksheet"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookPivotTable {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookPivotTable();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["worksheet"] = this.worksheet ? this.worksheet.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookPivotTable extends IEntity {
    /** The name of the pivot table. */
    name?: string | undefined;
    /** The worksheet that contains the current pivot table. Read-only. */
    worksheet?: WorkbookWorksheet | undefined;
}

export class WorkbookWorksheetProtection extends Entity implements IWorkbookWorksheetProtection {
    /** Worksheet protection options. Read-only. */
    options?: WorkbookWorksheetProtectionOptions | undefined;
    /** Indicates whether the worksheet is protected.  Read-only. */
    protected?: boolean | undefined;

    constructor(data?: IWorkbookWorksheetProtection) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.options = _data["options"] ? WorkbookWorksheetProtectionOptions.fromJS(_data["options"]) : <any>undefined;
            this.protected = _data["protected"];
        }
    }

    static override fromJS(data: any): WorkbookWorksheetProtection {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookWorksheetProtection();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["options"] = this.options ? this.options.toJSON() : <any>undefined;
        data["protected"] = this.protected;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookWorksheetProtection extends IEntity {
    /** Worksheet protection options. Read-only. */
    options?: WorkbookWorksheetProtectionOptions | undefined;
    /** Indicates whether the worksheet is protected.  Read-only. */
    protected?: boolean | undefined;
}

export class WorkbookWorksheetProtectionOptions implements IWorkbookWorksheetProtectionOptions {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Indicates whether the worksheet protection option to allow the use of the autofilter feature is enabled. */
    allowAutoFilter?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow deleting columns is enabled. */
    allowDeleteColumns?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow deleting rows is enabled. */
    allowDeleteRows?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow formatting cells is enabled. */
    allowFormatCells?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow formatting columns is enabled. */
    allowFormatColumns?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow formatting rows is enabled. */
    allowFormatRows?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow inserting columns is enabled. */
    allowInsertColumns?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow inserting hyperlinks is enabled. */
    allowInsertHyperlinks?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow inserting rows is enabled. */
    allowInsertRows?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow the use of the pivot table feature is enabled. */
    allowPivotTables?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow the use of the sort feature is enabled. */
    allowSort?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IWorkbookWorksheetProtectionOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.allowAutoFilter = _data["allowAutoFilter"];
            this.allowDeleteColumns = _data["allowDeleteColumns"];
            this.allowDeleteRows = _data["allowDeleteRows"];
            this.allowFormatCells = _data["allowFormatCells"];
            this.allowFormatColumns = _data["allowFormatColumns"];
            this.allowFormatRows = _data["allowFormatRows"];
            this.allowInsertColumns = _data["allowInsertColumns"];
            this.allowInsertHyperlinks = _data["allowInsertHyperlinks"];
            this.allowInsertRows = _data["allowInsertRows"];
            this.allowPivotTables = _data["allowPivotTables"];
            this.allowSort = _data["allowSort"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): WorkbookWorksheetProtectionOptions {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookWorksheetProtectionOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["allowAutoFilter"] = this.allowAutoFilter;
        data["allowDeleteColumns"] = this.allowDeleteColumns;
        data["allowDeleteRows"] = this.allowDeleteRows;
        data["allowFormatCells"] = this.allowFormatCells;
        data["allowFormatColumns"] = this.allowFormatColumns;
        data["allowFormatRows"] = this.allowFormatRows;
        data["allowInsertColumns"] = this.allowInsertColumns;
        data["allowInsertHyperlinks"] = this.allowInsertHyperlinks;
        data["allowInsertRows"] = this.allowInsertRows;
        data["allowPivotTables"] = this.allowPivotTables;
        data["allowSort"] = this.allowSort;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IWorkbookWorksheetProtectionOptions {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Indicates whether the worksheet protection option to allow the use of the autofilter feature is enabled. */
    allowAutoFilter?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow deleting columns is enabled. */
    allowDeleteColumns?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow deleting rows is enabled. */
    allowDeleteRows?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow formatting cells is enabled. */
    allowFormatCells?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow formatting columns is enabled. */
    allowFormatColumns?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow formatting rows is enabled. */
    allowFormatRows?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow inserting columns is enabled. */
    allowInsertColumns?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow inserting hyperlinks is enabled. */
    allowInsertHyperlinks?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow inserting rows is enabled. */
    allowInsertRows?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow the use of the pivot table feature is enabled. */
    allowPivotTables?: boolean | undefined;
    /** Indicates whether the worksheet protection option to allow the use of the sort feature is enabled. */
    allowSort?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export class WorkbookTable extends Entity implements IWorkbookTable {
    /** The list of all the columns in the table. Read-only. */
    columns?: WorkbookTableColumn[] | undefined;
    /** Indicates whether the first column contains special formatting. */
    highlightFirstColumn?: boolean | undefined;
    /** Indicates whether the last column contains special formatting. */
    highlightLastColumn?: boolean | undefined;
    /** A legacy identifier used in older Excel clients. The value of the identifier remains the same even when the table is renamed. This property should be interpreted as an opaque string value and shouldn't be parsed to any other type. Read-only. */
    legacyId?: string | undefined;
    /** The name of the table. */
    name?: string | undefined;
    /** The list of all the rows in the table. Read-only. */
    rows?: WorkbookTableRow[] | undefined;
    /** Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier. */
    showBandedColumns?: boolean | undefined;
    /** Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier. */
    showBandedRows?: boolean | undefined;
    /** Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row. */
    showFilterButton?: boolean | undefined;
    /** Indicates whether the header row is visible or not. This value can be set to show or remove the header row. */
    showHeaders?: boolean | undefined;
    /** Indicates whether the total row is visible or not. This value can be set to show or remove the total row. */
    showTotals?: boolean | undefined;
    /** The sorting for the table. Read-only. */
    sort?: WorkbookTableSort | undefined;
    /** A constant value that represents the Table style. Possible values are: TableStyleLight1 through TableStyleLight21, TableStyleMedium1 through TableStyleMedium28, TableStyleStyleDark1 through TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified. */
    style?: string | undefined;
    /** The worksheet containing the current table. Read-only. */
    worksheet?: WorkbookWorksheet | undefined;

    constructor(data?: IWorkbookTable) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["columns"])) {
                this.columns = [] as any;
                for (let item of _data["columns"])
                    this.columns!.push(WorkbookTableColumn.fromJS(item));
            }
            this.highlightFirstColumn = _data["highlightFirstColumn"];
            this.highlightLastColumn = _data["highlightLastColumn"];
            this.legacyId = _data["legacyId"];
            this.name = _data["name"];
            if (Array.isArray(_data["rows"])) {
                this.rows = [] as any;
                for (let item of _data["rows"])
                    this.rows!.push(WorkbookTableRow.fromJS(item));
            }
            this.showBandedColumns = _data["showBandedColumns"];
            this.showBandedRows = _data["showBandedRows"];
            this.showFilterButton = _data["showFilterButton"];
            this.showHeaders = _data["showHeaders"];
            this.showTotals = _data["showTotals"];
            this.sort = _data["sort"] ? WorkbookTableSort.fromJS(_data["sort"]) : <any>undefined;
            this.style = _data["style"];
            this.worksheet = _data["worksheet"] ? WorkbookWorksheet.fromJS(_data["worksheet"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookTable {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookTable();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.columns)) {
            data["columns"] = [];
            for (let item of this.columns)
                data["columns"].push(item.toJSON());
        }
        data["highlightFirstColumn"] = this.highlightFirstColumn;
        data["highlightLastColumn"] = this.highlightLastColumn;
        data["legacyId"] = this.legacyId;
        data["name"] = this.name;
        if (Array.isArray(this.rows)) {
            data["rows"] = [];
            for (let item of this.rows)
                data["rows"].push(item.toJSON());
        }
        data["showBandedColumns"] = this.showBandedColumns;
        data["showBandedRows"] = this.showBandedRows;
        data["showFilterButton"] = this.showFilterButton;
        data["showHeaders"] = this.showHeaders;
        data["showTotals"] = this.showTotals;
        data["sort"] = this.sort ? this.sort.toJSON() : <any>undefined;
        data["style"] = this.style;
        data["worksheet"] = this.worksheet ? this.worksheet.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookTable extends IEntity {
    /** The list of all the columns in the table. Read-only. */
    columns?: WorkbookTableColumn[] | undefined;
    /** Indicates whether the first column contains special formatting. */
    highlightFirstColumn?: boolean | undefined;
    /** Indicates whether the last column contains special formatting. */
    highlightLastColumn?: boolean | undefined;
    /** A legacy identifier used in older Excel clients. The value of the identifier remains the same even when the table is renamed. This property should be interpreted as an opaque string value and shouldn't be parsed to any other type. Read-only. */
    legacyId?: string | undefined;
    /** The name of the table. */
    name?: string | undefined;
    /** The list of all the rows in the table. Read-only. */
    rows?: WorkbookTableRow[] | undefined;
    /** Indicates whether the columns show banded formatting in which odd columns are highlighted differently from even ones to make reading the table easier. */
    showBandedColumns?: boolean | undefined;
    /** Indicates whether the rows show banded formatting in which odd rows are highlighted differently from even ones to make reading the table easier. */
    showBandedRows?: boolean | undefined;
    /** Indicates whether the filter buttons are visible at the top of each column header. Setting this is only allowed if the table contains a header row. */
    showFilterButton?: boolean | undefined;
    /** Indicates whether the header row is visible or not. This value can be set to show or remove the header row. */
    showHeaders?: boolean | undefined;
    /** Indicates whether the total row is visible or not. This value can be set to show or remove the total row. */
    showTotals?: boolean | undefined;
    /** The sorting for the table. Read-only. */
    sort?: WorkbookTableSort | undefined;
    /** A constant value that represents the Table style. Possible values are: TableStyleLight1 through TableStyleLight21, TableStyleMedium1 through TableStyleMedium28, TableStyleStyleDark1 through TableStyleStyleDark11. A custom user-defined style present in the workbook can also be specified. */
    style?: string | undefined;
    /** The worksheet containing the current table. Read-only. */
    worksheet?: WorkbookWorksheet | undefined;
}

export class WorkbookTableColumn extends Entity implements IWorkbookTableColumn {
    /** The filter applied to the column. Read-only. */
    filter?: WorkbookFilter | undefined;
    /** The index of the column within the columns collection of the table. Zero-indexed. Read-only. */
    index?: number | undefined;
    /** The name of the table column. */
    name?: string | undefined;
    /** TRepresents the raw values of the specified range. The data returned could be of type string, number, or a Boolean. Cell that contain an error will return the error string. */
    values?: UntypedNode | undefined;

    constructor(data?: IWorkbookTableColumn) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.filter = _data["filter"] ? WorkbookFilter.fromJS(_data["filter"]) : <any>undefined;
            this.index = _data["index"];
            this.name = _data["name"];
            this.values = _data["values"] ? UntypedNode.fromJS(_data["values"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookTableColumn {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookTableColumn();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["index"] = this.index;
        data["name"] = this.name;
        data["values"] = this.values ? this.values.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookTableColumn extends IEntity {
    /** The filter applied to the column. Read-only. */
    filter?: WorkbookFilter | undefined;
    /** The index of the column within the columns collection of the table. Zero-indexed. Read-only. */
    index?: number | undefined;
    /** The name of the table column. */
    name?: string | undefined;
    /** TRepresents the raw values of the specified range. The data returned could be of type string, number, or a Boolean. Cell that contain an error will return the error string. */
    values?: UntypedNode | undefined;
}

export class WorkbookFilter extends Entity implements IWorkbookFilter {
    /** The currently applied filter on the given column. Read-only. */
    criteria?: WorkbookFilterCriteria | undefined;

    constructor(data?: IWorkbookFilter) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.criteria = _data["criteria"] ? WorkbookFilterCriteria.fromJS(_data["criteria"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookFilter {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookFilter();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["criteria"] = this.criteria ? this.criteria.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookFilter extends IEntity {
    /** The currently applied filter on the given column. Read-only. */
    criteria?: WorkbookFilterCriteria | undefined;
}

export class WorkbookFilterCriteria implements IWorkbookFilterCriteria {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The color applied to the cell. */
    color?: string | undefined;
    /** A custom criterion. */
    criterion1?: string | undefined;
    /** A custom criterion. */
    criterion2?: string | undefined;
    /** A dynamic formula specified in a custom filter. */
    dynamicCriteria?: string | undefined;
    /** Indicates whether a filter is applied to a column. */
    filterOn?: string | undefined;
    /** An icon applied to a cell via conditional formatting. */
    icon?: WorkbookIcon | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** An operator in a cell; for example, =, >, <, <=, or <>. */
    operator?: string | undefined;
    /** The values that appear in the cell. */
    values?: UntypedNode | undefined;

    constructor(data?: IWorkbookFilterCriteria) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.color = _data["color"];
            this.criterion1 = _data["criterion1"];
            this.criterion2 = _data["criterion2"];
            this.dynamicCriteria = _data["dynamicCriteria"];
            this.filterOn = _data["filterOn"];
            this.icon = _data["icon"] ? WorkbookIcon.fromJS(_data["icon"]) : <any>undefined;
            this.odataType = _data["odataType"];
            this.operator = _data["operator"];
            this.values = _data["values"] ? UntypedNode.fromJS(_data["values"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WorkbookFilterCriteria {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookFilterCriteria();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["color"] = this.color;
        data["criterion1"] = this.criterion1;
        data["criterion2"] = this.criterion2;
        data["dynamicCriteria"] = this.dynamicCriteria;
        data["filterOn"] = this.filterOn;
        data["icon"] = this.icon ? this.icon.toJSON() : <any>undefined;
        data["odataType"] = this.odataType;
        data["operator"] = this.operator;
        data["values"] = this.values ? this.values.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWorkbookFilterCriteria {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The color applied to the cell. */
    color?: string | undefined;
    /** A custom criterion. */
    criterion1?: string | undefined;
    /** A custom criterion. */
    criterion2?: string | undefined;
    /** A dynamic formula specified in a custom filter. */
    dynamicCriteria?: string | undefined;
    /** Indicates whether a filter is applied to a column. */
    filterOn?: string | undefined;
    /** An icon applied to a cell via conditional formatting. */
    icon?: WorkbookIcon | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** An operator in a cell; for example, =, >, <, <=, or <>. */
    operator?: string | undefined;
    /** The values that appear in the cell. */
    values?: UntypedNode | undefined;
}

export class WorkbookIcon implements IWorkbookIcon {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The index of the icon in the given set. */
    index?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The set that the icon is part of. The possible values are: Invalid, ThreeArrows, ThreeArrowsGray, ThreeFlags, ThreeTrafficLights1, ThreeTrafficLights2, ThreeSigns, ThreeSymbols, ThreeSymbols2, FourArrows, FourArrowsGray, FourRedToBlack, FourRating, FourTrafficLights, FiveArrows, FiveArrowsGray, FiveRating, FiveQuarters, ThreeStars, ThreeTriangles, FiveBoxes. */
    set?: string | undefined;

    constructor(data?: IWorkbookIcon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.index = _data["index"];
            this.odataType = _data["odataType"];
            this.set = _data["set"];
        }
    }

    static fromJS(data: any): WorkbookIcon {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookIcon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["index"] = this.index;
        data["odataType"] = this.odataType;
        data["set"] = this.set;
        return data;
    }
}

export interface IWorkbookIcon {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The index of the icon in the given set. */
    index?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** The set that the icon is part of. The possible values are: Invalid, ThreeArrows, ThreeArrowsGray, ThreeFlags, ThreeTrafficLights1, ThreeTrafficLights2, ThreeSigns, ThreeSymbols, ThreeSymbols2, FourArrows, FourArrowsGray, FourRedToBlack, FourRating, FourTrafficLights, FiveArrows, FiveArrowsGray, FiveRating, FiveQuarters, ThreeStars, ThreeTriangles, FiveBoxes. */
    set?: string | undefined;
}

export class WorkbookTableRow extends Entity implements IWorkbookTableRow {
    /** The index of the row within the rows collection of the table. Zero-based. Read-only. */
    index?: number | undefined;
    /** The raw values of the specified range. The data returned could be of type string, number, or a Boolean. Any cell that contain an error will return the error string. */
    values?: UntypedNode | undefined;

    constructor(data?: IWorkbookTableRow) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.index = _data["index"];
            this.values = _data["values"] ? UntypedNode.fromJS(_data["values"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): WorkbookTableRow {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookTableRow();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["index"] = this.index;
        data["values"] = this.values ? this.values.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookTableRow extends IEntity {
    /** The index of the row within the rows collection of the table. Zero-based. Read-only. */
    index?: number | undefined;
    /** The raw values of the specified range. The data returned could be of type string, number, or a Boolean. Any cell that contain an error will return the error string. */
    values?: UntypedNode | undefined;
}

export class WorkbookTableSort extends Entity implements IWorkbookTableSort {
    /** The list of the current conditions last used to sort the table. Read-only. */
    fields?: WorkbookSortField[] | undefined;
    /** Indicates whether the casing impacted the last sort of the table. Read-only. */
    matchCase?: boolean | undefined;
    /** The Chinese character ordering method last used to sort the table. The possible values are: PinYin, StrokeCount. Read-only. */
    method?: string | undefined;

    constructor(data?: IWorkbookTableSort) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["fields"])) {
                this.fields = [] as any;
                for (let item of _data["fields"])
                    this.fields!.push(WorkbookSortField.fromJS(item));
            }
            this.matchCase = _data["matchCase"];
            this.method = _data["method"];
        }
    }

    static override fromJS(data: any): WorkbookTableSort {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookTableSort();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.fields)) {
            data["fields"] = [];
            for (let item of this.fields)
                data["fields"].push(item.toJSON());
        }
        data["matchCase"] = this.matchCase;
        data["method"] = this.method;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookTableSort extends IEntity {
    /** The list of the current conditions last used to sort the table. Read-only. */
    fields?: WorkbookSortField[] | undefined;
    /** Indicates whether the casing impacted the last sort of the table. Read-only. */
    matchCase?: boolean | undefined;
    /** The Chinese character ordering method last used to sort the table. The possible values are: PinYin, StrokeCount. Read-only. */
    method?: string | undefined;
}

export class WorkbookSortField implements IWorkbookSortField {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Represents whether the sorting is done in an ascending fashion. */
    ascending?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Represents the color that is the target of the condition if the sorting is on font or cell color. */
    color?: string | undefined;
    /** Represents additional sorting options for this field. The possible values are: Normal, TextAsNumber. */
    dataOption?: string | undefined;
    /** Represents the icon that is the target of the condition if the sorting is on the cell's icon. */
    icon?: WorkbookIcon | undefined;
    /** Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row). */
    key?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Represents the type of sorting of this condition. The possible values are: Value, CellColor, FontColor, Icon. */
    sortOn?: string | undefined;

    constructor(data?: IWorkbookSortField) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.ascending = _data["ascending"];
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.color = _data["color"];
            this.dataOption = _data["dataOption"];
            this.icon = _data["icon"] ? WorkbookIcon.fromJS(_data["icon"]) : <any>undefined;
            this.key = _data["key"];
            this.odataType = _data["odataType"];
            this.sortOn = _data["sortOn"];
        }
    }

    static fromJS(data: any): WorkbookSortField {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookSortField();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["ascending"] = this.ascending;
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["color"] = this.color;
        data["dataOption"] = this.dataOption;
        data["icon"] = this.icon ? this.icon.toJSON() : <any>undefined;
        data["key"] = this.key;
        data["odataType"] = this.odataType;
        data["sortOn"] = this.sortOn;
        return data;
    }
}

export interface IWorkbookSortField {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Represents whether the sorting is done in an ascending fashion. */
    ascending?: boolean | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** Represents the color that is the target of the condition if the sorting is on font or cell color. */
    color?: string | undefined;
    /** Represents additional sorting options for this field. The possible values are: Normal, TextAsNumber. */
    dataOption?: string | undefined;
    /** Represents the icon that is the target of the condition if the sorting is on the cell's icon. */
    icon?: WorkbookIcon | undefined;
    /** Represents the column (or row, depending on the sort orientation) that the condition is on. Represented as an offset from the first column (or row). */
    key?: number | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
    /** Represents the type of sorting of this condition. The possible values are: Value, CellColor, FontColor, Icon. */
    sortOn?: string | undefined;
}

export class WorkbookOperation extends Entity implements IWorkbookOperation {
    /** The error returned by the operation. */
    error?: WorkbookOperationError | undefined;
    /** The resource URI for the result. */
    resourceLocation?: string | undefined;
    /** The status property */
    status?: WorkbookOperationStatus | undefined;

    constructor(data?: IWorkbookOperation) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.error = _data["error"] ? WorkbookOperationError.fromJS(_data["error"]) : <any>undefined;
            this.resourceLocation = _data["resourceLocation"];
            this.status = _data["status"];
        }
    }

    static override fromJS(data: any): WorkbookOperation {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookOperation();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["error"] = this.error ? this.error.toJSON() : <any>undefined;
        data["resourceLocation"] = this.resourceLocation;
        data["status"] = this.status;
        super.toJSON(data);
        return data;
    }
}

export interface IWorkbookOperation extends IEntity {
    /** The error returned by the operation. */
    error?: WorkbookOperationError | undefined;
    /** The resource URI for the result. */
    resourceLocation?: string | undefined;
    /** The status property */
    status?: WorkbookOperationStatus | undefined;
}

export class WorkbookOperationError implements IWorkbookOperationError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The error code. */
    code?: string | undefined;
    /** The innerError property */
    innerError?: WorkbookOperationError | undefined;
    /** The error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;

    constructor(data?: IWorkbookOperationError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["additionalData"]) {
                this.additionalData = {} as any;
                for (let key in _data["additionalData"]) {
                    if (_data["additionalData"].hasOwnProperty(key))
                        (<any>this.additionalData)![key] = _data["additionalData"][key];
                }
            }
            this.backingStore = _data["backingStore"] ? IBackingStore.fromJS(_data["backingStore"]) : <any>undefined;
            this.code = _data["code"];
            this.innerError = _data["innerError"] ? WorkbookOperationError.fromJS(_data["innerError"]) : <any>undefined;
            this.message = _data["message"];
            this.odataType = _data["odataType"];
        }
    }

    static fromJS(data: any): WorkbookOperationError {
        data = typeof data === 'object' ? data : {};
        let result = new WorkbookOperationError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.additionalData) {
            data["additionalData"] = {};
            for (let key in this.additionalData) {
                if (this.additionalData.hasOwnProperty(key))
                    (<any>data["additionalData"])[key] = (<any>this.additionalData)[key];
            }
        }
        data["backingStore"] = this.backingStore ? this.backingStore.toJSON() : <any>undefined;
        data["code"] = this.code;
        data["innerError"] = this.innerError ? this.innerError.toJSON() : <any>undefined;
        data["message"] = this.message;
        data["odataType"] = this.odataType;
        return data;
    }
}

export interface IWorkbookOperationError {
    /** Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well. */
    additionalData?: { [key: string]: any; } | undefined;
    /** Stores model information. */
    backingStore?: IBackingStore | undefined;
    /** The error code. */
    code?: string | undefined;
    /** The innerError property */
    innerError?: WorkbookOperationError | undefined;
    /** The error message. */
    message?: string | undefined;
    /** The OdataType property */
    odataType?: string | undefined;
}

export enum WorkbookOperationStatus {
    NotStarted = 0,
    Running = 1,
    Succeeded = 2,
    Failed = 3,
}

/** Metadata associated with a YouTube playlist. */
export class Playlist implements IPlaylist {
    /** Playlist ID. */
    id?: PlaylistId;
    /** Playlist URL. */
    url?: string;
    /** Playlist title. */
    title?: string;
    /** Playlist author. */
    author?: Author | undefined;
    /** Playlist description. */
    description?: string;
    /** Total count of videos included in the playlist. */
    count?: number | undefined;
    /** Playlist thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IPlaylist) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? PlaylistId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            this.description = _data["description"];
            this.count = _data["count"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Playlist {
        data = typeof data === 'object' ? data : {};
        let result = new Playlist();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["description"] = this.description;
        data["count"] = this.count;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube playlist. */
export interface IPlaylist {
    /** Playlist ID. */
    id?: PlaylistId;
    /** Playlist URL. */
    url?: string;
    /** Playlist title. */
    title?: string;
    /** Playlist author. */
    author?: Author | undefined;
    /** Playlist description. */
    description?: string;
    /** Total count of videos included in the playlist. */
    count?: number | undefined;
    /** Playlist thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Generic collection of items returned by a single request. */
export class BatchOfPlaylistVideo implements IBatchOfPlaylistVideo {
    /** Items included in the batch. */
    items?: PlaylistVideo[];

    constructor(data?: IBatchOfPlaylistVideo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PlaylistVideo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchOfPlaylistVideo {
        data = typeof data === 'object' ? data : {};
        let result = new BatchOfPlaylistVideo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** Generic collection of items returned by a single request. */
export interface IBatchOfPlaylistVideo {
    /** Items included in the batch. */
    items?: PlaylistVideo[];
}

/** Abstract result returned by a search query.    Use pattern matching to handle specific instances of this type.    Can be either one of the following: */
export abstract class ISearchResult implements IISearchResult {
    /** Result URL. */
    url?: string;
    /** Result title. */
    title?: string;

    constructor(data?: IISearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
            this.title = _data["title"];
        }
    }

    static fromJS(data: any): ISearchResult {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'ISearchResult' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        data["title"] = this.title;
        return data;
    }
}

/** Abstract result returned by a search query.    Use pattern matching to handle specific instances of this type.    Can be either one of the following: */
export interface IISearchResult {
    /** Result URL. */
    url?: string;
    /** Result title. */
    title?: string;
}

/** Metadata associated with a YouTube video returned by a search query. */
export class VideoSearchResult implements IVideoSearchResult {
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IVideoSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? VideoId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            this.duration = _data["duration"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): VideoSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new VideoSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["duration"] = this.duration;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube video returned by a search query. */
export interface IVideoSearchResult {
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Metadata associated with a YouTube playlist returned by a search query. */
export class PlaylistSearchResult implements IPlaylistSearchResult {
    /** Playlist ID. */
    id?: PlaylistId;
    /** Playlist URL. */
    url?: string;
    /** Playlist title. */
    title?: string;
    /** Playlist author. */
    author?: Author | undefined;
    /** Playlist thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IPlaylistSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? PlaylistId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlaylistSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new PlaylistSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube playlist returned by a search query. */
export interface IPlaylistSearchResult {
    /** Playlist ID. */
    id?: PlaylistId;
    /** Playlist URL. */
    url?: string;
    /** Playlist title. */
    title?: string;
    /** Playlist author. */
    author?: Author | undefined;
    /** Playlist thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Metadata associated with a YouTube channel returned by a search query. */
export class ChannelSearchResult implements IChannelSearchResult {
    /** Channel ID. */
    id?: ChannelId;
    /** Channel URL. */
    url?: string;
    /** Channel title. */
    title?: string;
    /** Channel thumbnails. */
    thumbnails?: Thumbnail[];

    constructor(data?: IChannelSearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? ChannelId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ChannelSearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new ChannelSearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        return data;
    }
}

/** Metadata associated with a YouTube channel returned by a search query. */
export interface IChannelSearchResult {
    /** Channel ID. */
    id?: ChannelId;
    /** Channel URL. */
    url?: string;
    /** Channel title. */
    title?: string;
    /** Channel thumbnails. */
    thumbnails?: Thumbnail[];
}

/** Generic collection of items returned by a single request. */
export class BatchOfISearchResult implements IBatchOfISearchResult {
    /** Items included in the batch. */
    items?: ISearchResult[];

    constructor(data?: IBatchOfISearchResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ISearchResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BatchOfISearchResult {
        data = typeof data === 'object' ? data : {};
        let result = new BatchOfISearchResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data;
    }
}

/** Generic collection of items returned by a single request. */
export interface IBatchOfISearchResult {
    /** Items included in the batch. */
    items?: ISearchResult[];
}

/** Filter applied to a YouTube search query. */
export enum SearchFilter {
    None = 0,
    Video = 1,
    Playlist = 2,
    Channel = 3,
}

/** Metadata associated with a YouTube video. */
export class Video2 implements IVideo2 {
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video upload date. */
    uploadDate?: Date;
    /** Video description. */
    description?: string;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];
    /** Available search keywords for the video. */
    keywords?: string[];
    /** Engagement statistics for the video. */
    engagement?: Engagement;

    constructor(data?: IVideo2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"] ? VideoId.fromJS(_data["id"]) : <any>undefined;
            this.url = _data["url"];
            this.title = _data["title"];
            this.author = _data["author"] ? Author.fromJS(_data["author"]) : <any>undefined;
            this.uploadDate = _data["uploadDate"] ? new Date(_data["uploadDate"].toString()) : <any>undefined;
            this.description = _data["description"];
            this.duration = _data["duration"];
            if (Array.isArray(_data["thumbnails"])) {
                this.thumbnails = [] as any;
                for (let item of _data["thumbnails"])
                    this.thumbnails!.push(Thumbnail.fromJS(item));
            }
            if (Array.isArray(_data["keywords"])) {
                this.keywords = [] as any;
                for (let item of _data["keywords"])
                    this.keywords!.push(item);
            }
            this.engagement = _data["engagement"] ? Engagement.fromJS(_data["engagement"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Video2 {
        data = typeof data === 'object' ? data : {};
        let result = new Video2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id ? this.id.toJSON() : <any>undefined;
        data["url"] = this.url;
        data["title"] = this.title;
        data["author"] = this.author ? this.author.toJSON() : <any>undefined;
        data["uploadDate"] = this.uploadDate ? this.uploadDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["duration"] = this.duration;
        if (Array.isArray(this.thumbnails)) {
            data["thumbnails"] = [];
            for (let item of this.thumbnails)
                data["thumbnails"].push(item.toJSON());
        }
        if (Array.isArray(this.keywords)) {
            data["keywords"] = [];
            for (let item of this.keywords)
                data["keywords"].push(item);
        }
        data["engagement"] = this.engagement ? this.engagement.toJSON() : <any>undefined;
        return data;
    }
}

/** Metadata associated with a YouTube video. */
export interface IVideo2 {
    /** Video ID. */
    id?: VideoId;
    /** Video URL. */
    url?: string;
    /** Video title. */
    title?: string;
    /** Video author. */
    author?: Author;
    /** Video upload date. */
    uploadDate?: Date;
    /** Video description. */
    description?: string;
    /** Video duration. */
    duration?: string | undefined;
    /** Video thumbnails. */
    thumbnails?: Thumbnail[];
    /** Available search keywords for the video. */
    keywords?: string[];
    /** Engagement statistics for the video. */
    engagement?: Engagement;
}

/** Engagement statistics. */
export class Engagement implements IEngagement {
    /** View count. */
    viewCount?: number;
    /** Like count. */
    likeCount?: number;
    /** Dislike count. */
    dislikeCount?: number;
    /** Average rating. */
    averageRating?: number;

    constructor(data?: IEngagement) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.viewCount = _data["viewCount"];
            this.likeCount = _data["likeCount"];
            this.dislikeCount = _data["dislikeCount"];
            this.averageRating = _data["averageRating"];
        }
    }

    static fromJS(data: any): Engagement {
        data = typeof data === 'object' ? data : {};
        let result = new Engagement();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["viewCount"] = this.viewCount;
        data["likeCount"] = this.likeCount;
        data["dislikeCount"] = this.dislikeCount;
        data["averageRating"] = this.averageRating;
        return data;
    }
}

/** Engagement statistics. */
export interface IEngagement {
    /** View count. */
    viewCount?: number;
    /** Like count. */
    likeCount?: number;
    /** Dislike count. */
    dislikeCount?: number;
    /** Average rating. */
    averageRating?: number;
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}